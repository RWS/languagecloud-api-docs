{
  "README.html": {
    "href": "README.html",
    "title": "LanguageCloud-api-docs",
    "summary": "LanguageCloud-api-docs What is it? This the main repository for the Trados Cloud Public API documentation. Can I contribute? Anyone is welcome to contribute to the public Trados Cloud API documentation by making a pull request into the master repository. The documentation is split into the following sections: Articles This section hosts a series of usefull article on: how to get started with writing plug-ins for Trados Cloud how to best use the public APIs how to troubleshoot common issues API Concepts This section hosts the main guidelines on using the Public API along with the API References Getting started with your contribution The documentation is built using a static documentation generator called DocFX. The documentation content is saved in Markdown files and then built into a website using DocFX. The table of content is saved into separate toc.yml files. In order for you to make a contribution directly please follow the next steps: Create a local branch from the main repository Add your changes by modifying existing Markdown files or by adding new Markdown files Adding new files will require updating the toc.yml files. Use the guideline provided by DocFX to learn more. You can use tools such as Notepad++ or Visual Studio Code to edit the content Create a Pull Request with your changes. This pull request will be reviewed for correctness by one of our technical writers Once your pull request has been approved and committed into the main branch, an automatic pipeline will be triggered which will push your changes to the live documentation site if you wish to test your changes locally you can follow the DOCFX Installation guideline and build the entire solution locally Our documentation automatically fills in the product name and other details so you don't have to make the changes manually if we decide to update the product name. Use the 'var:VariableName' construct to tell our documentation engine to fill in the info for you. Here are the constructs available at this point: <var:ProductName> - The product name, for example Trados Cloud"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Alignment.AlignmentData.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Alignment.AlignmentData.html",
    "title": "Class AlignmentData",
    "summary": "Class AlignmentData Alignment related information. Inheritance object ExtensionDataContainer AlignmentData Implements ICloneable<AlignmentData> Inherited Members ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Alignment Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class AlignmentData : ExtensionDataContainer, ICloneable<AlignmentData> Constructors AlignmentData() Declaration public AlignmentData() Properties ContentInsertDate Gets or sets the alignment content insert date. Declaration public DateTime ContentInsertDate { get; set; } Property Value Type Description DateTime IncompatibleSpanPairSet Collection of SpanPairNode incompatible alignments. Declaration public List<SpanPairNode> IncompatibleSpanPairSet { get; set; } Property Value Type Description List<SpanPairNode> ModelDate Gets or sets the alignment model creation date. Declaration public DateTime? ModelDate { get; set; } Property Value Type Description DateTime? SpanPairSet Collection of SpanPairNode alignments subject to bilingual compositionality constraints. Declaration public List<SpanPairNode> SpanPairSet { get; set; } Property Value Type Description List<SpanPairNode> TuId The TranslationUnit identifier. Declaration public int TuId { get; set; } Property Value Type Description int Methods Clone() Clones this instance. Declaration public AlignmentData Clone() Returns Type Description AlignmentData Implements ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Alignment.LiftSpan.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Alignment.LiftSpan.html",
    "title": "Class LiftSpan",
    "summary": "Class LiftSpan A class to represent a continous span of items in an ordered sequence Inheritance object ExtensionDataContainer LiftSpan Implements ICloneable<LiftSpan> Inherited Members ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Alignment Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class LiftSpan : ExtensionDataContainer, ICloneable<LiftSpan> Constructors LiftSpan() Declaration public LiftSpan() Properties Length The length of the span (number of items that it covers in the sequence). Declaration public int Length { get; set; } Property Value Type Description int StartIndex The zero-based start index of the span. Declaration public int StartIndex { get; set; } Property Value Type Description int Methods Clone() Clones this instance. Declaration public LiftSpan Clone() Returns Type Description LiftSpan Implements ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Alignment.SpanPairNode.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Alignment.SpanPairNode.html",
    "title": "Class SpanPairNode",
    "summary": "Class SpanPairNode Stores information about an alignment between a pair of LiftSpan objects. Inheritance object ExtensionDataContainer SpanPairNode Implements ICloneable<SpanPairNode> Inherited Members ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Alignment Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class SpanPairNode : ExtensionDataContainer, ICloneable<SpanPairNode> Constructors SpanPairNode() Declaration public SpanPairNode() Properties Confidence A value indicating how reliable this alignment should be considered to be. A zero value indicates that no reliability-value can be applied. Otherwise, the value should be no greater than 1, which indicates maximum reliability. Declaration public float Confidence { get; set; } Property Value Type Description float Provenance A value recording how the alignment was produced. Value Description 1 NodeAlignment 2 SeedConfirmation 3 PlaceableAlignment 4 PhraseExtractor 5 Structure 6 TrainedAligner 7 Other Declaration public int Provenance { get; set; } Property Value Type Description int SourceSpan The source LiftSpan. Declaration public LiftSpan SourceSpan { get; set; } Property Value Type Description LiftSpan TargetSpan The target LiftSpan. Declaration public LiftSpan TargetSpan { get; set; } Property Value Type Description LiftSpan Methods Clone() Clones this instance. Declaration public SpanPairNode Clone() Returns Type Description SpanPairNode Implements ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Alignment.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Alignment.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Alignment",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.Alignment Classes AlignmentData Alignment related information. LiftSpan A class to represent a continous span of items in an ordered sequence SpanPairNode Stores information about an alignment between a pair of LiftSpan objects."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Annotations.AnnotationContainer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Annotations.AnnotationContainer.html",
    "title": "Class AnnotationContainer",
    "summary": "Class AnnotationContainer Abstract MarkupDataContainer, marking a user annotation on the BCM. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer AnnotationContainer CommentContainer TerminologyAnnotationContainer Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, bool>) MarkupDataContainer.GetAllChildren<T>(Func<T, bool>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(int, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.Clone() MarkupDataContainer.MoveToContainer(MarkupDataContainer, int, int, int) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.UniqueClone() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.this[int] MarkupData.AcceptVisitor(BcmVisitor) MarkupData.Id MarkupData.Type MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Annotations Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class AnnotationContainer : MarkupDataContainer, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData> Constructors AnnotationContainer() Declaration protected AnnotationContainer() Properties AnnotationId The annotation ID. Declaration [DataMember(Name = \"annotationId\", EmitDefaultValue = false)] public int AnnotationId { get; set; } Property Value Type Description int Methods Equals(MarkupData) MarkupData based equality. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other Returns Type Description bool Overrides MarkupDataContainer.Equals(MarkupData) Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MarkupDataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MarkupDataContainer.GetHashCode() Implements IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Annotations.CommentContainer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Annotations.CommentContainer.html",
    "title": "Class CommentContainer",
    "summary": "Class CommentContainer An AnnotationContainer representing user comments. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer AnnotationContainer CommentContainer Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> ISkeletonItemReference<CommentDefinition> Inherited Members AnnotationContainer.AnnotationId MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, bool>) MarkupDataContainer.GetAllChildren<T>(Func<T, bool>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(int, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.MoveToContainer(MarkupDataContainer, int, int, int) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.this[int] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Annotations Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class CommentContainer : AnnotationContainer, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData>, ISkeletonItemReference<CommentDefinition> Constructors CommentContainer() Declaration public CommentContainer() Properties CommentDefinitionId Gets or sets the comment definition ID. Declaration [DataMember(Name = \"commentDefinitionId\")] public int CommentDefinitionId { get; set; } Property Value Type Description int The comment definition ID. Definition Gets the CommentDefinition. Declaration public CommentDefinition Definition { get; } Property Value Type Description CommentDefinition Type Gets the MarkupData type. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public CommentContainer Clone() Returns Type Description CommentContainer The clone. Equals(MarkupData) MarkupData based equality. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other Returns Type Description bool Overrides AnnotationContainer.Equals(MarkupData) Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides AnnotationContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides AnnotationContainer.GetHashCode() UniqueClone() Clones this instance using a new uniqueu ID. Declaration public CommentContainer UniqueClone() Returns Type Description CommentContainer The clone. Implements IEquatable<T> ICloneable<T> IEquatable<T> ISkeletonItemReference<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Annotations.TerminologyAnnotationContainer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Annotations.TerminologyAnnotationContainer.html",
    "title": "Class TerminologyAnnotationContainer",
    "summary": "Class TerminologyAnnotationContainer An AnnotationContainer representing terminology-related annotations. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer AnnotationContainer TerminologyAnnotationContainer Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> ISkeletonItemReference<TerminologyData> Inherited Members AnnotationContainer.AnnotationId MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, bool>) MarkupDataContainer.GetAllChildren<T>(Func<T, bool>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(int, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.Clone() MarkupDataContainer.MoveToContainer(MarkupDataContainer, int, int, int) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.UniqueClone() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.this[int] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Annotations Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class TerminologyAnnotationContainer : AnnotationContainer, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData>, ISkeletonItemReference<TerminologyData> Constructors TerminologyAnnotationContainer() Declaration public TerminologyAnnotationContainer() Properties Definition Gets the TerminologyData definition. Declaration public TerminologyData Definition { get; } Property Value Type Description TerminologyData TerminologyDataId Gets or sets the terminology data identifier. Declaration [DataMember(Name = \"terminologyDataId\")] public int TerminologyDataId { get; set; } Property Value Type Description int The terminology data identifier. Type Gets the MarkupData type. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Equals(MarkupData) MarkupData based equality. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other Returns Type Description bool Overrides AnnotationContainer.Equals(MarkupData) Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides AnnotationContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides AnnotationContainer.GetHashCode() Implements IEquatable<T> ICloneable<T> IEquatable<T> ISkeletonItemReference<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Annotations.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Annotations.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Annotations",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.Annotations Classes AnnotationContainer Abstract MarkupDataContainer, marking a user annotation on the BCM. CommentContainer An AnnotationContainer representing user comments. TerminologyAnnotationContainer An AnnotationContainer representing terminology-related annotations."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.DictionaryEx-2.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.DictionaryEx-2.html",
    "title": "Class DictionaryEx<TKey, TValue>",
    "summary": "Class DictionaryEx<TKey, TValue> A dictionary with support for: deep Equals (instead of ref comparison) deep GetHashCode (2 refs with the same values will return the same hash code). The default dictionary returns hash code based on reference. Inheritance object Dictionary<TKey, TValue> DictionaryEx<TKey, TValue> Implements IDictionary<TKey, TValue> ICollection<KeyValuePair<TKey, TValue>> IDictionary ICollection IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable ISerializable IDeserializationCallback IEquatable<DictionaryEx<TKey, TValue>> Inherited Members Dictionary<TKey, TValue>.Add(TKey, TValue) Dictionary<TKey, TValue>.Clear() Dictionary<TKey, TValue>.ContainsKey(TKey) Dictionary<TKey, TValue>.ContainsValue(TValue) Dictionary<TKey, TValue>.GetEnumerator() Dictionary<TKey, TValue>.GetObjectData(SerializationInfo, StreamingContext) Dictionary<TKey, TValue>.OnDeserialization(object) Dictionary<TKey, TValue>.Remove(TKey) Dictionary<TKey, TValue>.Remove(TKey, out TValue) Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue) Dictionary<TKey, TValue>.TryAdd(TKey, TValue) Dictionary<TKey, TValue>.EnsureCapacity(int) Dictionary<TKey, TValue>.TrimExcess() Dictionary<TKey, TValue>.TrimExcess(int) Dictionary<TKey, TValue>.Comparer Dictionary<TKey, TValue>.Count Dictionary<TKey, TValue>.Keys Dictionary<TKey, TValue>.Values Dictionary<TKey, TValue>.this[TKey] object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Collections Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class DictionaryEx<TKey, TValue> : Dictionary<TKey, TValue>, IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable, ISerializable, IDeserializationCallback, IEquatable<DictionaryEx<TKey, TValue>> Type Parameters Name Description TKey TValue Constructors DictionaryEx() Initializes a new instance of the DictionaryEx<TKey, TValue> class. Declaration public DictionaryEx() DictionaryEx(DictionaryEx<TKey, TValue>) Initializes a new instance of the DictionaryEx<TKey, TValue> class, based on another instance. Declaration public DictionaryEx(DictionaryEx<TKey, TValue> other) Parameters Type Name Description DictionaryEx<TKey, TValue> other The other instance from which to construct the current instance. DictionaryEx(IEnumerable<KeyValuePair<TKey, TValue>>) Initializes a new instance of the DictionaryEx<TKey, TValue> class. Declaration public DictionaryEx(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description IEnumerable<KeyValuePair<TKey, TValue>> items The items. Methods Equals(DictionaryEx<TKey, TValue>) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(DictionaryEx<TKey, TValue> other) Parameters Type Name Description DictionaryEx<TKey, TValue> other Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides object.GetHashCode() Implements IDictionary<TKey, TValue> ICollection<T> IDictionary ICollection IReadOnlyDictionary<TKey, TValue> IReadOnlyCollection<T> IEnumerable<T> IEnumerable ISerializable IDeserializationCallback IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.FileCollection.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.FileCollection.html",
    "title": "Class FileCollection",
    "summary": "Class FileCollection A dictionary-based collection of Files. Inheritance object Collection<File> KeyedCollection<string, File> KeyBasedCollection<string, File> FileCollection Implements IList<File> ICollection<File> IList ICollection IReadOnlyList<File> IReadOnlyCollection<File> IEnumerable<File> IEnumerable IEquatable<KeyBasedCollection<string, File>> Inherited Members KeyBasedCollection<string, File>.KeySelector KeyBasedCollection<string, File>.ForEach(Action<File>) KeyBasedCollection<string, File>.Equals(KeyBasedCollection<string, File>) KeyBasedCollection<string, File>.Equals(object) KeyBasedCollection<string, File>.GetHashCode() KeyBasedCollection<string, File>.GetKeyForItem(File) KeyedCollection<string, File>.Contains(string) KeyedCollection<string, File>.TryGetValue(string, out File) KeyedCollection<string, File>.Remove(string) KeyedCollection<string, File>.ChangeItemKey(File, string) KeyedCollection<string, File>.ClearItems() KeyedCollection<string, File>.InsertItem(int, File) KeyedCollection<string, File>.RemoveItem(int) KeyedCollection<string, File>.SetItem(int, File) KeyedCollection<string, File>.Comparer KeyedCollection<string, File>.this[string] KeyedCollection<string, File>.Dictionary Collection<File>.Add(File) Collection<File>.Clear() Collection<File>.CopyTo(File[], int) Collection<File>.Contains(File) Collection<File>.GetEnumerator() Collection<File>.IndexOf(File) Collection<File>.Insert(int, File) Collection<File>.Remove(File) Collection<File>.RemoveAt(int) Collection<File>.ClearItems() Collection<File>.RemoveItem(int) Collection<File>.Count Collection<File>.Items Collection<File>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Collections Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class FileCollection : KeyBasedCollection<string, File>, IList<File>, ICollection<File>, IList, ICollection, IReadOnlyList<File>, IReadOnlyCollection<File>, IEnumerable<File>, IEnumerable, IEquatable<KeyBasedCollection<string, File>> Constructors FileCollection() Initializes a new instance of the FileCollection class. Declaration public FileCollection() Properties IdGenerator The identifier generator. Declaration public IdGenerator IdGenerator { get; set; } Property Value Type Description IdGenerator Methods InsertItem(int, File) Inserts an element into the KeyedCollection<TKey, TItem> at the specified index. Declaration protected override void InsertItem(int index, File item) Parameters Type Name Description int index The zero-based index at which item should be inserted. File item The object to insert. Overrides KeyedCollection<string, File>.InsertItem(int, File) SetItem(int, File) Replaces the item at the specified index with the specified item. Declaration protected override void SetItem(int index, File item) Parameters Type Name Description int index The zero-based index of the item to be replaced. File item The new item. Overrides KeyedCollection<string, File>.SetItem(int, File) Implements IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IEquatable<T> Extension Methods ModelExtensions.IsSequenceEqual<TSource>(IList<TSource>, IList<TSource>)"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.HashDictionaryInt-2.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.HashDictionaryInt-2.html",
    "title": "Class HashDictionaryInt<TKey, TValue>",
    "summary": "Class HashDictionaryInt<TKey, TValue> A dictionary which uses hashes generated from the key to store items in a backing dictionary. We may look at generating long hashes eventually if there are many collisions detected. Inheritance object HashDictionaryInt<TKey, TValue> Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Collections Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class HashDictionaryInt<TKey, TValue> Type Parameters Name Description TKey Item from which key will be derived. At the moment, GetHashCode is called on the key to use as actual key in backing Dictionary TValue value for given key being stored in dictionary Constructors HashDictionaryInt() Initializes a new instance of the HashDictionaryInt<TKey, TValue> class. Declaration public HashDictionaryInt() Fields _backingDictionary The backing dictionary. Declaration public Dictionary<int, List<KeyValuePair<TKey, TValue>>> _backingDictionary Field Value Type Description Dictionary<int, List<KeyValuePair<TKey, TValue>>> Properties this[TKey] Gets the TKey with the specified key. Declaration public TValue this[TKey key] { get; } Parameters Type Name Description TKey key The key. Property Value Type Description TValue The TValue. Exceptions Type Condition InvalidOperationException Multiple matches found in collection or Key not found in collection Methods Add(TKey, TValue) Adds the specified key. Declaration public void Add(TKey key, TValue value) Parameters Type Name Description TKey key The key. TValue value The value. Exceptions Type Condition InvalidOperationException Item with same key already exists in collection Clear() Removes all keys and values from this instance. Declaration public void Clear() ContainsKey(TKey) Determines whether the collection contains the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description bool true if the collection contains the specified key; otherwise, false. Exceptions Type Condition InvalidOperationException Multiple matches found in collection GetHashCodeInternal(TKey) Gets the internal hash code used in the backing dictionary. Declaration protected virtual int GetHashCodeInternal(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description int Remove(TKey) Removes the specified key. Declaration public bool Remove(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description bool Exceptions Type Condition InvalidOperationException Multiple matches found in collection TryGetValue(TKey, out TValue) Tries to get a value by key. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key. TValue value The value. Returns Type Description bool"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.KeyBasedCollection-2.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.KeyBasedCollection-2.html",
    "title": "Class KeyBasedCollection<TKey, TValue>",
    "summary": "Class KeyBasedCollection<TKey, TValue> A KeyBasedCollection<TKey, TValue> implementation with support for deep equality. Inheritance object Collection<TValue> KeyedCollection<TKey, TValue> KeyBasedCollection<TKey, TValue> FileCollection ParagraphUnitCollection SubContentCollection Implements IList<TValue> ICollection<TValue> IList ICollection IReadOnlyList<TValue> IReadOnlyCollection<TValue> IEnumerable<TValue> IEnumerable IEquatable<KeyBasedCollection<TKey, TValue>> Inherited Members KeyedCollection<TKey, TValue>.Contains(TKey) KeyedCollection<TKey, TValue>.TryGetValue(TKey, out TValue) KeyedCollection<TKey, TValue>.Remove(TKey) KeyedCollection<TKey, TValue>.ChangeItemKey(TValue, TKey) KeyedCollection<TKey, TValue>.ClearItems() KeyedCollection<TKey, TValue>.GetKeyForItem(TValue) KeyedCollection<TKey, TValue>.InsertItem(int, TValue) KeyedCollection<TKey, TValue>.RemoveItem(int) KeyedCollection<TKey, TValue>.SetItem(int, TValue) KeyedCollection<TKey, TValue>.Comparer KeyedCollection<TKey, TValue>.this[TKey] KeyedCollection<TKey, TValue>.Dictionary Collection<TValue>.Add(TValue) Collection<TValue>.Clear() Collection<TValue>.CopyTo(TValue[], int) Collection<TValue>.Contains(TValue) Collection<TValue>.GetEnumerator() Collection<TValue>.IndexOf(TValue) Collection<TValue>.Insert(int, TValue) Collection<TValue>.Remove(TValue) Collection<TValue>.RemoveAt(int) Collection<TValue>.ClearItems() Collection<TValue>.InsertItem(int, TValue) Collection<TValue>.RemoveItem(int) Collection<TValue>.SetItem(int, TValue) Collection<TValue>.Count Collection<TValue>.Items Collection<TValue>.this[int] object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Collections Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class KeyBasedCollection<TKey, TValue> : KeyedCollection<TKey, TValue>, IList<TValue>, ICollection<TValue>, IList, ICollection, IReadOnlyList<TValue>, IReadOnlyCollection<TValue>, IEnumerable<TValue>, IEnumerable, IEquatable<KeyBasedCollection<TKey, TValue>> Type Parameters Name Description TKey The key. TValue The value. Constructors KeyBasedCollection() Initializes a new instance of the KeyBasedCollection<TKey, TValue> class. Declaration protected KeyBasedCollection() KeyBasedCollection(Func<TValue, TKey>) Initializes a new instance of the KeyBasedCollection<TKey, TValue> class. Declaration public KeyBasedCollection(Func<TValue, TKey> keySelector) Parameters Type Name Description Func<TValue, TKey> keySelector The key selector. Fields KeySelector The key selector. Declaration protected Func<TValue, TKey> KeySelector Field Value Type Description Func<TValue, TKey> Methods Equals(KeyBasedCollection<TKey, TValue>) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(KeyBasedCollection<TKey, TValue> other) Parameters Type Name Description KeyBasedCollection<TKey, TValue> other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) ForEach(Action<TValue>) Executes an action over each element of the collection. Declaration public void ForEach(Action<TValue> action) Parameters Type Name Description Action<TValue> action The action. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides object.GetHashCode() GetKeyForItem(TValue) When implemented in a derived class, extracts the key from the specified element. Declaration protected override TKey GetKeyForItem(TValue item) Parameters Type Name Description TValue item The element from which to extract the key. Returns Type Description TKey The key for the specified element. Overrides KeyedCollection<TKey, TValue>.GetKeyForItem(TValue) Implements IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IEquatable<T> Extension Methods ModelExtensions.IsSequenceEqual<TSource>(IList<TSource>, IList<TSource>)"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.ParagraphUnitCollection.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.ParagraphUnitCollection.html",
    "title": "Class ParagraphUnitCollection",
    "summary": "Class ParagraphUnitCollection A KeyBasedCollection<TKey, TValue> of ParagraphUnits. Adds support for setting the parent elements and additonal helper properties. Inheritance object Collection<ParagraphUnit> KeyedCollection<string, ParagraphUnit> KeyBasedCollection<string, ParagraphUnit> ParagraphUnitCollection Implements IList<ParagraphUnit> ICollection<ParagraphUnit> IList ICollection IReadOnlyList<ParagraphUnit> IReadOnlyCollection<ParagraphUnit> IEnumerable<ParagraphUnit> IEnumerable IEquatable<KeyBasedCollection<string, ParagraphUnit>> Inherited Members KeyBasedCollection<string, ParagraphUnit>.KeySelector KeyBasedCollection<string, ParagraphUnit>.ForEach(Action<ParagraphUnit>) KeyBasedCollection<string, ParagraphUnit>.Equals(KeyBasedCollection<string, ParagraphUnit>) KeyBasedCollection<string, ParagraphUnit>.Equals(object) KeyBasedCollection<string, ParagraphUnit>.GetHashCode() KeyBasedCollection<string, ParagraphUnit>.GetKeyForItem(ParagraphUnit) KeyedCollection<string, ParagraphUnit>.Contains(string) KeyedCollection<string, ParagraphUnit>.TryGetValue(string, out ParagraphUnit) KeyedCollection<string, ParagraphUnit>.Remove(string) KeyedCollection<string, ParagraphUnit>.ChangeItemKey(ParagraphUnit, string) KeyedCollection<string, ParagraphUnit>.ClearItems() KeyedCollection<string, ParagraphUnit>.InsertItem(int, ParagraphUnit) KeyedCollection<string, ParagraphUnit>.RemoveItem(int) KeyedCollection<string, ParagraphUnit>.SetItem(int, ParagraphUnit) KeyedCollection<string, ParagraphUnit>.Comparer KeyedCollection<string, ParagraphUnit>.this[string] KeyedCollection<string, ParagraphUnit>.Dictionary Collection<ParagraphUnit>.Add(ParagraphUnit) Collection<ParagraphUnit>.Clear() Collection<ParagraphUnit>.CopyTo(ParagraphUnit[], int) Collection<ParagraphUnit>.Contains(ParagraphUnit) Collection<ParagraphUnit>.GetEnumerator() Collection<ParagraphUnit>.IndexOf(ParagraphUnit) Collection<ParagraphUnit>.Insert(int, ParagraphUnit) Collection<ParagraphUnit>.Remove(ParagraphUnit) Collection<ParagraphUnit>.RemoveAt(int) Collection<ParagraphUnit>.ClearItems() Collection<ParagraphUnit>.RemoveItem(int) Collection<ParagraphUnit>.SetItem(int, ParagraphUnit) Collection<ParagraphUnit>.Count Collection<ParagraphUnit>.Items Collection<ParagraphUnit>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Collections Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class ParagraphUnitCollection : KeyBasedCollection<string, ParagraphUnit>, IList<ParagraphUnit>, ICollection<ParagraphUnit>, IList, ICollection, IReadOnlyList<ParagraphUnit>, IReadOnlyCollection<ParagraphUnit>, IEnumerable<ParagraphUnit>, IEnumerable, IEquatable<KeyBasedCollection<string, ParagraphUnit>> Constructors ParagraphUnitCollection() Initializes a new instance of the ParagraphUnitCollection class. Declaration public ParagraphUnitCollection() Properties AllSegmentPairs Gets all segment pairs. Declaration public IEnumerable<SegmentPair> AllSegmentPairs { get; } Property Value Type Description IEnumerable<SegmentPair> All segment pairs. ParentFile Gets or sets the parent file. Declaration public File ParentFile { get; set; } Property Value Type Description File The parent file. SegmentCount Gets the segment count. Declaration public int SegmentCount { get; } Property Value Type Description int The segment count. Methods InsertItem(int, ParagraphUnit) Inserts an element into the KeyedCollection<TKey, TItem> at the specified index. Declaration protected override void InsertItem(int index, ParagraphUnit item) Parameters Type Name Description int index The zero-based index at which item should be inserted. ParagraphUnit item The object to insert. Overrides KeyedCollection<string, ParagraphUnit>.InsertItem(int, ParagraphUnit) Implements IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IEquatable<T> Extension Methods ModelExtensions.IsSequenceEqual<TSource>(IList<TSource>, IList<TSource>)"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.SegmentPairCollection.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.SegmentPairCollection.html",
    "title": "Class SegmentPairCollection",
    "summary": "Class SegmentPairCollection A collection of SegmentPairs. Adds support for indexing by segment number. Inheritance object SegmentPairCollection Implements IEnumerable<SegmentPair> IEnumerable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Collections Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class SegmentPairCollection : IEnumerable<SegmentPair>, IEnumerable Constructors SegmentPairCollection(IEnumerable<SegmentPair>) Initializes a new instance of the SegmentPairCollection class. Declaration public SegmentPairCollection(IEnumerable<SegmentPair> enumerable) Parameters Type Name Description IEnumerable<SegmentPair> enumerable The enumerable. Properties this[string] Gets the SegmentPair with the specified segment number. Declaration public SegmentPair this[string segmentNumber] { get; } Parameters Type Name Description string segmentNumber The segment number. Property Value Type Description SegmentPair The SegmentPair. Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<SegmentPair> GetEnumerator() Returns Type Description IEnumerator<SegmentPair> An enumerator that can be used to iterate through the collection. Implements IEnumerable<T> IEnumerable"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Collections.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Collections",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.Collections Classes DictionaryEx<TKey, TValue> A dictionary with support for: deep Equals (instead of ref comparison) deep GetHashCode (2 refs with the same values will return the same hash code). The default dictionary returns hash code based on reference. FileCollection A dictionary-based collection of Files. HashDictionaryInt<TKey, TValue> A dictionary which uses hashes generated from the key to store items in a backing dictionary. We may look at generating long hashes eventually if there are many collisions detected. KeyBasedCollection<TKey, TValue> A KeyBasedCollection<TKey, TValue> implementation with support for deep equality. ParagraphUnitCollection A KeyBasedCollection<TKey, TValue> of ParagraphUnits. Adds support for setting the parent elements and additonal helper properties. SegmentPairCollection A collection of SegmentPairs. Adds support for indexing by segment number."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Common.BcmConst.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Common.BcmConst.html",
    "title": "Class BcmConst",
    "summary": "Class BcmConst Public constants. Inheritance object BcmConst Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Common Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class BcmConst Fields CurrentBcmModelVersion The current BCM model version. Declaration public static readonly string CurrentBcmModelVersion Field Value Type Description string DateTimeFormat DateTime format for serializing and deserializing BCM DateTime properties. Declaration public const string DateTimeFormat = \"yyyy-MM-dd'T'HH:mm:ss.fff'Z'\" Field Value Type Description string FrameworkOriginalParagraphUnitId Metadata key for storing the original ParagraphUnit ID, populated by the SDL Filter Framework. Declaration public const string FrameworkOriginalParagraphUnitId = \"frameworkOriginalParagraphUnitId\" Field Value Type Description string FrameworkOriginalTagId Metadata key for storing the original tag ID, populated by the SDL Filter Framework. Declaration public const string FrameworkOriginalTagId = \"frameworkOriginalTagId\" Field Value Type Description string KeepContextFromPreviousParagraph Metadata used for conversion from BCM back to native format. If this metadata is True , the same contexts are used. If False , new contexts are created from the BCM contexts. Declaration public const string KeepContextFromPreviousParagraph = \"_keepContextFromPreviousParagraph\" Field Value Type Description string"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Common.BcmModelValidation.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Common.BcmModelValidation.html",
    "title": "Class BcmModelValidation",
    "summary": "Class BcmModelValidation Inheritance object BcmModelValidation Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Common Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class BcmModelValidation Fields ExcludeBaseTypes Declaration public static readonly IEnumerable<Type> ExcludeBaseTypes Field Value Type Description IEnumerable<Type>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Common.BcmVisitor.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Common.BcmVisitor.html",
    "title": "Class BcmVisitor",
    "summary": "Class BcmVisitor An abstract class using the Visitor pattern. Can be implemented for concrete processing of BCM documents. Inheritance object BcmVisitor Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Common Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class BcmVisitor Constructors BcmVisitor() Declaration protected BcmVisitor() Methods VisitCommentContainer(CommentContainer) Visits a CommentContainer instance. Declaration public abstract void VisitCommentContainer(CommentContainer commentContainer) Parameters Type Name Description CommentContainer commentContainer VisitFeedbackContainer(FeedbackContainer) Visits a FeedbackContainer instance. Declaration public abstract void VisitFeedbackContainer(FeedbackContainer feedbackContainer) Parameters Type Name Description FeedbackContainer feedbackContainer VisitLockedContentContainer(LockedContentContainer) Visits a LockedContentContainer instance. Declaration public abstract void VisitLockedContentContainer(LockedContentContainer lockedContentContainer) Parameters Type Name Description LockedContentContainer lockedContentContainer VisitParagraph(Paragraph) Visits a Paragraph instance. Declaration public abstract void VisitParagraph(Paragraph paragraph) Parameters Type Name Description Paragraph paragraph VisitPlaceholderTag(PlaceholderTag) Visits a PlaceholderTag instance. Declaration public abstract void VisitPlaceholderTag(PlaceholderTag tag) Parameters Type Name Description PlaceholderTag tag VisitRevisionContainer(RevisionContainer) Visits a RevisionContainer instance. Declaration public abstract void VisitRevisionContainer(RevisionContainer revisionContainer) Parameters Type Name Description RevisionContainer revisionContainer VisitSegment(Segment) Visits a Segment instance. Declaration public abstract void VisitSegment(Segment segment) Parameters Type Name Description Segment segment VisitStructure(StructureTag) Visits a StructureTag instance. Declaration public abstract void VisitStructure(StructureTag structureTag) Parameters Type Name Description StructureTag structureTag The structure tag. VisitTagPair(TagPair) Visits a StructureTag instance. Declaration public abstract void VisitTagPair(TagPair tagPair) Parameters Type Name Description TagPair tagPair VisitTerminologyContainer(TerminologyAnnotationContainer) Visits a TerminologyAnnotationContainer instance. Declaration public abstract void VisitTerminologyContainer(TerminologyAnnotationContainer terminologyAnnotation) Parameters Type Name Description TerminologyAnnotationContainer terminologyAnnotation VisitText(TextMarkup) Visits a TextMarkup instance. Declaration public abstract void VisitText(TextMarkup text) Parameters Type Name Description TextMarkup text"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Common.DefaultTranslationOrigin.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Common.DefaultTranslationOrigin.html",
    "title": "Class DefaultTranslationOrigin",
    "summary": "Class DefaultTranslationOrigin This class holds the constants that represent the suggested default values to use for the TSdl.Core.Bcm.BcmModel.TranslationOrigin.OriginType attribute. Inheritance object DefaultTranslationOrigin Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Common Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class DefaultTranslationOrigin Fields AdaptiveMachineTranslation Adaptive machine translated content Declaration public const string AdaptiveMachineTranslation = \"amt\" Field Value Type Description string AutoPropagated The segment has been translated using AutoPropagation from internal matches. Declaration public const string AutoPropagated = \"auto-propagated\" Field Value Type Description string AutomatedAlignment The translated segment was created by an automated linguistic alignment of previously translated source and target content. Declaration public const string AutomatedAlignment = \"auto-aligned\" Field Value Type Description string AutomaticTranslation Adaptive machine translated content Declaration public const string AutomaticTranslation = \"automatic-translation\" Field Value Type Description string DocumentMatch Batch translation by applying a Context TM type tool like PerfectMatch(tm) Declaration public const string DocumentMatch = \"document-match\" Field Value Type Description string Interactive The segment has been manually adapted or translated from scratch. Declaration public const string Interactive = \"interactive\" Field Value Type Description string MachineTranslation Machine translated content Declaration public const string MachineTranslation = \"mt\" Field Value Type Description string NeuralMachineTranslation Adaptive machine translated content Declaration public const string NeuralMachineTranslation = \"nmt\" Field Value Type Description string NotTranslated The segment has not yet been translated. This is usually an empty segment. Declaration public const string NotTranslated = \"not-translated\" Field Value Type Description string ReverseAlignment The segment was updated by ReverseAlignment process. Declaration public const string ReverseAlignment = \"Retrofit\" Field Value Type Description string Source The segment has been translated by copying the source to the target. Declaration public const string Source = \"source\" Field Value Type Description string TranslationMemory Batch pre-translation using a fuzzy or 100% match Declaration public const string TranslationMemory = \"tm\" Field Value Type Description string Unknown The segment was translated by an unknown tool - usually from a third party provider. Declaration public const string Unknown = \"unknown\" Field Value Type Description string"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Common.ICloneable-1.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Common.ICloneable-1.html",
    "title": "Interface ICloneable<T>",
    "summary": "Interface ICloneable<T> Typed ICloneable interface. Namespace: Sdl.Core.Bcm.BcmModel.Common Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public interface ICloneable<out T> Type Parameters Name Description T Methods Clone() Clones this instance. Declaration T Clone() Returns Type Description T"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Common.ModelExtensions.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Common.ModelExtensions.html",
    "title": "Class ModelExtensions",
    "summary": "Class ModelExtensions Extension methods. Inheritance object ModelExtensions Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Common Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class ModelExtensions Methods IsSequenceEqual<TSource>(IList<TSource>, IList<TSource>) Performs a deep comparison between two IList<T> Declaration public static bool IsSequenceEqual<TSource>(this IList<TSource> first, IList<TSource> second) Parameters Type Name Description IList<TSource> first The first collection. IList<TSource> second The second collection. Returns Type Description bool True if the collections are deeply equal. Otherwise false. Type Parameters Name Description TSource The collection element type."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Common.TranslationQualityEstimationConstants.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Common.TranslationQualityEstimationConstants.html",
    "title": "Class TranslationQualityEstimationConstants",
    "summary": "Class TranslationQualityEstimationConstants Defines constants for TQE metadata in Binlingual API content Inheritance object TranslationQualityEstimationConstants Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Common Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class TranslationQualityEstimationConstants Fields TqeDescription TQE description - a machine generated description Declaration public const string TqeDescription = \"tqe-description\" Field Value Type Description string TqeEvaluatedAt Indicates the date and time in UTC that the TQE was evaluated at Declaration public const string TqeEvaluatedAt = \"tqe-evaluated-at\" Field Value Type Description string TqeModel Model used to evaluate TQE - e.g. daVinci, Bedrock Declaration public const string TqeModel = \"tqe-model\" Field Value Type Description string TqeScore Score of TQE evalutation - a value between 0 and 100 inclusive Declaration public const string TqeScore = \"tqe-score\" Field Value Type Description string TqeSystem System from which TQE originted - e.g. lw-mt Declaration public const string TqeSystem = \"tqe-system\" Field Value Type Description string"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Common.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Common.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Common",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.Common Classes BcmConst Public constants. BcmModelValidation BcmVisitor An abstract class using the Visitor pattern. Can be implemented for concrete processing of BCM documents. DefaultTranslationOrigin This class holds the constants that represent the suggested default values to use for the TSdl.Core.Bcm.BcmModel.TranslationOrigin.OriginType attribute. ModelExtensions Extension methods. TranslationQualityEstimationConstants Defines constants for TQE metadata in Binlingual API content Interfaces ICloneable<T> Typed ICloneable interface."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.ConfirmationLevel.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.ConfirmationLevel.html",
    "title": "Enum ConfirmationLevel",
    "summary": "Enum ConfirmationLevel Different stages of translation and translation approval for a Segment. Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [JsonConverter(typeof(EnumConverter), new object[] { ConfirmationLevel.NotTranslated })] public enum ConfirmationLevel Fields Name Description ApprovedSignOff Translated content Approved at Sign-off. ApprovedTranslation Translated content marked as Approved. Draft Draft (edited) content. NotTranslated Untranslated content. RejectedSignOff Translated content Rejected at Sign-off. RejectedTranslation Translated content marked as Rejected. Translated Translated content."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.DependencyFile.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.DependencyFile.html",
    "title": "Class DependencyFile",
    "summary": "Class DependencyFile Files marked as dependencies for the BCM content. Used for conversion from and to native formats. Inheritance object ExtensionDataContainer MetadataContainer DependencyFile Implements IEquatable<MetadataContainer> ICloneable<DependencyFile> IEquatable<DependencyFile> Inherited Members MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class DependencyFile : MetadataContainer, IEquatable<MetadataContainer>, ICloneable<DependencyFile>, IEquatable<DependencyFile> Constructors DependencyFile() Declaration public DependencyFile() Properties EmbeddedContent Gets or sets the embedded content. Declaration [DataMember(Name = \"embeddedContent\")] [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)] public string EmbeddedContent { get; set; } Property Value Type Description string The embedded content. Remarks In the cases where the dependency file is stored inline, this will contain the B64-encoded ZIP archive of the dependency file FileId The id of the given file in the BCM document. This is used for multi-file sections in the BCM document and for matching the dependency section to the given file section in the BCM document Declaration [DataMember(Name = \"fileId\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public string FileId { get; set; } Property Value Type Description string FileName Gets or sets the name of the file. Declaration [DataMember(Name = \"fileName\")] public string FileName { get; set; } Property Value Type Description string The name of the file. Id The DependencyFile Id. Declaration [DataMember(Name = \"id\")] public string Id { get; set; } Property Value Type Description string Location Gets or sets the file location. Declaration [DataMember(Name = \"location\")] public string Location { get; set; } Property Value Type Description string The file location. Provider Gets or sets the system providing the file. Declaration [DataMember(Name = \"provider\")] [JsonProperty(DefaultValueHandling = DefaultValueHandling.Ignore, NullValueHandling = NullValueHandling.Ignore)] public string Provider { get; set; } Property Value Type Description string The system providing the file. Usage Gets or sets the purpose of the dependency file. Declaration [DataMember(Name = \"usage\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public DependencyFileUsage Usage { get; set; } Property Value Type Description DependencyFileUsage The purpose of the dependency file. Methods Clone() Clones this instance. Declaration public DependencyFile Clone() Returns Type Description DependencyFile Equals(DependencyFile) Performs a deep-equals comparison. Declaration public bool Equals(DependencyFile other) Parameters Type Name Description DependencyFile other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MetadataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MetadataContainer.GetHashCode() Implements IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.DependencyFileUsage.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.DependencyFileUsage.html",
    "title": "Enum DependencyFileUsage",
    "summary": "Enum DependencyFileUsage Defines the purpose of a DependencyFile. Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [JsonConverter(typeof(EnumConverter), new object[] { DependencyFileUsage.None })] public enum DependencyFileUsage Fields Name Description Extraction Used during the extraction phase. Final Used or required for correct operation of the final (localized) file. Generation Used during the generate phase. None Unknown or not specified."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Document.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Document.html",
    "title": "Class Document",
    "summary": "Class Document The BCM root element. Inheritance object ExtensionDataContainer MetadataContainer Document Implements IEquatable<MetadataContainer> ICloneable<Document> IEquatable<Document> Inherited Members MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class Document : MetadataContainer, IEquatable<MetadataContainer>, ICloneable<Document>, IEquatable<Document> Constructors Document() Public constructor. Declaration public Document() Properties Files A collection of all the Files in this document. Declaration [DataMember(Name = \"files\")] public FileCollection Files { get; set; } Property Value Type Description FileCollection Id The document ID. Uniquely identifies a BCM document. Declaration [DataMember(Name = \"id\")] public string Id { get; set; } Property Value Type Description string IdGenerator Used for managing sequential numeric IDs of different elements. Declaration public IdGenerator IdGenerator { get; } Property Value Type Description IdGenerator ModelVersion The semantic version of the BCM used for creating this document. Declaration [DataMember(Name = \"modelVersion\")] public string ModelVersion { get; } Property Value Type Description string Name The BCM document name. Declaration [DataMember(Name = \"name\")] public string Name { get; set; } Property Value Type Description string SourceLanguageCode The source language code. Declaration [DataMember(Name = \"sourceLanguageCode\")] public string SourceLanguageCode { get; set; } Property Value Type Description string Examples \"en-GB\" SourceLanguageName Gets or sets the source language display name. Declaration [Obsolete(\"Will be removed in a future version. Use the LanguageRegistry instead for retrieving language information.\")] [DataMember(Name = \"sourceLanguageName\", EmitDefaultValue = false)] public string SourceLanguageName { get; set; } Property Value Type Description string The name of the source language. TargetLanguageCode The source language code. Declaration [DataMember(Name = \"targetLanguageCode\")] public string TargetLanguageCode { get; set; } Property Value Type Description string Examples \"de-DE\" TargetLanguageName Gets or sets the target language display name. Declaration [Obsolete(\"Will be removed in a future version. Use the LanguageRegistry instead for retrieving language information.\")] [DataMember(Name = \"targetLanguageName\", EmitDefaultValue = false)] public string TargetLanguageName { get; set; } Property Value Type Description string The name of the target language. Methods Clone() Deep-clones a Document. Declaration public Document Clone() Returns Type Description Document DeserializeFromString(string) Declaration public static Document DeserializeFromString(string json) Parameters Type Name Description string json Returns Type Description Document Equals(Document) Performs a deep-equals comparison. Declaration public bool Equals(Document other) Parameters Type Name Description Document other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MetadataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MetadataContainer.GetHashCode() Implements IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Exceptions.InvalidBcmDocumentException.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Exceptions.InvalidBcmDocumentException.html",
    "title": "Class InvalidBcmDocumentException",
    "summary": "Class InvalidBcmDocumentException Inheritance object Exception InvalidBcmDocumentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.Message Exception.Data Exception.InnerException Exception.TargetSite Exception.StackTrace Exception.HelpLink Exception.Source Exception.HResult Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Exceptions Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class InvalidBcmDocumentException : Exception, ISerializable Constructors InvalidBcmDocumentException(SerializationInfo, StreamingContext) Declaration protected InvalidBcmDocumentException(SerializationInfo info, StreamingContext context) Parameters Type Name Description SerializationInfo info StreamingContext context InvalidBcmDocumentException(string) Declaration public InvalidBcmDocumentException(string message) Parameters Type Name Description string message Implements ISerializable"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Exceptions.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Exceptions.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Exceptions",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.Exceptions Classes InvalidBcmDocumentException"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.ExtensionDataContainer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.ExtensionDataContainer.html",
    "title": "Class ExtensionDataContainer",
    "summary": "Class ExtensionDataContainer A Newtonsoft.Json.JsonExtensionDataAttribute object used as base for elements that need to preserve unrecognized data on deserialization. Inheritance object ExtensionDataContainer AlignmentData LiftSpan SpanPairNode LocalizableSubContent MetadataContainer SegmentPair Term TermOrigin TermTranslation SegmentPosition SegmentRange Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class ExtensionDataContainer Constructors ExtensionDataContainer() Declaration protected ExtensionDataContainer() Properties ExtensionData Preserves any unrecognized data upon deserialization from JSON. This data is serialized in its original format. Declaration [JsonExtensionData] public IDictionary<string, JToken> ExtensionData { get; set; } Property Value Type Description IDictionary<string, JToken>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.FeedbackContainer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.FeedbackContainer.html",
    "title": "Class FeedbackContainer",
    "summary": "Class FeedbackContainer Holds feedback information created during the translation and review process. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer FeedbackContainer Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, bool>) MarkupDataContainer.GetAllChildren<T>(Func<T, bool>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(int, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.MoveToContainer(MarkupDataContainer, int, int, int) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.this[int] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class FeedbackContainer : MarkupDataContainer, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData> Remarks Used by the Translation Quality Assessment process(TQA). Constructors FeedbackContainer() Initializes a new instance of the FeedbackContainer class. Declaration public FeedbackContainer() FeedbackContainer(FeedbackType) Initializes a new instance of the FeedbackContainer class. Declaration public FeedbackContainer(FeedbackType feedbackType) Parameters Type Name Description FeedbackType feedbackType Type of the feedback. Properties Author Gets or sets the author. Declaration [DataMember(Name = \"author\")] public string Author { get; set; } Property Value Type Description string The author. Category Gets or sets the custom category of this feedback. Declaration [DataMember(Name = \"category\")] public string Category { get; set; } Property Value Type Description string The category. Comment Gets or sets the comment on this review feedback. Declaration [DataMember(Name = \"comment\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public string Comment { get; set; } Property Value Type Description string The comment. CommentDefinitionId OBSOLETE Gets or sets the comment definition identifier. Declaration [Obsolete(\"SHOULD be removed in next MAJOR release\")] [DataMember(Name = \"commentDefinitionId\")] public int CommentDefinitionId { get; set; } Property Value Type Description int The comment definition identifier. DocumentCategory Gets or sets the document category. Declaration [DataMember(Name = \"documentCategory\")] public string DocumentCategory { get; set; } Property Value Type Description string The document category. FeedbackType Gets or sets the type of the feedback. Declaration [DataMember(Name = \"feedbackType\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public FeedbackType FeedbackType { get; set; } Property Value Type Description FeedbackType The type of the feedback. Origin Gets or sets the feedback origin. Example values: \"auto-filled\", \"auto-categorized\", \"interactive\" Declaration [DataMember(Name = \"origin\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public string Origin { get; set; } Property Value Type Description string ReplacementId Gets or sets the replacement identifier. Declaration [DataMember(Name = \"replacementId\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public string ReplacementId { get; set; } Property Value Type Description string The replacement identifier. Remarks Id which is used for identifying TQA replacements (replacing an existing piece of markup with new markup). Both original and new markup (adjacent FeedbackDeleted and FeedbackAdded markers) will contain an identical ReplacementId GUID in their properties indicating it is a replacement. Severity Gets or sets the custom severity. Declaration [DataMember(Name = \"severity\")] public string Severity { get; set; } Property Value Type Description string The custom severity. Timestamp Gets or sets the creation date. Declaration [DataMember(Name = \"timestamp\")] public DateTime? Timestamp { get; set; } Property Value Type Description DateTime? The creation date. Type Gets or sets the custom feedback type. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string The feedback type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public FeedbackContainer Clone() Returns Type Description FeedbackContainer A deep clone of this instance. Equals(MarkupData) Performs a deep equals comparison. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other The other MarkupData used for comparison.. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Overrides MarkupDataContainer.Equals(MarkupData) Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MarkupDataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MarkupDataContainer.GetHashCode() UniqueClone() Clones this instance with a new unique ID. Declaration public FeedbackContainer UniqueClone() Returns Type Description FeedbackContainer A deep clone with a new unique ID. Implements IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.FeedbackType.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.FeedbackType.html",
    "title": "Enum FeedbackType",
    "summary": "Enum FeedbackType Types of feedback changes created during the translation/review process. Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [JsonConverter(typeof(EnumConverter))] public enum FeedbackType Fields Name Description Added Added content. Comment A feedback comment was added. Deleted Deleted content."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.File.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.File.html",
    "title": "Class File",
    "summary": "Class File BCM data extracted from a native file. Inheritance object ExtensionDataContainer MetadataContainer File Implements IEquatable<MetadataContainer> ICloneable<File> IEquatable<File> Inherited Members MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class File : MetadataContainer, IEquatable<MetadataContainer>, ICloneable<File>, IEquatable<File> Constructors File() Public constructor. Declaration public File() File(string) Declaration public File(string Id) Parameters Type Name Description string Id Properties CommentDefinitionIds IDs of CommentDefinition used as file-level comments. Declaration [DataMember(Name = \"commentDefinitionIds\", EmitDefaultValue = false)] public List<int> CommentDefinitionIds { get; set; } Property Value Type Description List<int> DependencyFiles Dependency files used for converting to and from native format. Declaration [DataMember(Name = \"dependencyFiles\", EmitDefaultValue = false)] public List<DependencyFile> DependencyFiles { get; set; } Property Value Type Description List<DependencyFile> FileTypeDefinitionId The ID of the filter used for converting the file from native format. Declaration [DataMember(Name = \"fileTypeDefinitionId\", EmitDefaultValue = false)] public string FileTypeDefinitionId { get; set; } Property Value Type Description string Id Gets or sets the identifier. Declaration [JsonProperty(PropertyName = \"id\", Order = -2147483648)] public string Id { get; set; } Property Value Type Description string The identifier. IdGenerator Gets or sets the IdGenerator used for generating sequential IDs./> Declaration public IdGenerator IdGenerator { get; set; } Property Value Type Description IdGenerator The identifier generator. OriginalEncoding Gets or sets the original encoding. Declaration [DataMember(Name = \"originalEncoding\", EmitDefaultValue = false)] public string OriginalEncoding { get; set; } Property Value Type Description string The original encoding. OriginalFileName The name of the native file from which this File was constructed. Declaration [DataMember(Name = \"originalFileName\", EmitDefaultValue = false)] public string OriginalFileName { get; set; } Property Value Type Description string ParagraphUnits A collection of all the ParagraphUnit elements in this File. Declaration [DataMember(Name = \"paragraphUnits\", EmitDefaultValue = false)] public ParagraphUnitCollection ParagraphUnits { get; set; } Property Value Type Description ParagraphUnitCollection Parent The parent Document of this File. Declaration public Document Parent { get; set; } Property Value Type Description Document PreferredTargetEncoding Gets or sets the preferred target encoding. Declaration [DataMember(Name = \"preferredTargetEncoding\", EmitDefaultValue = false)] public string PreferredTargetEncoding { get; set; } Property Value Type Description string The preferred target encoding. Skeleton The FileSkeleton holding all the structure element data referenced in this File. Declaration [DataMember(Name = \"skeleton\", EmitDefaultValue = false)] public FileSkeleton Skeleton { get; set; } Property Value Type Description FileSkeleton Methods Clone() Clones this instance. Declaration public File Clone() Returns Type Description File A deep clone of this instance. Equals(File) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(File other) Parameters Type Name Description File other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MetadataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MetadataContainer.GetHashCode() ShouldSerializeCommentDefinitionIds() Used by JSON.NET serializer. Declaration public bool ShouldSerializeCommentDefinitionIds() Returns Type Description bool True if the CommentDefinitionIds property should be serialized. ShouldSerializeDependencyFiles() Used by JSON.NET serializer. Declaration public bool ShouldSerializeDependencyFiles() Returns Type Description bool True if the DependencyFiles property should be serialized. Implements IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.FileMetaDataKeys.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.FileMetaDataKeys.html",
    "title": "Class FileMetaDataKeys",
    "summary": "Class FileMetaDataKeys Constants used for File metadata. Inheritance object FileMetaDataKeys Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class FileMetaDataKeys Fields ContextFileLocation File level metadata containing the context file location. Declaration public const string ContextFileLocation = \"SDL:ContextFileLocation\" Field Value Type Description string"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Fragment.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Fragment.html",
    "title": "Class Fragment",
    "summary": "Class Fragment Class representing an independent fragment (slice) of a BCM Document. Inheritance object ExtensionDataContainer MetadataContainer Fragment Implements IEquatable<MetadataContainer> IEquatable<Fragment> ICloneable<Fragment> Inherited Members MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class Fragment : MetadataContainer, IEquatable<MetadataContainer>, IEquatable<Fragment>, ICloneable<Fragment> Constructors Fragment() Initializes a new instance of the Fragment class. Declaration public Fragment() Properties CommentDefinitionIds Gets or sets the list of CommentDefinition IDs associated with this fragment. Declaration [DataMember(Name = \"commentDefinitionIds\", EmitDefaultValue = false)] public List<int> CommentDefinitionIds { get; set; } Property Value Type Description List<int> The list of CommentDefinition IDs associated with this fragment. ContextList Gets or sets the list of Context IDs associated with this fragment. Declaration [DataMember(Name = \"contextList\", EmitDefaultValue = false)] public IList<int> ContextList { get; set; } Property Value Type Description IList<int> The list of Context IDs associated with this fragment.. DocumentId Gets or sets the document identifier. Declaration [DataMember(Name = \"documentId\", EmitDefaultValue = false)] public string DocumentId { get; set; } Property Value Type Description string The document identifier which uniquely identifies this BCM Fragment. Index The index in the source Document from where this fragment was extracted. Declaration [DataMember(Name = \"index\", EmitDefaultValue = false)] public int? Index { get; set; } Property Value Type Description int? The index in the source Document from where this fragment was extracted. Skeleton Gets or sets the File skeleton. Declaration [DataMember(Name = \"skeleton\", EmitDefaultValue = false)] public FileSkeleton Skeleton { get; set; } Property Value Type Description FileSkeleton The file skeleton. SourceContent Gets or sets the source content of the BCM fragment. Declaration [DataMember(Name = \"sourceContent\", EmitDefaultValue = false)] public MarkupData SourceContent { get; set; } Property Value Type Description MarkupData The source content of the Fragment. SourceLanguageCode Gets or sets the source language code. Declaration [DataMember(Name = \"sourceLanguageCode\", EmitDefaultValue = false)] public string SourceLanguageCode { get; set; } Property Value Type Description string The source language code. StructureContextId Gets or sets the structure Context associated with this fragment. Declaration [DataMember(Name = \"structureContextId\", EmitDefaultValue = false)] public int StructureContextId { get; set; } Property Value Type Description int The structure Context associated with this fragment. TargetContent Gets or sets the target content of the BCM fragment. Declaration [DataMember(Name = \"targetContent\", EmitDefaultValue = false)] public MarkupData TargetContent { get; set; } Property Value Type Description MarkupData The target content of the BCM fragment. TargetLanguageCode Gets or sets the target language code. Declaration [DataMember(Name = \"targetLanguageCode\", EmitDefaultValue = false)] public string TargetLanguageCode { get; set; } Property Value Type Description string The target language code. Methods Clone() Clones this instance. Declaration public Fragment Clone() Returns Type Description Fragment A deep clone of this instance. Equals(Fragment) Performs a deep-equals comparison. Declaration public bool Equals(Fragment other) Parameters Type Name Description Fragment other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MetadataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MetadataContainer.GetHashCode() ShouldSerializeCommentDefinitionIds() Used by JSON.NET serialization. Declaration public bool ShouldSerializeCommentDefinitionIds() Returns Type Description bool True if the CommentDefinitionIds should be serialized; otherwise False ShouldSerializeContextList() Used by JSON.NET serialization. Declaration public bool ShouldSerializeContextList() Returns Type Description bool True if the ContextList should be serialized; otherwise False ShouldSerializeSkeleton() Used by JSON.NET serialization. Declaration public bool ShouldSerializeSkeleton() Returns Type Description bool True if the Skeleton should be serialized; otherwise False ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Implements IEquatable<T> IEquatable<T> ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.ISkeletonItemReference-1.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.ISkeletonItemReference-1.html",
    "title": "Interface ISkeletonItemReference<T>",
    "summary": "Interface ISkeletonItemReference<T> Marks a class as having its definition in the FileSkeleton. Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public interface ISkeletonItemReference<out T> where T : SkeletonItem Type Parameters Name Description T Type parameter. Should be an item from the FileSkeleton. Properties Definition Gets the definition of this item from the FileSkeleton. Declaration T Definition { get; } Property Value Type Description T The definition of this item from the FileSkeleton."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.LocalizableSubContent.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.LocalizableSubContent.html",
    "title": "Class LocalizableSubContent",
    "summary": "Class LocalizableSubContent Subcontent of a particular BCM content element. Inheritance object ExtensionDataContainer LocalizableSubContent Implements ICloneable<LocalizableSubContent> Inherited Members ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class LocalizableSubContent : ExtensionDataContainer, ICloneable<LocalizableSubContent> Constructors LocalizableSubContent() Declaration public LocalizableSubContent() Properties Length Gets or sets the content length. Declaration [DataMember(Name = \"length\")] public int Length { get; set; } Property Value Type Description int The content length. ParagraphUnitId Gets or sets the ParagraphUnit Id holding the content marked by this LocalizableSubContent reference. Declaration [DataMember(Name = \"paragraphUnitId\")] public string ParagraphUnitId { get; set; } Property Value Type Description string The ParagraphUnit Id holding the content marked by this LocalizableSubContent reference. SourceTagContentOffset Gets or sets the offset in the source tag from which the content was extracted. Declaration [DataMember(Name = \"sourceTagContentOffset\")] public int SourceTagContentOffset { get; set; } Property Value Type Description int The offset in the source tag from which the content was extracted. Methods Clone() Clones this instance. Declaration public LocalizableSubContent Clone() Returns Type Description LocalizableSubContent A deep clone of this instance. Equals(LocalizableSubContent) Performs a deep-equals comparison. Declaration protected bool Equals(LocalizableSubContent other) Parameters Type Name Description LocalizableSubContent other The other item used for comparison. Returns Type Description bool True if the items are deeply equal; False otherwise. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides object.GetHashCode() Implements ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.LockedContentContainer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.LockedContentContainer.html",
    "title": "Class LockedContentContainer",
    "summary": "Class LockedContentContainer Marks content that is locked for editing. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer LockedContentContainer Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, bool>) MarkupDataContainer.GetAllChildren<T>(Func<T, bool>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(int, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.Equals(MarkupData) MarkupDataContainer.MoveToContainer(MarkupDataContainer, int, int, int) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.Equals(object) MarkupDataContainer.GetHashCode() MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.this[int] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class LockedContentContainer : MarkupDataContainer, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData> Constructors LockedContentContainer() Declaration public LockedContentContainer() Properties Type Gets the type of MarkupData. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public LockedContentContainer Clone() Returns Type Description LockedContentContainer A deep clone of this instance. UniqueClone() Clones this instance, setting a new unique Id. Declaration public LockedContentContainer UniqueClone() Returns Type Description LockedContentContainer A deep clone of this instance, with a new unique Id. Implements IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.MarkupData.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.MarkupData.html",
    "title": "Class MarkupData",
    "summary": "Class MarkupData Abstract entity representing an item that can be included inside a MarkupDataContainer. Examples: TextMarkup, PlaceholderTag, TagPair. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer PlaceholderTag StructureTag TextMarkup UnknownMarkupData Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> Inherited Members MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] [JsonConverter(typeof(MarkupDataCreator))] public abstract class MarkupData : MetadataContainer, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData> Remarks Inheritors of MarkupData should not implement themselves IEquatable<T>, but should override MarkupData equality. Constructors MarkupData() Initializes a new instance of the MarkupData class. Declaration protected MarkupData() MarkupData(string) Initializes a new instance of the MarkupData class. Declaration protected MarkupData(string id) Parameters Type Name Description string id The identifier. Properties Ancestors This item's MarkupDataContainer ancestors, in ascending order. Declaration public IEnumerable<MarkupDataContainer> Ancestors { get; } Property Value Type Description IEnumerable<MarkupDataContainer> Id Markup data unique id (GUID). Declaration [JsonProperty(PropertyName = \"id\", DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, Order = -2147483648)] public string Id { get; set; } Property Value Type Description string IndexInParent The index of this item in the parent MarkupDataContainer. -1 if it doesn't have a parent. Declaration public int IndexInParent { get; } Property Value Type Description int IsContainer True if this MarkupData is a container. Otherwise false. Declaration public bool IsContainer { get; } Property Value Type Description bool Parent The MarkupDataContainer parent container. Declaration public MarkupDataContainer Parent { get; set; } Property Value Type Description MarkupDataContainer ParentFragment The Fragment containing this item. Declaration public Fragment ParentFragment { get; } Property Value Type Description Fragment ParentParagraph The Paragraph containing this item. Declaration public Paragraph ParentParagraph { get; } Property Value Type Description Paragraph ParentParagraphUnit The ParagraphUnit containing this item. Declaration public virtual ParagraphUnit ParentParagraphUnit { get; set; } Property Value Type Description ParagraphUnit ParentSegment The Segment containing this item. Null if the item isn't inside of a Segment. Declaration public Segment ParentSegment { get; } Property Value Type Description Segment Type Gets or sets the type. Should be implement in derived classes to uniquely identify the type of MarkupData on deserialization. Declaration [JsonProperty(\"type\")] protected abstract string Type { get; set; } Property Value Type Description string The type. Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public abstract void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Clone() Clones the item to a new MarkupData. Declaration public virtual MarkupData Clone() Returns Type Description MarkupData Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MetadataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MetadataContainer.GetHashCode() UniqueClone() Creates clone of the current object, with a new unique Id. Declaration public virtual MarkupData UniqueClone() Returns Type Description MarkupData A clone with a new unique Id. Implements IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.MarkupDataContainer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.MarkupDataContainer.html",
    "title": "Class MarkupDataContainer",
    "summary": "Class MarkupDataContainer A MarkupData element that can hold other MarkupData elements. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer AnnotationContainer FeedbackContainer LockedContentContainer Paragraph RevisionContainer Segment TagPair Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> Inherited Members MarkupData.AcceptVisitor(BcmVisitor) MarkupData.Id MarkupData.Type MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public abstract class MarkupDataContainer : MarkupData, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData> Constructors MarkupDataContainer() Initializes a new instance of the MarkupDataContainer class. Declaration protected MarkupDataContainer() MarkupDataContainer(string) Initializes a new instance of the MarkupDataContainer class. Declaration protected MarkupDataContainer(string id) Parameters Type Name Description string id The identifier. Fields AutoClonedTagPairKey Metadata key, marking thi instance as cloned (duplicated) during conversion from native formats. Declaration public const string AutoClonedTagPairKey = \"SDL:AutoCloned\" Field Value Type Description string Properties AllSubItems All the MarkupData items in the subtree, in depth-first order. Declaration public IEnumerable<MarkupData> AllSubItems { get; } Property Value Type Description IEnumerable<MarkupData> Children The container's direct children. Declaration [DataMember(Name = \"children\", Order = 2147483647)] public IReadOnlyCollection<MarkupData> Children { get; } Property Value Type Description IReadOnlyCollection<MarkupData> Count Gets the number of children of this container. Declaration public int Count { get; } Property Value Type Description int The number of children of this container. this[int] Gets or sets the MarkupData at the specified index. Declaration public MarkupData this[int index] { get; set; } Parameters Type Name Description int index The index. Property Value Type Description MarkupData The MarkupData. Methods Add(MarkupData) Adds a new MarkupData to the container. Declaration public MarkupDataContainer Add(MarkupData markupData) Parameters Type Name Description MarkupData markupData The item to be added. Returns Type Description MarkupDataContainer The container after the change. Add(IEnumerable<MarkupData>) Adds a new MarkupData to the container. Declaration public MarkupDataContainer Add(IEnumerable<MarkupData> range) Parameters Type Name Description IEnumerable<MarkupData> range The range of MarkupData items to be added. Returns Type Description MarkupDataContainer The container after the change. Clear() Removes all the items from this container. Sets the previous children Parent property to null. Declaration public void Clear() Clone() Clones the item to a new MarkupData. Declaration public override MarkupData Clone() Returns Type Description MarkupData A deep clone of this instance. Overrides MarkupData.Clone() CloneWithoutChildren() Creates a clone of this instance, without any children elements. Declaration public virtual MarkupDataContainer CloneWithoutChildren() Returns Type Description MarkupDataContainer A clone of this instance, without any children elements. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Overrides MarkupData.Equals(MarkupData) Equals(MarkupDataContainer) Equalses the specified other. Declaration public virtual bool Equals(MarkupDataContainer other) Parameters Type Name Description MarkupDataContainer other The other. Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MarkupData.Equals(object) GetAllChildren(Func<MarkupData, bool>) Finds all the MarkupData items in the subtree which satisfy a specific condition, in depth-first order. Declaration public IEnumerable<MarkupData> GetAllChildren(Func<MarkupData, bool> condition) Parameters Type Name Description Func<MarkupData, bool> condition Returns Type Description IEnumerable<MarkupData> GetAllChildren<T>(Func<T, bool>) Finds all the MarkupData items in the subtree which satisfy a specific condition, in depth-first order. Declaration public IEnumerable<T> GetAllChildren<T>(Func<T, bool> condition) where T : MarkupData Parameters Type Name Description Func<T, bool> condition Returns Type Description IEnumerable<T> Type Parameters Name Description T GetEnumerator() Gets an IEnumerator<T> for the container's children. Declaration public IEnumerator<MarkupData> GetEnumerator() Returns Type Description IEnumerator<MarkupData> An IEnumerator<T> instance enumerating the container's children. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MarkupData.GetHashCode() Insert(int, MarkupData) Inserts a new MarkupData into the container. Declaration public MarkupDataContainer Insert(int index, MarkupData markupData) Parameters Type Name Description int index The position where the item should be inserted. MarkupData markupData The item to be inserted. Returns Type Description MarkupDataContainer The container after the change. MoveToContainer(MarkupDataContainer, int, int, int) Moves the children of this container to another MarkupDataContainer instance. Declaration public void MoveToContainer(MarkupDataContainer target, int sourceIndex, int targetIndex, int count) Parameters Type Name Description MarkupDataContainer target The target MarkupDataContainer. int sourceIndex Index in the source container, from where to start moving elements. int targetIndex Index in the target container, where the elements should be inserted. int count Number of elements to be moved. OnDeserialized() Declaration protected virtual void OnDeserialized() Remove(MarkupData) Removes a MarkupData item from the container. Declaration public MarkupDataContainer Remove(MarkupData markupData) Parameters Type Name Description MarkupData markupData The item to be removed. Returns Type Description MarkupDataContainer The container after the changes. ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() UniqueClone() Creates clone of the current object, with a new unique Id. Declaration public override MarkupData UniqueClone() Returns Type Description MarkupData A clone with a new unique Id. Overrides MarkupData.UniqueClone() Implements IEquatable<T> ICloneable<T> IEquatable<T> See Also MarkupData"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.MetadataContainer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.MetadataContainer.html",
    "title": "Class MetadataContainer",
    "summary": "Class MetadataContainer An object that contains metadata in the form of a DictionaryEx<TKey, TValue>. Inheritance object ExtensionDataContainer MetadataContainer DependencyFile Document File Fragment MarkupData ParagraphUnit FileSkeleton SkeletonItem TranslationOrigin Implements IEquatable<MetadataContainer> Inherited Members ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public abstract class MetadataContainer : ExtensionDataContainer, IEquatable<MetadataContainer> Constructors MetadataContainer() Declaration protected MetadataContainer() Properties Metadata Gets or sets the metadata. Declaration public DictionaryEx<string, string> Metadata { get; set; } Property Value Type Description DictionaryEx<string, string> The metadata. Methods Equals(MetadataContainer) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MetadataContainer other) Parameters Type Name Description MetadataContainer other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides object.GetHashCode() GetMetadata(string) Gets the metadata. Declaration public string GetMetadata(string key) Parameters Type Name Description string key The metadata key. Returns Type Description string The metadata value; or null if the key was not found. SetMetadata(string, string) Sets a metadata value. Declaration public void SetMetadata(string key, string value) Parameters Type Name Description string key The key. string value The value. ShouldSerialize_metadata() Needed for JSON serialization. Declaration public bool ShouldSerialize_metadata() Returns Type Description bool True if this instance should be serialized; otherwise False. Implements IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Paragraph.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Paragraph.html",
    "title": "Class Paragraph",
    "summary": "Class Paragraph A MarkupDataContainer containing the source or target content of a ParagraphUnit. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer Paragraph Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, bool>) MarkupDataContainer.GetAllChildren<T>(Func<T, bool>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(int, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.Equals(MarkupData) MarkupDataContainer.MoveToContainer(MarkupDataContainer, int, int, int) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.Equals(object) MarkupDataContainer.GetHashCode() MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.this[int] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class Paragraph : MarkupDataContainer, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData> Constructors Paragraph() Initializes a new instance of the Paragraph class. Declaration public Paragraph() Paragraph(Segment) Initializes a new instance of the Paragraph class with a particular child Segment. Declaration public Paragraph(Segment segment) Parameters Type Name Description Segment segment The Segment to be added as a child to this instance. Paragraph(string) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string id) Parameters Type Name Description string id The identifier. Properties ParentParagraphUnit The ParagraphUnit containing this item. Declaration public override ParagraphUnit ParentParagraphUnit { get; set; } Property Value Type Description ParagraphUnit Overrides MarkupData.ParentParagraphUnit Type Gets the type of MarkupData. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public Paragraph Clone() Returns Type Description Paragraph A deep clone of this instance. UniqueClone() Clones this instance, assigning a new unique Id. Declaration public Paragraph UniqueClone() Returns Type Description Paragraph A deep clone of this instance, with a new unique Id. Implements IEquatable<T> ICloneable<T> IEquatable<T> See Also MarkupDataContainer"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.ParagraphUnit.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.ParagraphUnit.html",
    "title": "Class ParagraphUnit",
    "summary": "Class ParagraphUnit The main element of translatable content. Contains a source and target Paragraph element. Inheritance object ExtensionDataContainer MetadataContainer ParagraphUnit Implements IEquatable<MetadataContainer> ICloneable<ParagraphUnit> IEquatable<ParagraphUnit> Inherited Members MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class ParagraphUnit : MetadataContainer, IEquatable<MetadataContainer>, ICloneable<ParagraphUnit>, IEquatable<ParagraphUnit> Constructors ParagraphUnit() Initializes a new instance of the ParagraphUnit class. Declaration public ParagraphUnit() Properties CommentDefinitionIds Gets or sets the list of CommentDefinition IDs. Declaration [DataMember(Name = \"commentDefinitionIds\", EmitDefaultValue = false)] public List<int> CommentDefinitionIds { get; set; } Property Value Type Description List<int> The list of CommentDefinition IDs. Remarks This holds any ParagraphUnit level comments. ContextList Gets or sets the list of Context IDs associated with this instance. Declaration [DataMember(Name = \"contextList\", EmitDefaultValue = false)] public IList<int> ContextList { get; set; } Property Value Type Description IList<int> The list of Context IDs associated with this instance. Id Gets or sets the identifier. Declaration [DataMember(Name = \"id\")] public string Id { get; set; } Property Value Type Description string The identifier. Index Gets or sets the index of this instance in the ParentFile. Declaration [DataMember(Name = \"index\")] [JsonConverter(typeof(FloatToIntConverter))] public int Index { get; set; } Property Value Type Description int The index of this instance in the ParentFile. IsLocked Gets or sets a value indicating whether this instance is locked. Declaration [DataMember(Name = \"isLocked\", EmitDefaultValue = false)] public bool IsLocked { get; set; } Property Value Type Description bool true if this instance is locked; otherwise, false. IsStructure Gets or sets a value indicating whether this instance is a structure ParagraphUnit. Declaration [DataMember(Name = \"isStructure\", EmitDefaultValue = false)] public bool IsStructure { get; set; } Property Value Type Description bool true if this instance is a structure ParagraphUnit; otherwise, false. Remarks A structure ParagraphUnit is not usually used as translatable content. ParentFile Gets or sets the parent File. Declaration public File ParentFile { get; set; } Property Value Type Description File The parent File. ParentFileId Gets or sets the parent File identifier. Declaration [DataMember(Name = \"parentFileId\")] public string ParentFileId { get; set; } Property Value Type Description string The parent File identifier. SegmentPairs Gets all the source and target Segment in this instance, paired as SegmentPair elements. Declaration public SegmentPairCollection SegmentPairs { get; } Property Value Type Description SegmentPairCollection The segment pairs. Source Gets or sets the source Paragraph. Declaration [DataMember(Name = \"source\")] public Paragraph Source { get; set; } Property Value Type Description Paragraph The source Paragraph. StructureContextId Gets or sets the id of the structure Context. Declaration [DataMember(Name = \"structureContextId\", EmitDefaultValue = false)] public int StructureContextId { get; set; } Property Value Type Description int The id of the structure Context. Target Gets or sets the target Paragraph. Declaration [DataMember(Name = \"target\")] public Paragraph Target { get; set; } Property Value Type Description Paragraph The target Paragraph. Methods Clone() Clones this instance. Declaration public ParagraphUnit Clone() Returns Type Description ParagraphUnit A deep clone of this instance. Equals(ParagraphUnit) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ParagraphUnit other) Parameters Type Name Description ParagraphUnit other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MetadataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MetadataContainer.GetHashCode() ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Implements IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.ParagraphUnitMetadataKeys.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.ParagraphUnitMetadataKeys.html",
    "title": "Class ParagraphUnitMetadataKeys",
    "summary": "Class ParagraphUnitMetadataKeys Constants with ParagraphUnit related metadata keys. Inheritance object ParagraphUnitMetadataKeys Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class ParagraphUnitMetadataKeys Fields FrameworkOriginalParagraphUnitId The original paragraph unit identifier used by the SDL Filter Framework. Declaration public const string FrameworkOriginalParagraphUnitId = \"frameworkOriginalParagraphUnitId\" Field Value Type Description string"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.AbstractPartialBcmSerializer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.AbstractPartialBcmSerializer.html",
    "title": "Class AbstractPartialBcmSerializer",
    "summary": "Class AbstractPartialBcmSerializer Common superclass for the two types of serializer Inheritance object AbstractPartialBcmSerializer InMemoryBcmSerializer TempFileBasedBcmSerializer Implements IPartialBcmSerializer IDisposable Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.PartialSerialization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class AbstractPartialBcmSerializer : IPartialBcmSerializer, IDisposable Constructors AbstractPartialBcmSerializer() Declaration protected AbstractPartialBcmSerializer() Methods AddFile(File) Adds a file, based on the attributes and skeleton in the parameter. Array of paragraph units must be empty. Declaration public abstract void AddFile(File file) Parameters Type Name Description File file DeleteFile(int) Deletes the file from the document. Declaration public abstract void DeleteFile(int index) Parameters Type Name Description int index DeleteFile(string) Deletes the file from the document. Declaration public abstract void DeleteFile(string id) Parameters Type Name Description string id Dispose() Declaration public void Dispose() Dispose(bool) Dispose function to override in derived classes Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description bool disposing GetDocumentWithoutFiles() Gets document attributes and metadata without the files list. Updates made to the object returned will be reflected automatically in the result in case the updated bcm is requested. Declaration public abstract Document GetDocumentWithoutFiles() Returns Type Description Document GetFileCount() Number of files in this document Declaration public abstract int GetFileCount() Returns Type Description int GetFileIds() All file ids in this document Declaration public abstract IReadOnlyList<string> GetFileIds() Returns Type Description IReadOnlyList<string> GetFileSerializer(string) Gets serialization wrapper for specific file Declaration public abstract IPartialFileSerializer GetFileSerializer(string fileId) Parameters Type Name Description string fileId Returns Type Description IPartialFileSerializer InsertFile(int, File) Inserts a file to a specific position, based on the attributes and skeleton in the parameter. Array of paragraph units must be empty. Declaration public abstract void InsertFile(int index, File file) Parameters Type Name Description int index File file SaveAsJson(Stream) Saves bcm document as single json object Declaration public void SaveAsJson(Stream stream) Parameters Type Name Description Stream stream SaveAsJson(TextWriter) Saves bcm document as single json object to TextWriter Declaration public abstract void SaveAsJson(TextWriter textWriter) Parameters Type Name Description TextWriter textWriter SaveAsJson(string) Saves bcm document as single json object Declaration public void SaveAsJson(string filePath) Parameters Type Name Description string filePath Implements IPartialBcmSerializer IDisposable"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.IPartialBcmSerializer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.IPartialBcmSerializer.html",
    "title": "Interface IPartialBcmSerializer",
    "summary": "Interface IPartialBcmSerializer Bcm serialization interface that allows for not holding the whole bcm document in memory Inherited Members IDisposable.Dispose() Namespace: Sdl.Core.Bcm.BcmModel.PartialSerialization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public interface IPartialBcmSerializer : IDisposable Methods AddFile(File) Adds a file, based on the attributes and skeleton in the parameter. Array of paragraph units must be empty. Declaration void AddFile(File file) Parameters Type Name Description File file DeleteFile(int) Deletes the file from the document. Declaration void DeleteFile(int index) Parameters Type Name Description int index DeleteFile(string) Deletes the file from the document. Declaration void DeleteFile(string id) Parameters Type Name Description string id GetDocumentWithoutFiles() Gets document attributes and metadata without the files list. Updates made to the object returned will be reflected automatically in the result in case the updated bcm is requested. Declaration Document GetDocumentWithoutFiles() Returns Type Description Document GetFileCount() Number of files in this document Declaration int GetFileCount() Returns Type Description int GetFileIds() All file ids in this document Declaration IReadOnlyList<string> GetFileIds() Returns Type Description IReadOnlyList<string> GetFileSerializer(string) Gets serialization wrapper for specific file Declaration IPartialFileSerializer GetFileSerializer(string fileId) Parameters Type Name Description string fileId Returns Type Description IPartialFileSerializer InsertFile(int, File) Inserts a file to a specific position, based on the attributes and skeleton in the parameter. Array of paragraph units must be empty. Declaration void InsertFile(int index, File file) Parameters Type Name Description int index File file SaveAsJson(Stream) Saves bcm document as single json object Declaration void SaveAsJson(Stream stream) Parameters Type Name Description Stream stream SaveAsJson(TextWriter) Saves bcm document as single json object to TextWriter Declaration void SaveAsJson(TextWriter textWriter) Parameters Type Name Description TextWriter textWriter SaveAsJson(string) Saves bcm document as single json object Declaration void SaveAsJson(string filePath) Parameters Type Name Description string filePath"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.IPartialFileSerializer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.IPartialFileSerializer.html",
    "title": "Interface IPartialFileSerializer",
    "summary": "Interface IPartialFileSerializer Bcm file serialization interface that allows for not holding the full file in memory Inherited Members IDisposable.Dispose() Namespace: Sdl.Core.Bcm.BcmModel.PartialSerialization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public interface IPartialFileSerializer : IDisposable Methods AddParagraphUnit(ParagraphUnit) Adds a paragraph unit at the end of the paragraph units list in the file Declaration void AddParagraphUnit(ParagraphUnit paragraphUnit) Parameters Type Name Description ParagraphUnit paragraphUnit GetAllParagraphUnits() Returns a sequence of paragraph units from this file, deserialized one by one Declaration IEnumerable<ParagraphUnit> GetAllParagraphUnits() Returns Type Description IEnumerable<ParagraphUnit> GetFileWithoutParagraphUnits() Gets file attributes and skeleton without any paragraph units in it. Declaration File GetFileWithoutParagraphUnits() Returns Type Description File GetParagraphUnitCount() Returns the number of paragraph units in this file Declaration int GetParagraphUnitCount() Returns Type Description int GetParagraphUnitIds() Returns the paragraph unit ids from this file Declaration IReadOnlyList<string> GetParagraphUnitIds() Returns Type Description IReadOnlyList<string> GetSpecificParagraphUnit(int) Deserializes the paragraph unit with specific index in file Declaration ParagraphUnit GetSpecificParagraphUnit(int index) Parameters Type Name Description int index Returns Type Description ParagraphUnit GetSpecificParagraphUnit(string) Deserializes the paragraph unit with specific id in file Declaration ParagraphUnit GetSpecificParagraphUnit(string id) Parameters Type Name Description string id Returns Type Description ParagraphUnit InsertParagraphUnit(int, ParagraphUnit) Inserts paragraph unit at specific index in file Declaration void InsertParagraphUnit(int index, ParagraphUnit paragraphUnit) Parameters Type Name Description int index ParagraphUnit paragraphUnit RemoveParagraphUnit(int) Removes paragraph unit with specific index from file Declaration void RemoveParagraphUnit(int index) Parameters Type Name Description int index RemoveParagraphUnit(string) Removes paragraph unit from file Declaration void RemoveParagraphUnit(string id) Parameters Type Name Description string id RemoveParagraphUnitRange(int, int) Removes multiple paragraph units based on index Declaration void RemoveParagraphUnitRange(int startIndex, int count) Parameters Type Name Description int startIndex int count UpdateFileDataWithoutParagraphUnits(File) Updates file attributes and skeleton. Array of paragraph units must be empty. Declaration void UpdateFileDataWithoutParagraphUnits(File file) Parameters Type Name Description File file UpdateParagraphUnit(ParagraphUnit) Updates paragraph unit in file Declaration void UpdateParagraphUnit(ParagraphUnit paragraphUnit) Parameters Type Name Description ParagraphUnit paragraphUnit"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory.InMemoryBcmSerializer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory.InMemoryBcmSerializer.html",
    "title": "Class InMemoryBcmSerializer",
    "summary": "Class InMemoryBcmSerializer In-memory partial bcm serializer Inheritance object AbstractPartialBcmSerializer InMemoryBcmSerializer Implements IPartialBcmSerializer IDisposable Inherited Members AbstractPartialBcmSerializer.SaveAsJson(string) AbstractPartialBcmSerializer.SaveAsJson(Stream) AbstractPartialBcmSerializer.Dispose() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class InMemoryBcmSerializer : AbstractPartialBcmSerializer, IPartialBcmSerializer, IDisposable Constructors InMemoryBcmSerializer() New empty document Declaration public InMemoryBcmSerializer() InMemoryBcmSerializer(Document) Constructor from Document instance Declaration public InMemoryBcmSerializer(Document fullDocument) Parameters Type Name Description Document fullDocument InMemoryBcmSerializer(string, bool) Constructor from file path Declaration public InMemoryBcmSerializer(string filePath, bool deleteFile) Parameters Type Name Description string filePath bool deleteFile Methods AddFile(File) Adds a file, based on the attributes and skeleton in the parameter. Array of paragraph units must be empty. Declaration public override void AddFile(File file) Parameters Type Name Description File file Overrides AbstractPartialBcmSerializer.AddFile(File) DeleteFile(int) Deletes the file from the document. Declaration public override void DeleteFile(int index) Parameters Type Name Description int index Overrides AbstractPartialBcmSerializer.DeleteFile(int) DeleteFile(string) Deletes the file from the document. Declaration public override void DeleteFile(string id) Parameters Type Name Description string id Overrides AbstractPartialBcmSerializer.DeleteFile(string) Dispose(bool) Dispose function to override in derived classes Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Overrides AbstractPartialBcmSerializer.Dispose(bool) ExtractDocument() Returns the document packed into a single Document instance Declaration public Document ExtractDocument() Returns Type Description Document GetDocumentWithoutFiles() Gets document attributes and metadata without the files list. Updates made to the object returned will be reflected automatically in the result in case the updated bcm is requested. Declaration public override Document GetDocumentWithoutFiles() Returns Type Description Document Overrides AbstractPartialBcmSerializer.GetDocumentWithoutFiles() GetFileCount() Number of files in this document Declaration public override int GetFileCount() Returns Type Description int Overrides AbstractPartialBcmSerializer.GetFileCount() GetFileIds() All file ids in this document Declaration public override IReadOnlyList<string> GetFileIds() Returns Type Description IReadOnlyList<string> Overrides AbstractPartialBcmSerializer.GetFileIds() GetFileSerializer(string) Gets serialization wrapper for specific file Declaration public override IPartialFileSerializer GetFileSerializer(string fileId) Parameters Type Name Description string fileId Returns Type Description IPartialFileSerializer Overrides AbstractPartialBcmSerializer.GetFileSerializer(string) InsertFile(int, File) Inserts a file to a specific position, based on the attributes and skeleton in the parameter. Array of paragraph units must be empty. Declaration public override void InsertFile(int index, File file) Parameters Type Name Description int index File file Overrides AbstractPartialBcmSerializer.InsertFile(int, File) SaveAsJson(TextWriter) Saves bcm document as single json object to TextWriter Declaration public override void SaveAsJson(TextWriter textWriter) Parameters Type Name Description TextWriter textWriter Overrides AbstractPartialBcmSerializer.SaveAsJson(TextWriter) Implements IPartialBcmSerializer IDisposable"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory Classes InMemoryBcmSerializer In-memory partial bcm serializer"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.PartialBcmSerializerFactory.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.PartialBcmSerializerFactory.html",
    "title": "Class PartialBcmSerializerFactory",
    "summary": "Class PartialBcmSerializerFactory Creates IPartialBcmSerializer instances (either in-memory or temp file based) Inheritance object PartialBcmSerializerFactory Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.PartialSerialization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class PartialBcmSerializerFactory Constructors PartialBcmSerializerFactory() Declaration public PartialBcmSerializerFactory() Properties FileSizeLimitInMBForInMemory Limit above which we will use a temp file based serializer instead of and in-memory one Declaration public int FileSizeLimitInMBForInMemory { get; set; } Property Value Type Description int Methods CreateSerializer(Document) Creates serializer from a Document instance Declaration public IPartialBcmSerializer CreateSerializer(Document existingDocument) Parameters Type Name Description Document existingDocument Returns Type Description IPartialBcmSerializer CreateSerializer(Stream) Creates serializer from a stream containing bcm json content Declaration public IPartialBcmSerializer CreateSerializer(Stream stream) Parameters Type Name Description Stream stream Returns Type Description IPartialBcmSerializer CreateSerializer(string) Creates serializer based on a temp file with the bcm json content. Does not delete the file. Declaration public IPartialBcmSerializer CreateSerializer(string filePath) Parameters Type Name Description string filePath Returns Type Description IPartialBcmSerializer"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased.TempFileBasedBcmSerializer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased.TempFileBasedBcmSerializer.html",
    "title": "Class TempFileBasedBcmSerializer",
    "summary": "Class TempFileBasedBcmSerializer Temp file based bcm serializer variant Inheritance object AbstractPartialBcmSerializer TempFileBasedBcmSerializer Implements IPartialBcmSerializer IDisposable Inherited Members AbstractPartialBcmSerializer.SaveAsJson(string) AbstractPartialBcmSerializer.SaveAsJson(Stream) AbstractPartialBcmSerializer.Dispose() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() Namespace: Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class TempFileBasedBcmSerializer : AbstractPartialBcmSerializer, IPartialBcmSerializer, IDisposable Constructors TempFileBasedBcmSerializer() Creates new empty document. Declaration public TempFileBasedBcmSerializer() TempFileBasedBcmSerializer(string, bool) Constructor based on file path Declaration public TempFileBasedBcmSerializer(string filePath, bool deleteFileOnDispose) Parameters Type Name Description string filePath bool deleteFileOnDispose Methods AddFile(File) Adds a file, based on the attributes and skeleton in the parameter. Array of paragraph units must be empty. Declaration public override void AddFile(File file) Parameters Type Name Description File file Overrides AbstractPartialBcmSerializer.AddFile(File) DeleteFile(int) Deletes the file from the document. Declaration public override void DeleteFile(int index) Parameters Type Name Description int index Overrides AbstractPartialBcmSerializer.DeleteFile(int) DeleteFile(string) Deletes the file from the document. Declaration public override void DeleteFile(string id) Parameters Type Name Description string id Overrides AbstractPartialBcmSerializer.DeleteFile(string) Dispose(bool) Dispose function to override in derived classes Declaration protected override void Dispose(bool disposing) Parameters Type Name Description bool disposing Overrides AbstractPartialBcmSerializer.Dispose(bool) GetDocumentWithoutFiles() Gets document attributes and metadata without the files list. Updates made to the object returned will be reflected automatically in the result in case the updated bcm is requested. Declaration public override Document GetDocumentWithoutFiles() Returns Type Description Document Overrides AbstractPartialBcmSerializer.GetDocumentWithoutFiles() GetFileCount() Number of files in this document Declaration public override int GetFileCount() Returns Type Description int Overrides AbstractPartialBcmSerializer.GetFileCount() GetFileIds() All file ids in this document Declaration public override IReadOnlyList<string> GetFileIds() Returns Type Description IReadOnlyList<string> Overrides AbstractPartialBcmSerializer.GetFileIds() GetFileSerializer(string) Gets serialization wrapper for specific file Declaration public override IPartialFileSerializer GetFileSerializer(string fileId) Parameters Type Name Description string fileId Returns Type Description IPartialFileSerializer Overrides AbstractPartialBcmSerializer.GetFileSerializer(string) InsertFile(int, File) Inserts a file to a specific position, based on the attributes and skeleton in the parameter. Array of paragraph units must be empty. Declaration public override void InsertFile(int index, File file) Parameters Type Name Description int index File file Overrides AbstractPartialBcmSerializer.InsertFile(int, File) SaveAsJson(TextWriter) Saves bcm document as single json object to TextWriter Declaration public override void SaveAsJson(TextWriter textWriter) Parameters Type Name Description TextWriter textWriter Overrides AbstractPartialBcmSerializer.SaveAsJson(TextWriter) Implements IPartialBcmSerializer IDisposable"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased Classes TempFileBasedBcmSerializer Temp file based bcm serializer variant"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.PartialSerialization.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization Classes AbstractPartialBcmSerializer Common superclass for the two types of serializer PartialBcmSerializerFactory Creates IPartialBcmSerializer instances (either in-memory or temp file based) Interfaces IPartialBcmSerializer Bcm serialization interface that allows for not holding the whole bcm document in memory IPartialFileSerializer Bcm file serialization interface that allows for not holding the full file in memory"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.PlaceholderTag.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.PlaceholderTag.html",
    "title": "Class PlaceholderTag",
    "summary": "Class PlaceholderTag A tag with no translatable content. Inheritance object ExtensionDataContainer MetadataContainer MarkupData PlaceholderTag Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> ISkeletonItemReference<PlaceholderTagDefinition> Inherited Members MarkupData.UniqueClone() MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class PlaceholderTag : MarkupData, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData>, ISkeletonItemReference<PlaceholderTagDefinition> Constructors PlaceholderTag() Declaration public PlaceholderTag() Properties Definition Gets the definition of this item from the FileSkeleton. Declaration public PlaceholderTagDefinition Definition { get; } Property Value Type Description PlaceholderTagDefinition The definition of this item from the FileSkeleton. PlaceholderTagDefinitionId Gets or sets the PlaceholderTagDefinition id. Declaration [DataMember(Name = \"placeholderTagDefinitionId\")] public int PlaceholderTagDefinitionId { get; set; } Property Value Type Description int The PlaceholderTagDefinition id. TagNumber Gets or sets the TagNumber for this instance. This is the same as the \"frameworkOriginalTagId\" metadata but now exposed on the tag as well (the metadata will become deprecated). If needed, it will be populated on deserialization from the metadata, the value remains null iff not present (which should not be the case). Declaration [DataMember(Name = \"tagNumber\")] public string TagNumber { get; set; } Property Value Type Description string Type Gets the type of MarkupData. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance, setting a new id. Declaration public PlaceholderTag Clone() Returns Type Description PlaceholderTag A deep clone of this instance, with a new unique id. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Overrides MarkupData.Equals(MarkupData) Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MarkupData.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MarkupData.GetHashCode() Implements IEquatable<T> ICloneable<T> IEquatable<T> ISkeletonItemReference<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.RevisionContainer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.RevisionContainer.html",
    "title": "Class RevisionContainer",
    "summary": "Class RevisionContainer Marks revisions to the translated content. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer RevisionContainer Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, bool>) MarkupDataContainer.GetAllChildren<T>(Func<T, bool>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(int, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.MoveToContainer(MarkupDataContainer, int, int, int) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.this[int] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class RevisionContainer : MarkupDataContainer, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData> Constructors RevisionContainer() Initializes a new instance of the RevisionContainer class. Declaration public RevisionContainer() RevisionContainer(RevisionType) Initializes a new instance of the RevisionContainer class. Declaration public RevisionContainer(RevisionType revisionType) Parameters Type Name Description RevisionType revisionType Type of the revision. Properties Author Gets or sets the revision author. Declaration [DataMember(Name = \"author\")] public string Author { get; set; } Property Value Type Description string The revision author. RevisionType Gets or sets the type of the revision. Declaration [DataMember(Name = \"revisionType\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public RevisionType RevisionType { get; set; } Property Value Type Description RevisionType The type of the revision. Timestamp Gets or sets the date when the revision was added. Declaration [DataMember(Name = \"timestamp\")] public DateTime? Timestamp { get; set; } Property Value Type Description DateTime? The date when the revision was added. Type Gets the type of MarkupData. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public RevisionContainer Clone() Returns Type Description RevisionContainer A deep clone of this instance. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Overrides MarkupDataContainer.Equals(MarkupData) Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MarkupDataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MarkupDataContainer.GetHashCode() UniqueClone() Clones this instance, setting a new unique id. Declaration public RevisionContainer UniqueClone() Returns Type Description RevisionContainer A deep clone of this instance, with a new unique id. Implements IEquatable<T> ICloneable<T> IEquatable<T> See Also MarkupDataContainer"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.RevisionType.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.RevisionType.html",
    "title": "Enum RevisionType",
    "summary": "Enum RevisionType Types of RevisionContainer. Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] [JsonConverter(typeof(EnumConverter))] public enum RevisionType Fields Name Description Deleted Content was deleted. Inserted Content was inserted. Unchanged The content was not changed."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Segment.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Segment.html",
    "title": "Class Segment",
    "summary": "Class Segment Basic unit of translatable content. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer Segment Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, bool>) MarkupDataContainer.GetAllChildren<T>(Func<T, bool>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(int, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.MoveToContainer(MarkupDataContainer, int, int, int) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.OnDeserialized() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.this[int] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class Segment : MarkupDataContainer, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData> Constructors Segment() Initializes a new instance of the Segment class. Declaration public Segment() Segment(string) Initializes a new instance of the Segment class. Declaration public Segment(string segmentNumber) Parameters Type Name Description string segmentNumber The segment number. Segment(string, ConfirmationLevel) Initializes a new instance of the Segment class. Declaration public Segment(string segmentNumber, ConfirmationLevel confirmationLevel) Parameters Type Name Description string segmentNumber The segment number. ConfirmationLevel confirmationLevel The confirmation level. Properties AlignmentData Gets or sets the alignment data. Declaration [DataMember(Name = \"alignmentData\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public AlignmentData AlignmentData { get; set; } Property Value Type Description AlignmentData The alignment data. Remarks Used by the alignment processing. CharacterCount Gets or sets the character count. Declaration [DataMember(Name = \"characterCount\", EmitDefaultValue = false)] public int CharacterCount { get; set; } Property Value Type Description int The character count. ConfirmationLevel Gets or sets the confirmation level (translation status). Declaration [DataMember(Name = \"confirmationLevel\", EmitDefaultValue = false)] [JsonProperty(DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate, NullValueHandling = NullValueHandling.Ignore)] public ConfirmationLevel ConfirmationLevel { get; set; } Property Value Type Description ConfirmationLevel The confirmation level (translation status). IsLocked Gets or sets a value indicating whether this instance is locked for editing. Declaration [DataMember(Name = \"isLocked\", EmitDefaultValue = false)] public bool IsLocked { get; set; } Property Value Type Description bool true if this instance is locked for editing; otherwise, false. SegmentNumber Gets or sets the segment number. Declaration [DataMember(Name = \"segmentNumber\")] public string SegmentNumber { get; set; } Property Value Type Description string The segment number. SiblingSegment Gets the sibling segment. Declaration public Segment SiblingSegment { get; } Property Value Type Description Segment The sibling segment. Remarks If this is the source segment, it retrieves the target (and the other way around) Tokens Gets or sets the tokens. Declaration [DataMember(Name = \"tokens\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public List<Token> Tokens { get; set; } Property Value Type Description List<Token> The tokens. Remarks Used by the tokenization process. TranslationOrigin Gets or sets the translation origin (translation source information). Declaration [DataMember(Name = \"translationOrigin\", EmitDefaultValue = false)] public TranslationOrigin TranslationOrigin { get; set; } Property Value Type Description TranslationOrigin The translation origin. Type Gets the type of MarkupData. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string The type. Overrides MarkupData.Type WordCount Gets or sets the word count. Declaration [DataMember(Name = \"wordCount\", EmitDefaultValue = false)] public int WordCount { get; set; } Property Value Type Description int The word count. Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public Segment Clone() Returns Type Description Segment A deep clone of this instance. CloneWithoutChildren() Creates a clone of this instance, without any children elements. Declaration public override MarkupDataContainer CloneWithoutChildren() Returns Type Description MarkupDataContainer A clone of this instance, without any children elements. Overrides MarkupDataContainer.CloneWithoutChildren() Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Overrides MarkupDataContainer.Equals(MarkupData) Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MarkupDataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MarkupDataContainer.GetHashCode() ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides MarkupDataContainer.ToString() UniqueClone() Clones this instance, setting a new unique id. Declaration public Segment UniqueClone() Returns Type Description Segment A deep clone of this instance, with a new unique id. Implements IEquatable<T> ICloneable<T> IEquatable<T> See Also MarkupDataContainer"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.SegmentMetaDataKeys.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.SegmentMetaDataKeys.html",
    "title": "Class SegmentMetaDataKeys",
    "summary": "Class SegmentMetaDataKeys Constants for Segment metadata. Inheritance object SegmentMetaDataKeys Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class SegmentMetaDataKeys Fields AlignmentTimestamp Segment metadata key for accesing alignment date. Declaration public const string AlignmentTimestamp = \"tuInsertDate\" Field Value Type Description string Contexts Segment metadata key for accesing the associated contexts. Declaration public const string Contexts = \"Contexts\" Field Value Type Description string CustomFields Segment metadata key for accesing custom fields. Declaration public const string CustomFields = \"CustomFields\" Field Value Type Description string SystemFields Segment metadata key for accesing system fields. Declaration public const string SystemFields = \"SystemFields\" Field Value Type Description string TuGuId Segment metadata key for accesing the Translation Unit GUID id. Declaration public const string TuGuId = \"tuguid\" Field Value Type Description string TuId Segment metadata key for accesing the Translation Unit numerical id. Declaration public const string TuId = \"tuid\" Field Value Type Description string"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.SegmentPair.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.SegmentPair.html",
    "title": "Class SegmentPair",
    "summary": "Class SegmentPair Class grouping together the source and equivalent target Segment. Inheritance object ExtensionDataContainer SegmentPair Implements ICloneable<SegmentPair> Inherited Members ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class SegmentPair : ExtensionDataContainer, ICloneable<SegmentPair> Constructors SegmentPair(Segment, Segment) Initializes a new instance of the SegmentPair class. Declaration public SegmentPair(Segment source, Segment target) Parameters Type Name Description Segment source The source. Segment target The target. Properties Source Gets or sets the source. Declaration public Segment Source { get; set; } Property Value Type Description Segment The source. Target Gets or sets the target. Declaration public Segment Target { get; set; } Property Value Type Description Segment The target. Methods Clone() Clones this instance. Declaration public SegmentPair Clone() Returns Type Description SegmentPair A deep clone of this instance. Implements ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.SegmentationHint.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.SegmentationHint.html",
    "title": "Enum SegmentationHint",
    "summary": "Enum SegmentationHint Information on how specific tags should be segmented. Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [JsonConverter(typeof(EnumConverter), new object[] { SegmentationHint.MayExclude })] public enum SegmentationHint Fields Name Description Exclude The tag will be excluded from a segment, even if this means changing the segmentation. This is used for sub-content processing. Include If possible, the segmentation engine should always include this tag inside a segment. IncludeWithText The tag will be included in a segment if the segment also contains text content, otherwise it will not be included in a segment (in order to prevent segment-only tags). MayExclude The tag may be left outside of the segment, e.g. if it appears at a segment boundary."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Serialization.MarkupDataMapping.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Serialization.MarkupDataMapping.html",
    "title": "Class MarkupDataMapping",
    "summary": "Class MarkupDataMapping Factory providing mapping between MarkupData.Type string values and concrete implementations of MarkupData. Inheritance object MarkupDataMapping Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Serialization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class MarkupDataMapping Methods GetType(string) Gets the concrete implementation of MarkupData. Declaration public static MarkupData GetType(string type) Parameters Type Name Description string type The MarkupData.Type string. Returns Type Description MarkupData"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Serialization.TokenMapping.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Serialization.TokenMapping.html",
    "title": "Class TokenMapping",
    "summary": "Class TokenMapping Class for mapping to different types of Token. Inheritance object TokenMapping Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Serialization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class TokenMapping Methods GetType(string) Gets the type of Token based on the string type. Declaration public static Token GetType(string type) Parameters Type Name Description string type The type. Returns Type Description Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Serialization.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Serialization.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Serialization",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.Serialization Classes MarkupDataMapping Factory providing mapping between MarkupData.Type string values and concrete implementations of MarkupData. TokenMapping Class for mapping to different types of Token."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.CommentDefinition.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.CommentDefinition.html",
    "title": "Class CommentDefinition",
    "summary": "Class CommentDefinition Contains comment data. Can be referenced by multiple CommentContainer instances. Inheritance object ExtensionDataContainer MetadataContainer SkeletonItem CommentDefinition Implements IEquatable<MetadataContainer> IEquatable<SkeletonItem> ICloneable<CommentDefinition> IEquatable<CommentDefinition> Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class CommentDefinition : SkeletonItem, IEquatable<MetadataContainer>, IEquatable<SkeletonItem>, ICloneable<CommentDefinition>, IEquatable<CommentDefinition> Constructors CommentDefinition() Initializes a new instance of the CommentDefinition class. Declaration public CommentDefinition() Properties Author Gets or sets the author. Declaration [DataMember(Name = \"author\")] public string Author { get; set; } Property Value Type Description string The author. CommentSeverity Gets or sets the comment severity. Declaration [DataMember(Name = \"commentSeverity\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public CommentSeverity CommentSeverity { get; set; } Property Value Type Description CommentSeverity The comment severity. Date Gets or sets the comment creation date. Declaration [DataMember(Name = \"date\", EmitDefaultValue = false)] public DateTime Date { get; set; } Property Value Type Description DateTime The comment creation date. Text Gets or sets the text. Declaration [DataMember(Name = \"text\")] public string Text { get; set; } Property Value Type Description string The text. Methods Clone() Clones this instance. Declaration public CommentDefinition Clone() Returns Type Description CommentDefinition A dee Equals(CommentDefinition) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(CommentDefinition other) Parameters Type Name Description CommentDefinition other Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides SkeletonItem.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides SkeletonItem.GetHashCode() Implements IEquatable<T> IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.CommentSeverity.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.CommentSeverity.html",
    "title": "Enum CommentSeverity",
    "summary": "Enum CommentSeverity Supported values of comment severity. Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] [JsonConverter(typeof(EnumConverter), new object[] { CommentSeverity.Medium })] public enum CommentSeverity Fields Name Description High High comment severity. Low Low comment severity. Medium Medium comment severity (default)."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.Context.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.Context.html",
    "title": "Class Context",
    "summary": "Class Context Context information, organized as a tree structure. Inheritance object ExtensionDataContainer MetadataContainer SkeletonItem Context Implements IEquatable<MetadataContainer> IEquatable<SkeletonItem> ICloneable<Context> IEquatable<Context> Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class Context : SkeletonItem, IEquatable<MetadataContainer>, IEquatable<SkeletonItem>, ICloneable<Context>, IEquatable<Context> Constructors Context() Declaration public Context() Properties ContextDefinitionId Id of the ContextDefinition object holding the data for this specific Context element. Declaration [DataMember(Name = \"contextDefinitionId\")] public int ContextDefinitionId { get; set; } Property Value Type Description int ParentContextId The id of the parent Context element. Declaration [DataMember(Name = \"parentContextId\", EmitDefaultValue = false)] public int ParentContextId { get; set; } Property Value Type Description int Methods Clone() Clones this instance. Declaration public Context Clone() Returns Type Description Context A clone of this instance. Equals(Context) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Context other) Parameters Type Name Description Context other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides SkeletonItem.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides SkeletonItem.GetHashCode() ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Implements IEquatable<T> IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.ContextDefinition.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.ContextDefinition.html",
    "title": "Class ContextDefinition",
    "summary": "Class ContextDefinition Holds context data. Can be referenced by multiple Context elements. Inheritance object ExtensionDataContainer MetadataContainer SkeletonItem ContextDefinition Implements IEquatable<MetadataContainer> IEquatable<SkeletonItem> ICloneable<ContextDefinition> IEquatable<ContextDefinition> Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class ContextDefinition : SkeletonItem, IEquatable<MetadataContainer>, IEquatable<SkeletonItem>, ICloneable<ContextDefinition>, IEquatable<ContextDefinition> Constructors ContextDefinition() Declaration public ContextDefinition() Properties Description Gets or sets the description. Declaration [DataMember(Name = \"description\", EmitDefaultValue = false)] public string Description { get; set; } Property Value Type Description string The description. DisplayCode Gets or sets the context display code. Declaration [DataMember(Name = \"displayCode\", EmitDefaultValue = false)] public string DisplayCode { get; set; } Property Value Type Description string The context display code. DisplayColor Gets or sets the context display color. Declaration [DataMember(Name = \"displayColor\", EmitDefaultValue = false)] public string DisplayColor { get; set; } Property Value Type Description string The context display color. DisplayName Gets or sets the context display name. Declaration [DataMember(Name = \"displayName\", EmitDefaultValue = false)] public string DisplayName { get; set; } Property Value Type Description string The context display name. FormattingGroupId Gets or sets the formatting group identifier. Declaration [DataMember(Name = \"formattingGroupId\", EmitDefaultValue = false)] public int FormattingGroupId { get; set; } Property Value Type Description int The formatting group identifier. IsSidContext Gets a value indicating whether this instance is sID context. Declaration public bool IsSidContext { get; } Property Value Type Description bool true if this instance is sID context; otherwise, false. IsStructureContext Gets or sets a value indicating whether this instance is a structure context. Declaration [DataMember(Name = \"isStructureContext\", EmitDefaultValue = false)] public bool IsStructureContext { get; set; } Property Value Type Description bool true if this instance is a structure context; otherwise, false. IsTmContext Gets or sets a value indicating whether this instance is a TM context. Declaration [DataMember(Name = \"isTmContext\", EmitDefaultValue = false)] public bool IsTmContext { get; set; } Property Value Type Description bool true if this instance is TM context; otherwise, false. IsTmStructureContext Gets a value indicating whether this instance is a TM structure context. Declaration public bool IsTmStructureContext { get; } Property Value Type Description bool true if this instance is a TM structure context; otherwise, false. TypeId Gets or sets the context type identifier. Declaration [DataMember(Name = \"typeId\", EmitDefaultValue = false)] public string TypeId { get; set; } Property Value Type Description string The context type identifier. Methods Clone() Clones this instance. Declaration public ContextDefinition Clone() Returns Type Description ContextDefinition Equals(ContextDefinition) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(ContextDefinition other) Parameters Type Name Description ContextDefinition other Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides SkeletonItem.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides SkeletonItem.GetHashCode() ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Implements IEquatable<T> IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.FileSkeleton.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.FileSkeleton.html",
    "title": "Class FileSkeleton",
    "summary": "Class FileSkeleton Holds data for a File that is referenced by different MarkupData elements. Inheritance object ExtensionDataContainer MetadataContainer FileSkeleton Implements IEquatable<MetadataContainer> ICloneable<FileSkeleton> IEquatable<FileSkeleton> Inherited Members MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class FileSkeleton : MetadataContainer, IEquatable<MetadataContainer>, ICloneable<FileSkeleton>, IEquatable<FileSkeleton> Examples A PlaceholderTag element has a DefinitionId that points to an element in the PlaceholderTagDefinitions collection. Constructors FileSkeleton() Public constructor. Declaration public FileSkeleton() Properties CommentDefinitions Collection of all the CommentDefinition elements referenced in a File. Declaration [DataMember(Name = \"commentDefinitions\")] public SkeletonCollection<CommentDefinition> CommentDefinitions { get; set; } Property Value Type Description SkeletonCollection<CommentDefinition> ContextDefinitions Collection of all the ContextDefinitionelements referenced in a File. Declaration [DataMember(Name = \"contextDefinitions\")] public SkeletonCollection<ContextDefinition> ContextDefinitions { get; set; } Property Value Type Description SkeletonCollection<ContextDefinition> Contexts Collection of all the Contextelements referenced in a File. Declaration [DataMember(Name = \"contexts\")] public SkeletonCollection<Context> Contexts { get; set; } Property Value Type Description SkeletonCollection<Context> FileId The File id. Declaration [DataMember(Name = \"fileId\", EmitDefaultValue = false)] public string FileId { get; set; } Property Value Type Description string FormattingGroups Collection of all the FormattingGroup elements referenced in a File. Declaration [DataMember(Name = \"formattingGroups\")] public SkeletonCollection<FormattingGroup> FormattingGroups { get; set; } Property Value Type Description SkeletonCollection<FormattingGroup> IdGenerator An IdGenerator instance that creates unique numeric IDs for all the elements in different FileSkeleton collection. Declaration public IdGenerator IdGenerator { get; } Property Value Type Description IdGenerator ParentFile The File for which this FileSkeleton is defined. Declaration public File ParentFile { get; set; } Property Value Type Description File PlaceholderTagDefinitions Collection of all the PlaceholderTagDefinition elements referenced in a File. Declaration [DataMember(Name = \"placeholderTagDefinitions\")] public SkeletonCollection<PlaceholderTagDefinition> PlaceholderTagDefinitions { get; set; } Property Value Type Description SkeletonCollection<PlaceholderTagDefinition> QuickInsertIds Collection of all the QuickInsert IDs referenced in a File. Declaration [DataMember(Name = \"quickInsertIds\", EmitDefaultValue = false)] public List<string> QuickInsertIds { get; set; } Property Value Type Description List<string> StructureTagDefinitions Collection of all the StructureTagDefinition elements referenced in a File. Declaration [DataMember(Name = \"structureTagDefinitions\")] public SkeletonCollection<StructureTagDefinition> StructureTagDefinitions { get; set; } Property Value Type Description SkeletonCollection<StructureTagDefinition> SubContentPUs List of all the IDs of ParagraphUnits that are sub-content elements. Declaration public List<string> SubContentPUs { get; set; } Property Value Type Description List<string> TagPairDefinitions Collection of all the TagPairDefinition elements referenced in a File. Declaration [DataMember(Name = \"tagPairDefinitions\")] public SkeletonCollection<TagPairDefinition> TagPairDefinitions { get; set; } Property Value Type Description SkeletonCollection<TagPairDefinition> TerminologyData Collection of all the TerminologyData elements referenced in a File. Declaration [DataMember(Name = \"terminologyData\")] public SkeletonCollection<TerminologyData> TerminologyData { get; set; } Property Value Type Description SkeletonCollection<TerminologyData> Methods Clone() Clones this instance. Declaration public FileSkeleton Clone() Returns Type Description FileSkeleton Equals(FileSkeleton) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(FileSkeleton other) Parameters Type Name Description FileSkeleton other Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MetadataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MetadataContainer.GetHashCode() ShouldSerializeCommentDefinitions() Used by JSON serialization. Declaration public bool ShouldSerializeCommentDefinitions() Returns Type Description bool True if CommentDefinitions should be serialized. ShouldSerializeContextDefinitions() Used by JSON serialization. Declaration public bool ShouldSerializeContextDefinitions() Returns Type Description bool True if ContextDefinitions should be serialized. ShouldSerializeContexts() Used by JSON serialization. Declaration public bool ShouldSerializeContexts() Returns Type Description bool True if Contexts should be serialized. ShouldSerializeFormattingGroups() Used by JSON serialization. Declaration public bool ShouldSerializeFormattingGroups() Returns Type Description bool True if FormattingGroups should be serialized. ShouldSerializePlaceholderTagDefinitions() Used by JSON serialization. Declaration public bool ShouldSerializePlaceholderTagDefinitions() Returns Type Description bool True if PlaceholderTagDefinitions should be serialized. ShouldSerializeQuickInsertIds() Used by JSON serialization. Declaration public bool ShouldSerializeQuickInsertIds() Returns Type Description bool True if QuickInsertIds should be serialized. ShouldSerializeStructureTagDefinitions() Used by JSON serialization. Declaration public bool ShouldSerializeStructureTagDefinitions() Returns Type Description bool True if FormattingGroups should be serialized. ShouldSerializeSubContentPUs() Used by JSON serialization. Declaration public bool ShouldSerializeSubContentPUs() Returns Type Description bool True if SubContentPUs should be serialized. ShouldSerializeTagPairDefinitions() Used by JSON serialization. Declaration public bool ShouldSerializeTagPairDefinitions() Returns Type Description bool True if TagPairDefinitions should be serialized. ShouldSerializeTerminologyData() Used by JSON serialization. Declaration public bool ShouldSerializeTerminologyData() Returns Type Description bool True if TerminologyData should be serialized. Implements IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.FormattingGroup.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.FormattingGroup.html",
    "title": "Class FormattingGroup",
    "summary": "Class FormattingGroup Holds formatting elements that can be applied to different elements of BCM content. Inheritance object ExtensionDataContainer MetadataContainer SkeletonItem FormattingGroup Implements IEquatable<MetadataContainer> IEquatable<SkeletonItem> ICloneable<FormattingGroup> IEquatable<FormattingGroup> Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class FormattingGroup : SkeletonItem, IEquatable<MetadataContainer>, IEquatable<SkeletonItem>, ICloneable<FormattingGroup>, IEquatable<FormattingGroup> Constructors FormattingGroup() Initializes a new instance of the FormattingGroup class. Declaration public FormattingGroup() Properties Items Collection of formatting elements in this FormattingGroup. Declaration [DataMember(Name = \"items\")] public DictionaryEx<string, string> Items { get; set; } Property Value Type Description DictionaryEx<string, string> Methods Clone() Clones this instance. Declaration public FormattingGroup Clone() Returns Type Description FormattingGroup Equals(FormattingGroup) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(FormattingGroup other) Parameters Type Name Description FormattingGroup other Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides SkeletonItem.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides SkeletonItem.GetHashCode() ShouldSerializeItems() Used by JSON serialization. Declaration public bool ShouldSerializeItems() Returns Type Description bool Implements IEquatable<T> IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.ITermAttributeContainer.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.ITermAttributeContainer.html",
    "title": "Interface ITermAttributeContainer",
    "summary": "Interface ITermAttributeContainer Interface for BCM elements containing terminology attributes. Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public interface ITermAttributeContainer Properties TermAttributes Gets or sets the term attributes. Declaration DictionaryEx<string, object> TermAttributes { get; set; } Property Value Type Description DictionaryEx<string, object> The term attributes."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.IdGenerator.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.IdGenerator.html",
    "title": "Class IdGenerator",
    "summary": "Class IdGenerator Creates unique numeric IDs for all the elements in different FileSkeleton collection. Inheritance object IdGenerator Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class IdGenerator Constructors IdGenerator() Declaration public IdGenerator() Methods GetNext<T>() Gets the next ID. Declaration public int GetNext<T>() where T : SkeletonItem Returns Type Description int The next ID in the sequence. Type Parameters Name Description T UpdateFrom(Document) Updates the ID sequence with the values from the specified Document. Declaration public void UpdateFrom(Document document) Parameters Type Name Description Document document The Document. UpdateFrom(FileSkeleton) Updates the ID sequence with the values from the specified FileSkeleton. Declaration public void UpdateFrom(FileSkeleton skeleton) Parameters Type Name Description FileSkeleton skeleton The FileSkeleton. Update<T>(T) Updates the ID sequence with the ID of the specified item. Declaration public void Update<T>(T item) where T : SkeletonItem Parameters Type Name Description T item The item. Type Parameters Name Description T"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.PlaceholderTagDefinition.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.PlaceholderTagDefinition.html",
    "title": "Class PlaceholderTagDefinition",
    "summary": "Class PlaceholderTagDefinition Definition of a Placeholder. Can be referenced by multiple PlaceholderTag elements. Inheritance object ExtensionDataContainer MetadataContainer SkeletonItem PlaceholderTagDefinition Implements IEquatable<MetadataContainer> IEquatable<SkeletonItem> ICloneable<PlaceholderTagDefinition> IEquatable<PlaceholderTagDefinition> Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class PlaceholderTagDefinition : SkeletonItem, IEquatable<MetadataContainer>, IEquatable<SkeletonItem>, ICloneable<PlaceholderTagDefinition>, IEquatable<PlaceholderTagDefinition> Constructors PlaceholderTagDefinition() Initializes a new instance of the PlaceholderTagDefinition class. Declaration public PlaceholderTagDefinition() Properties DisplayText Gets or sets the display text. Declaration [DataMember(Name = \"displayText\", EmitDefaultValue = false)] public string DisplayText { get; set; } Property Value Type Description string The display text. QuickInsertId Gets or sets the QuickInsert ID of the tag. Declaration [DataMember(Name = \"quickInsertId\", EmitDefaultValue = false)] public string QuickInsertId { get; set; } Property Value Type Description string The QuickInsert ID of the tag. SegmentationHint Gets or sets the segmentation hint. Declaration [DataMember(Name = \"segmentationHint\", EmitDefaultValue = false)] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public SegmentationHint SegmentationHint { get; set; } Property Value Type Description SegmentationHint The segmentation hint. SubContent Gets or sets the SubContentCollection of the placeholder tag. Declaration [DataMember(Name = \"subContent\")] public SubContentCollection SubContent { get; set; } Property Value Type Description SubContentCollection The SubContentCollection of the tag. TagContent Gets or sets the raw Placeholder tag content. Declaration [DataMember(Name = \"tagContent\", EmitDefaultValue = false)] public string TagContent { get; set; } Property Value Type Description string The raw Placeholder tag content of the tag. TextEquivalent Gets or sets the tag text equivalent. Declaration [DataMember(Name = \"textEquivalent\", EmitDefaultValue = false)] public string TextEquivalent { get; set; } Property Value Type Description string The tag text equivalent. Methods Clone() Clones this instance. Declaration public PlaceholderTagDefinition Clone() Returns Type Description PlaceholderTagDefinition A new clone of this instance. Equals(PlaceholderTagDefinition) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PlaceholderTagDefinition other) Parameters Type Name Description PlaceholderTagDefinition other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides SkeletonItem.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides SkeletonItem.GetHashCode() Implements IEquatable<T> IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonCollection-1.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonCollection-1.html",
    "title": "Class SkeletonCollection<T>",
    "summary": "Class SkeletonCollection<T> Base class for collections used in a FileSkeleton. Inheritance object Collection<T> KeyedCollection<SkeletonCollectionKey, T> SkeletonCollection<T> Implements IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IEquatable<SkeletonCollection<T>> Inherited Members KeyedCollection<SkeletonCollectionKey, T>.Contains(SkeletonCollectionKey) KeyedCollection<SkeletonCollectionKey, T>.TryGetValue(SkeletonCollectionKey, out T) KeyedCollection<SkeletonCollectionKey, T>.Remove(SkeletonCollectionKey) KeyedCollection<SkeletonCollectionKey, T>.ChangeItemKey(T, SkeletonCollectionKey) KeyedCollection<SkeletonCollectionKey, T>.ClearItems() KeyedCollection<SkeletonCollectionKey, T>.GetKeyForItem(T) KeyedCollection<SkeletonCollectionKey, T>.InsertItem(int, T) KeyedCollection<SkeletonCollectionKey, T>.RemoveItem(int) KeyedCollection<SkeletonCollectionKey, T>.SetItem(int, T) KeyedCollection<SkeletonCollectionKey, T>.Comparer KeyedCollection<SkeletonCollectionKey, T>.this[SkeletonCollectionKey] KeyedCollection<SkeletonCollectionKey, T>.Dictionary Collection<T>.Add(T) Collection<T>.Clear() Collection<T>.CopyTo(T[], int) Collection<T>.Contains(T) Collection<T>.GetEnumerator() Collection<T>.IndexOf(T) Collection<T>.Insert(int, T) Collection<T>.Remove(T) Collection<T>.RemoveAt(int) Collection<T>.Count Collection<T>.Items Collection<T>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class SkeletonCollection<T> : KeyedCollection<SkeletonCollectionKey, T>, IList<T>, ICollection<T>, IList, ICollection, IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable, IEquatable<SkeletonCollection<T>> where T : SkeletonItem Type Parameters Name Description T Constructors SkeletonCollection() Declaration public SkeletonCollection() Properties IdGenerator Gets the IdGenerator. Declaration public IdGenerator IdGenerator { get; } Property Value Type Description IdGenerator The IdGenerator. ParentSkeleton Gets or sets the parent FileSkeleton. Declaration public FileSkeleton ParentSkeleton { get; set; } Property Value Type Description FileSkeleton The parent FileSkeleton. Methods ClearItems() Removes all elements from the KeyedCollection<TKey, TItem>. Declaration protected override void ClearItems() Overrides KeyedCollection<SkeletonCollectionKey, T>.ClearItems() Equals(SkeletonCollection<T>) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(SkeletonCollection<T> other) Parameters Type Name Description SkeletonCollection<T> other Returns Type Description bool GetById(int) Gets an element by its numerical id. Declaration public T GetById(int id) Parameters Type Name Description int id The id. Returns Type Description T If found, returns the element with the Id id; otherwise returns default(T) GetKeyForItem(T) Extracts the key from the specified element. Declaration protected override SkeletonCollectionKey GetKeyForItem(T item) Parameters Type Name Description T item The element from which to extract the key. Returns Type Description SkeletonCollectionKey The key for the specified element. Overrides KeyedCollection<SkeletonCollectionKey, T>.GetKeyForItem(T) GetOrAdd(T) Gets the element if it already exists in the collection. Otherwise, it is added to the collection and gives it the next ID in the IdGenerator sequence. Declaration public T GetOrAdd(T elem) Parameters Type Name Description T elem The element. Returns Type Description T The existing element; or the newly added one with an Id set. GetOrAddWithExistingId(T) Gets the element if it already exists in the collection. Otherwise, it is added to the collection (preserving its existing ID). Declaration public T GetOrAddWithExistingId(T elem) Parameters Type Name Description T elem The element. Returns Type Description T The existing element; or the newly added one with an Id set. InsertItem(int, T) Inserts an element into the KeyedCollection<TKey, TItem> at the specified index. Declaration protected override void InsertItem(int index, T item) Parameters Type Name Description int index The zero-based index at which item should be inserted. T item The object to insert. Overrides KeyedCollection<SkeletonCollectionKey, T>.InsertItem(int, T) RemoveItem(int) Removes the element at the specified index of the KeyedCollection<TKey, TItem>. Declaration protected override void RemoveItem(int index) Parameters Type Name Description int index The index of the element to remove. Overrides KeyedCollection<SkeletonCollectionKey, T>.RemoveItem(int) SetItem(int, T) Replaces the item at the specified index with the specified item. Declaration protected override void SetItem(int index, T item) Parameters Type Name Description int index The zero-based index of the item to be replaced. T item The new item. Overrides KeyedCollection<SkeletonCollectionKey, T>.SetItem(int, T) Implements IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IEquatable<T> Extension Methods ModelExtensions.IsSequenceEqual<TSource>(IList<TSource>, IList<TSource>)"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonCollectionKey.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonCollectionKey.html",
    "title": "Struct SkeletonCollectionKey",
    "summary": "Struct SkeletonCollectionKey Wrapper used for defining integer keys in the FileSkeleton collections. Implements IEquatable<SkeletonCollectionKey> Inherited Members ValueType.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public struct SkeletonCollectionKey : IEquatable<SkeletonCollectionKey> Constructors SkeletonCollectionKey(int) Initializes a new instance of the SkeletonCollectionKey struct. Declaration public SkeletonCollectionKey(int id) Parameters Type Name Description int id The identifier. Properties Id Gets or sets the identifier. Declaration public int Id { get; set; } Property Value Type Description int The identifier. Methods Equals(SkeletonCollectionKey) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(SkeletonCollectionKey other) Parameters Type Name Description SkeletonCollectionKey other Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) From(int) Creates a new SkeletonCollectionKey from an integer. Declaration public static SkeletonCollectionKey From(int from) Parameters Type Name Description int from The value with which to initialize this instance. Returns Type Description SkeletonCollectionKey A new instance of the SkeletonCollectionKey GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides ValueType.GetHashCode() Operators operator ==(SkeletonCollectionKey, SkeletonCollectionKey) Implements the operator ==. Declaration public static bool operator ==(SkeletonCollectionKey left, SkeletonCollectionKey right) Parameters Type Name Description SkeletonCollectionKey left The left hand item. SkeletonCollectionKey right The right hand item. Returns Type Description bool The result of Equals(SkeletonCollectionKey) operator !=(SkeletonCollectionKey, SkeletonCollectionKey) Implements the operator !=. Declaration public static bool operator !=(SkeletonCollectionKey left, SkeletonCollectionKey right) Parameters Type Name Description SkeletonCollectionKey left The left hand item. SkeletonCollectionKey right The right hand item. Returns Type Description bool The negated result of Equals(SkeletonCollectionKey) Implements IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonItem.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonItem.html",
    "title": "Class SkeletonItem",
    "summary": "Class SkeletonItem Base class for different types of elements definied in a FileSkeleton. Inheritance object ExtensionDataContainer MetadataContainer SkeletonItem CommentDefinition Context ContextDefinition FormattingGroup PlaceholderTagDefinition StructureTagDefinition TagPairDefinition TerminologyData Implements IEquatable<MetadataContainer> IEquatable<SkeletonItem> Inherited Members MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public abstract class SkeletonItem : MetadataContainer, IEquatable<MetadataContainer>, IEquatable<SkeletonItem> Constructors SkeletonItem() Declaration protected SkeletonItem() Properties Id Gets or sets the identifier. Declaration [JsonProperty(PropertyName = \"id\", Order = -2147483648)] public int Id { get; set; } Property Value Type Description int The identifier. Methods Equals(SkeletonItem) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(SkeletonItem other) Parameters Type Name Description SkeletonItem other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MetadataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MetadataContainer.GetHashCode() Implements IEquatable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.StructureTagDefinition.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.StructureTagDefinition.html",
    "title": "Class StructureTagDefinition",
    "summary": "Class StructureTagDefinition Definition of a StructureTag. Can be referenced by multiple StructureTag elements. Inheritance object ExtensionDataContainer MetadataContainer SkeletonItem StructureTagDefinition Implements IEquatable<MetadataContainer> IEquatable<SkeletonItem> ICloneable<StructureTagDefinition> IEquatable<StructureTagDefinition> Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class StructureTagDefinition : SkeletonItem, IEquatable<MetadataContainer>, IEquatable<SkeletonItem>, ICloneable<StructureTagDefinition>, IEquatable<StructureTagDefinition> Constructors StructureTagDefinition() Declaration public StructureTagDefinition() Properties DisplayText Gets or sets the display text. Declaration [DataMember(Name = \"displayText\", EmitDefaultValue = false)] public string DisplayText { get; set; } Property Value Type Description string The display text. SubContent Gets or sets the localizable sub-content. Declaration [DataMember(Name = \"subContent\", EmitDefaultValue = false)] public SubContentCollection SubContent { get; set; } Property Value Type Description SubContentCollection The localizable sub-content. TagContent Gets or sets the content of the tag. Declaration [DataMember(Name = \"tagContent\", EmitDefaultValue = false)] public string TagContent { get; set; } Property Value Type Description string The content of the tag. Methods Clone() Clones this instance. Declaration public StructureTagDefinition Clone() Returns Type Description StructureTagDefinition A clone of this instance. Equals(StructureTagDefinition) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(StructureTagDefinition other) Parameters Type Name Description StructureTagDefinition other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides SkeletonItem.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides SkeletonItem.GetHashCode() Implements IEquatable<T> IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.SubContentCollection.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.SubContentCollection.html",
    "title": "Class SubContentCollection",
    "summary": "Class SubContentCollection Collection of subcontent LocalizableSubContent elements. Can appear in different MarkupData elements. Inheritance object Collection<LocalizableSubContent> KeyedCollection<string, LocalizableSubContent> KeyBasedCollection<string, LocalizableSubContent> SubContentCollection Implements IList<LocalizableSubContent> ICollection<LocalizableSubContent> IList ICollection IReadOnlyList<LocalizableSubContent> IReadOnlyCollection<LocalizableSubContent> IEnumerable<LocalizableSubContent> IEnumerable IEquatable<KeyBasedCollection<string, LocalizableSubContent>> Inherited Members KeyBasedCollection<string, LocalizableSubContent>.KeySelector KeyBasedCollection<string, LocalizableSubContent>.ForEach(Action<LocalizableSubContent>) KeyBasedCollection<string, LocalizableSubContent>.Equals(KeyBasedCollection<string, LocalizableSubContent>) KeyBasedCollection<string, LocalizableSubContent>.Equals(object) KeyBasedCollection<string, LocalizableSubContent>.GetHashCode() KeyBasedCollection<string, LocalizableSubContent>.GetKeyForItem(LocalizableSubContent) KeyedCollection<string, LocalizableSubContent>.Contains(string) KeyedCollection<string, LocalizableSubContent>.TryGetValue(string, out LocalizableSubContent) KeyedCollection<string, LocalizableSubContent>.Remove(string) KeyedCollection<string, LocalizableSubContent>.ChangeItemKey(LocalizableSubContent, string) KeyedCollection<string, LocalizableSubContent>.ClearItems() KeyedCollection<string, LocalizableSubContent>.InsertItem(int, LocalizableSubContent) KeyedCollection<string, LocalizableSubContent>.RemoveItem(int) KeyedCollection<string, LocalizableSubContent>.SetItem(int, LocalizableSubContent) KeyedCollection<string, LocalizableSubContent>.Comparer KeyedCollection<string, LocalizableSubContent>.this[string] KeyedCollection<string, LocalizableSubContent>.Dictionary Collection<LocalizableSubContent>.Add(LocalizableSubContent) Collection<LocalizableSubContent>.Clear() Collection<LocalizableSubContent>.CopyTo(LocalizableSubContent[], int) Collection<LocalizableSubContent>.Contains(LocalizableSubContent) Collection<LocalizableSubContent>.GetEnumerator() Collection<LocalizableSubContent>.IndexOf(LocalizableSubContent) Collection<LocalizableSubContent>.Insert(int, LocalizableSubContent) Collection<LocalizableSubContent>.Remove(LocalizableSubContent) Collection<LocalizableSubContent>.RemoveAt(int) Collection<LocalizableSubContent>.ClearItems() Collection<LocalizableSubContent>.InsertItem(int, LocalizableSubContent) Collection<LocalizableSubContent>.RemoveItem(int) Collection<LocalizableSubContent>.SetItem(int, LocalizableSubContent) Collection<LocalizableSubContent>.Count Collection<LocalizableSubContent>.Items Collection<LocalizableSubContent>.this[int] object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class SubContentCollection : KeyBasedCollection<string, LocalizableSubContent>, IList<LocalizableSubContent>, ICollection<LocalizableSubContent>, IList, ICollection, IReadOnlyList<LocalizableSubContent>, IReadOnlyCollection<LocalizableSubContent>, IEnumerable<LocalizableSubContent>, IEnumerable, IEquatable<KeyBasedCollection<string, LocalizableSubContent>> Constructors SubContentCollection() Initializes a new instance of the SubContentCollection class. Declaration public SubContentCollection() Implements IList<T> ICollection<T> IList ICollection IReadOnlyList<T> IReadOnlyCollection<T> IEnumerable<T> IEnumerable IEquatable<T> Extension Methods ModelExtensions.IsSequenceEqual<TSource>(IList<TSource>, IList<TSource>)"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.TagPairDefinition.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.TagPairDefinition.html",
    "title": "Class TagPairDefinition",
    "summary": "Class TagPairDefinition Definition of a TagPair. Can be referenced by multiple TagPair elements. Inheritance object ExtensionDataContainer MetadataContainer SkeletonItem TagPairDefinition Implements IEquatable<MetadataContainer> IEquatable<SkeletonItem> ICloneable<TagPairDefinition> IEquatable<TagPairDefinition> Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class TagPairDefinition : SkeletonItem, IEquatable<MetadataContainer>, IEquatable<SkeletonItem>, ICloneable<TagPairDefinition>, IEquatable<TagPairDefinition> Constructors TagPairDefinition() Initializes a new instance of the TagPairDefinition class. Declaration public TagPairDefinition() Properties CanHide Gets or sets a value indicating whether this tag can be hidden when displayed. Declaration [DataMember(Name = \"canHide\")] public bool CanHide { get; set; } Property Value Type Description bool true if this tag can be hidden when displayed; otherwise, false. EndTagContent Gets or sets the raw end tag content. Declaration [DataMember(Name = \"endTagContent\", EmitDefaultValue = false)] public string EndTagContent { get; set; } Property Value Type Description string The raw end tag content. EndTagDisplayText Gets or sets the end tag display text. Declaration [DataMember(Name = \"endTagDisplayText\", EmitDefaultValue = false)] public string EndTagDisplayText { get; set; } Property Value Type Description string The end tag display text. FormattingGroupId Gets or sets the formatting group identifier. Declaration [DataMember(Name = \"formattingGroupId\")] public int FormattingGroupId { get; set; } Property Value Type Description int The formatting group identifier. QuickInsertId Gets or sets the QuickInsert identifier of this tag. Declaration [DataMember(Name = \"quickInsertId\", EmitDefaultValue = false)] public string QuickInsertId { get; set; } Property Value Type Description string The QuickInsert identifier of this tag. SegmentationHint Gets or sets the segmentation hint. Declaration [DataMember(Name = \"segmentationHint\", EmitDefaultValue = false)] [JsonProperty(NullValueHandling = NullValueHandling.Ignore, DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate)] public SegmentationHint SegmentationHint { get; set; } Property Value Type Description SegmentationHint The segmentation hint. StartTagContent Gets or sets the raw start tag conten. Declaration [DataMember(Name = \"startTagContent\", EmitDefaultValue = false)] public string StartTagContent { get; set; } Property Value Type Description string The raw start tag content. StartTagDisplayText Gets or sets the start tag display text. Declaration [DataMember(Name = \"startTagDisplayText\", EmitDefaultValue = false)] public string StartTagDisplayText { get; set; } Property Value Type Description string The start tag display text. SubContent Gets or sets the localizable subcontent. Declaration [DataMember(Name = \"subContent\", EmitDefaultValue = false)] public SubContentCollection SubContent { get; set; } Property Value Type Description SubContentCollection The localizable subcontent. Methods Clone() Clones this instance. Declaration public TagPairDefinition Clone() Returns Type Description TagPairDefinition Equals(TagPairDefinition) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TagPairDefinition other) Parameters Type Name Description TagPairDefinition other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides SkeletonItem.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides SkeletonItem.GetHashCode() Implements IEquatable<T> IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.Term.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.Term.html",
    "title": "Class Term",
    "summary": "Class Term Terminology element. Inheritance object ExtensionDataContainer Term Implements ICloneable<Term> IEquatable<Term> ITermAttributeContainer Inherited Members ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class Term : ExtensionDataContainer, ICloneable<Term>, IEquatable<Term>, ITermAttributeContainer Constructors Term() Initializes a new instance of the Term class. Declaration public Term() Properties Id Gets or sets the identifier. Declaration [DataMember(Name = \"id\")] public string Id { get; set; } Property Value Type Description string The identifier. Score Gets or sets the terminology score. Declaration [DataMember(Name = \"score\")] public double Score { get; set; } Property Value Type Description double The terminology score. TermAttributes Gets or sets term level attributes contained at any level within the termbase field structures. Declaration [DataMember(Name = \"termAttributes\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public DictionaryEx<string, object> TermAttributes { get; set; } Property Value Type Description DictionaryEx<string, object> The term attributes. TermOrigin Gets or sets the term origin. Declaration [DataMember(Name = \"termOrigin\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public TermOrigin TermOrigin { get; set; } Property Value Type Description TermOrigin The term origin. TermTranslations Gets or sets the term translations. Declaration [DataMember(Name = \"termTranslations\")] public List<TermTranslation> TermTranslations { get; set; } Property Value Type Description List<TermTranslation> The term translations. Text Gets or sets the terminology text. Declaration [DataMember(Name = \"text\")] public string Text { get; set; } Property Value Type Description string The terminology text. Methods Clone() Clones this instance. Declaration public Term Clone() Returns Type Description Term A deep clone of this instance. Equals(Term) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(Term other) Parameters Type Name Description Term other Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides object.GetHashCode() ShouldSerializeTermAttributes() Used by JSON serialization. Declaration public bool ShouldSerializeTermAttributes() Returns Type Description bool ShouldSerializeTermTranslations() Used by JSON serialization. Declaration public bool ShouldSerializeTermTranslations() Returns Type Description bool Implements ICloneable<T> IEquatable<T> ITermAttributeContainer"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.TermOrigin.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.TermOrigin.html",
    "title": "Class TermOrigin",
    "summary": "Class TermOrigin Data on the creation origin of Term. Inheritance object ExtensionDataContainer TermOrigin Implements ICloneable<TermOrigin> IEquatable<TermOrigin> Inherited Members ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class TermOrigin : ExtensionDataContainer, ICloneable<TermOrigin>, IEquatable<TermOrigin> Constructors TermOrigin() Declaration public TermOrigin() Properties ResourceId Gets or sets the terminology resource identifier. Declaration [DataMember(Name = \"resourceId\")] public string ResourceId { get; set; } Property Value Type Description string The terminology resource identifier. ResourceName Gets or sets the name of the terminology resource. Declaration [DataMember(Name = \"resourceName\")] public string ResourceName { get; set; } Property Value Type Description string The name of the terminology resource. SystemId Gets or sets the identifier of the terminology system. Declaration [DataMember(Name = \"systemId\")] public string SystemId { get; set; } Property Value Type Description string The terminology system identifier. SystemName Gets or sets the terminology system nane. Declaration [DataMember(Name = \"systemName\")] public string SystemName { get; set; } Property Value Type Description string The terminology system name. Methods Clone() Clones this instance. Declaration public TermOrigin Clone() Returns Type Description TermOrigin Equals(TermOrigin) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(TermOrigin other) Parameters Type Name Description TermOrigin other Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides object.GetHashCode() Implements ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.TermTranslation.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.TermTranslation.html",
    "title": "Class TermTranslation",
    "summary": "Class TermTranslation Translation of a specific Term. Inheritance object ExtensionDataContainer TermTranslation Implements ICloneable<TermTranslation> IEquatable<TermTranslation> ITermAttributeContainer Inherited Members ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class TermTranslation : ExtensionDataContainer, ICloneable<TermTranslation>, IEquatable<TermTranslation>, ITermAttributeContainer Constructors TermTranslation() Initializes a new instance of the TermTranslation class. Declaration public TermTranslation() Properties Id Gets or sets the identifier. Declaration [DataMember(Name = \"id\")] public string Id { get; set; } Property Value Type Description string The identifier. TermAttributes Gets or sets the term attributes. Declaration [DataMember(Name = \"termAttributes\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public DictionaryEx<string, object> TermAttributes { get; set; } Property Value Type Description DictionaryEx<string, object> The term attributes. Text Gets or sets the text. Declaration [DataMember(Name = \"text\")] public string Text { get; set; } Property Value Type Description string The text. Methods Clone() Clones this instance. Declaration public TermTranslation Clone() Returns Type Description TermTranslation Equals(TermTranslation) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(TermTranslation other) Parameters Type Name Description TermTranslation other Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides object.GetHashCode() ShouldSerializeTermAttributes() Used by JSON serialization. Declaration public bool ShouldSerializeTermAttributes() Returns Type Description bool Implements ICloneable<T> IEquatable<T> ITermAttributeContainer"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.TerminologyData.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.TerminologyData.html",
    "title": "Class TerminologyData",
    "summary": "Class TerminologyData Data containing a list of Terms representing terminology information. Inheritance object ExtensionDataContainer MetadataContainer SkeletonItem TerminologyData Implements IEquatable<MetadataContainer> IEquatable<SkeletonItem> ICloneable<TerminologyData> IEquatable<TerminologyData> Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Skeleton Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class TerminologyData : SkeletonItem, IEquatable<MetadataContainer>, IEquatable<SkeletonItem>, ICloneable<TerminologyData>, IEquatable<TerminologyData> Constructors TerminologyData() Declaration public TerminologyData() Properties Origin Gets or sets the origin of the terminology information. Declaration [Obsolete(\"Will be removed in a future version. Use the TermOrigin instead!\")] [DataMember(Name = \"origin\")] public string Origin { get; set; } Property Value Type Description string The origin. Terms Gets or sets the terms. Declaration [DataMember(Name = \"terms\")] public List<Term> Terms { get; set; } Property Value Type Description List<Term> The terms. Methods Clone() Clones this instance. Declaration public TerminologyData Clone() Returns Type Description TerminologyData A deep clone of this instance. Equals(TerminologyData) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(TerminologyData other) Parameters Type Name Description TerminologyData other Returns Type Description bool Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides SkeletonItem.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides SkeletonItem.GetHashCode() Implements IEquatable<T> IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Skeleton.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Skeleton",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.Skeleton Classes CommentDefinition Contains comment data. Can be referenced by multiple CommentContainer instances. Context Context information, organized as a tree structure. ContextDefinition Holds context data. Can be referenced by multiple Context elements. FileSkeleton Holds data for a File that is referenced by different MarkupData elements. FormattingGroup Holds formatting elements that can be applied to different elements of BCM content. IdGenerator Creates unique numeric IDs for all the elements in different FileSkeleton collection. PlaceholderTagDefinition Definition of a Placeholder. Can be referenced by multiple PlaceholderTag elements. SkeletonCollection<T> Base class for collections used in a FileSkeleton. SkeletonItem Base class for different types of elements definied in a FileSkeleton. StructureTagDefinition Definition of a StructureTag. Can be referenced by multiple StructureTag elements. SubContentCollection Collection of subcontent LocalizableSubContent elements. Can appear in different MarkupData elements. TagPairDefinition Definition of a TagPair. Can be referenced by multiple TagPair elements. Term Terminology element. TermOrigin Data on the creation origin of Term. TermTranslation Translation of a specific Term. TerminologyData Data containing a list of Terms representing terminology information. Structs SkeletonCollectionKey Wrapper used for defining integer keys in the FileSkeleton collections. Interfaces ITermAttributeContainer Interface for BCM elements containing terminology attributes. Enums CommentSeverity Supported values of comment severity."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.StructureTag.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.StructureTag.html",
    "title": "Class StructureTag",
    "summary": "Class StructureTag A tag that is used for document structure only and has no translatable content. Inheritance object ExtensionDataContainer MetadataContainer MarkupData StructureTag Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> ISkeletonItemReference<StructureTagDefinition> Inherited Members MarkupData.UniqueClone() MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class StructureTag : MarkupData, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData>, ISkeletonItemReference<StructureTagDefinition> Constructors StructureTag() Declaration public StructureTag() Properties Definition Gets the definition of this item from the FileSkeleton. Declaration public StructureTagDefinition Definition { get; } Property Value Type Description StructureTagDefinition The definition of this item from the FileSkeleton. StructureTagDefinitionId Gets or sets the StructureTagDefinition id of this instance. Declaration [DataMember(Name = \"structureTagDefinitionId\")] public int StructureTagDefinitionId { get; set; } Property Value Type Description int The StructureTagDefinition id of this instance. TagNumber Gets or sets the TagNumber for this instance. This is the same as the \"frameworkOriginalTagId\" metadata but now exposed on the tag as well (the metadata will become deprecated). If needed, it will be populated on deserialization from the metadata, the value remains null iff not present (which should not be the case). Declaration [DataMember(Name = \"tagNumber\")] public string TagNumber { get; set; } Property Value Type Description string Type Gets the type of MarkupData. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public StructureTag Clone() Returns Type Description StructureTag A deep clone of this instance. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Overrides MarkupData.Equals(MarkupData) Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MarkupData.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MarkupData.GetHashCode() Implements IEquatable<T> ICloneable<T> IEquatable<T> ISkeletonItemReference<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.TagPair.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.TagPair.html",
    "title": "Class TagPair",
    "summary": "Class TagPair A tag composed of a start and and end tag. Can contain other MarkupData elements. Inheritance object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer TagPair Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> ISkeletonItemReference<TagPairDefinition> Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, bool>) MarkupDataContainer.GetAllChildren<T>(Func<T, bool>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(int, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.MoveToContainer(MarkupDataContainer, int, int, int) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.this[int] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class TagPair : MarkupDataContainer, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData>, ISkeletonItemReference<TagPairDefinition> Constructors TagPair() Declaration public TagPair() Properties Definition Gets the definition of this item from the FileSkeleton. Declaration public TagPairDefinition Definition { get; } Property Value Type Description TagPairDefinition The definition of this item from the FileSkeleton. TagNumber Gets or sets the TagNumber for this instance. This is the same as the \"frameworkOriginalTagId\" metadata but now exposed on the tag as well (the metadata will become deprecated). If needed, it will be populated on deserialization from the metadata, the value remains null iff not present (which should not be the case). Declaration [DataMember(Name = \"tagNumber\")] public string TagNumber { get; set; } Property Value Type Description string TagPairDefinitionId Gets or sets the TagPairDefinition id for this instance. Declaration [DataMember(Name = \"tagPairDefinitionId\")] public int TagPairDefinitionId { get; set; } Property Value Type Description int The TagPairDefinition id for this instance. Type Gets the type of MarkupData. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public TagPair Clone() Returns Type Description TagPair A deep clone of this instance. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Overrides MarkupDataContainer.Equals(MarkupData) Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MarkupDataContainer.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance. Overrides MarkupDataContainer.GetHashCode() OnDeserialized() Declaration protected override void OnDeserialized() Overrides MarkupDataContainer.OnDeserialized() UniqueClone() Clones this instance, setting a new id. Declaration public TagPair UniqueClone() Returns Type Description TagPair A deep clone of this instance, with a new unique id. Implements IEquatable<T> ICloneable<T> IEquatable<T> ISkeletonItemReference<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.TagPairMetaDataKeys.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.TagPairMetaDataKeys.html",
    "title": "Class TagPairMetaDataKeys",
    "summary": "Class TagPairMetaDataKeys Constants used a keys for TagPair metadata. Inheritance object TagPairMetaDataKeys Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class TagPairMetaDataKeys Fields EndTagMetadataPrefix Metadata key used for prefixing end tag related metadata (used by internal conversion). Declaration public const string EndTagMetadataPrefix = \"__end_\" Field Value Type Description string FrameworkOriginalSegmentationHint Metadata key identifying the original TagPair segmentation hint set by the SDL Filter Framework. Declaration public const string FrameworkOriginalSegmentationHint = \"_originalSegmentationHint\" Field Value Type Description string FrameworkOriginalTagId Metadata key identifying the original TagPair id set by the SDL Filter Framework. Declaration public const string FrameworkOriginalTagId = \"frameworkOriginalTagId\" Field Value Type Description string"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.TextContextMatchLevel.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.TextContextMatchLevel.html",
    "title": "Enum TextContextMatchLevel",
    "summary": "Enum TextContextMatchLevel Used with textual context matches to indicate the level of matching. Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [JsonConverter(typeof(EnumConverter), new object[] { TextContextMatchLevel.None })] public enum TextContextMatchLevel Fields Name Description None The textual context does not match. Source Source content matches with surrounding source content. SourceAndTarget Source and target matches surrounding source and target content."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.TextMarkup.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.TextMarkup.html",
    "title": "Class TextMarkup",
    "summary": "Class TextMarkup A MarkupData containing plain text. Inheritance object ExtensionDataContainer MetadataContainer MarkupData TextMarkup Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> Inherited Members MarkupData.UniqueClone() MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class TextMarkup : MarkupData, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData> Constructors TextMarkup() Initializes a new instance of the TextMarkup class. Declaration public TextMarkup() TextMarkup(string) Initializes a new instance of the TextMarkup class. Declaration public TextMarkup(string text) Parameters Type Name Description string text The text. Properties Text Gets or sets the text. Declaration [DataMember(Name = \"text\")] public string Text { get; set; } Property Value Type Description string The text. Type Gets the type of MarkupData. Declaration [JsonProperty(\"type\")] protected override string Type { get; set; } Property Value Type Description string The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public TextMarkup Clone() Returns Type Description TextMarkup A deep clone of this instance. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Overrides MarkupData.Equals(MarkupData) Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MarkupData.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, Overrides MarkupData.GetHashCode() ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Implements IEquatable<T> ICloneable<T> IEquatable<T> See Also MarkupData"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.DateTimePatternType.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.DateTimePatternType.html",
    "title": "Enum DateTimePatternType",
    "summary": "Enum DateTimePatternType DateTime patterns used by Token elements. Namespace: Sdl.Core.Bcm.BcmModel.Tokenization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [Flags] public enum DateTimePatternType Fields Name Description LongDate The pattern represents a long date pattern LongTime The pattern represents a long time pattern ShortDate The pattern represents a short date pattern ShortTime The pattern represents a short time pattern"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.NumericSeparator.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.NumericSeparator.html",
    "title": "Enum NumericSeparator",
    "summary": "Enum NumericSeparator The numeric separators type which can occur in a number token. Namespace: Sdl.Core.Bcm.BcmModel.Tokenization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public enum NumericSeparator Fields Name Description Alternate Indicates that an alternate separator (group or decimal separator) is used. None Indicates that no explicit separator is used. Primary Indicates that the culture's primary separator (group or decimal separator) is used."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.SegmentPosition.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.SegmentPosition.html",
    "title": "Class SegmentPosition",
    "summary": "Class SegmentPosition Represents a position within a segment. Inheritance object ExtensionDataContainer SegmentPosition Inherited Members ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class SegmentPosition : ExtensionDataContainer Constructors SegmentPosition() Initializes a new instance of the SegmentPosition class. Declaration public SegmentPosition() SegmentPosition(int, int) Initializes a new instance with the specified arguments. Declaration public SegmentPosition(int runIndex, int positionInRun) Parameters Type Name Description int runIndex The index of the segment element within the segment. int positionInRun The position within the run. This is only relevant for MediaTypeNames.Text elements, and has no effect for other segment element types. Properties PositionInRun Gets or sets the position within the subsegment. Declaration [DataMember(Name = \"positionInRun\")] public int PositionInRun { get; set; } Property Value Type Description int RunIndex Gets or sets the index of the run (segment element) within the segment. Declaration [DataMember(Name = \"runIndex\")] public int RunIndex { get; set; } Property Value Type Description int Methods Clone() Creates a new instance that is a deep copy of this instance. Declaration public SegmentPosition Clone() Returns Type Description SegmentPosition A new instance that is a deep copy of this instance. Compare(SegmentPosition, SegmentPosition) Compares two segment positions and returns an indication of their sort order. Declaration public static int Compare(SegmentPosition a, SegmentPosition b) Parameters Type Name Description SegmentPosition a The first of the two items to compare. SegmentPosition b The second of the two items to compare. Returns Type Description int An int value less than zero if a precedes b, zero if a denotes the same position as b, and greater than zero if a follows b. Equals(object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides object.GetHashCode() ToString() ToString() Declaration public override string ToString() Returns Type Description string A string representation of the object, for display purposes. Overrides object.ToString()"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.SegmentRange.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.SegmentRange.html",
    "title": "Class SegmentRange",
    "summary": "Class SegmentRange A selection of content inside a Segment. Inheritance object ExtensionDataContainer SegmentRange Inherited Members ExtensionDataContainer.ExtensionData object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class SegmentRange : ExtensionDataContainer Constructors SegmentRange() Initializes a new instance of the SegmentRange class. Declaration public SegmentRange() SegmentRange(SegmentPosition, SegmentPosition) Initializes a new instance with the provided positions. Declaration public SegmentRange(SegmentPosition from, SegmentPosition into) Parameters Type Name Description SegmentPosition from The start position. SegmentPosition into The end position. Remarks No checks are performed to verify that the start position precedes the end position. SegmentRange(int, int, int) Initializes a new instance of with the given parameters. Declaration public SegmentRange(int runIndex, int fromIndex, int intoIndex) Parameters Type Name Description int runIndex The segment element index (run) of the range. int fromIndex The start position in the run. int intoIndex The end position (inclusive) in the run. Properties From Gets or sets the start SegmentPosition in the segment. Declaration [DataMember(Name = \"from\")] public SegmentPosition From { get; set; } Property Value Type Description SegmentPosition The start SegmentPosition in the segment. Into Gets or sets the end SegmentPosition in the segment. Declaration [DataMember(Name = \"into\")] public SegmentPosition Into { get; set; } Property Value Type Description SegmentPosition The end SegmentPosition in the segment. Methods Clone() Creates a new instance that is a deep copy of this instance. Declaration public SegmentRange Clone() Returns Type Description SegmentRange A new instance that is a deep copy of this instance. Compare(SegmentRange, SegmentRange) Compares two segment ranges and returns a value indicating their order. Declaration public static int Compare(SegmentRange a, SegmentRange b) Parameters Type Name Description SegmentRange a The first of the two items to compare. SegmentRange b The second of the two items to compare. Returns Type Description int An integer value less than zero if a precedes b, zero if a and b are in the same range, and a value greater than zero if a follows b. Only the start positions are compared. Equals(SegmentRange) Compares the current range to another segment range. Declaration public bool Equals(SegmentRange other) Parameters Type Name Description SegmentRange other The range to compare with. Returns Type Description bool true if both ranges are identical. Equals(object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj The object to compare with the current object. Returns Type Description bool true if the specified object is equal to the current object; otherwise, false. Overrides object.Equals(object) GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() ToString() ToString() Declaration public override string ToString() Returns Type Description string A string representation of the object, for display purposes. Overrides object.ToString()"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Sign.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Sign.html",
    "title": "Enum Sign",
    "summary": "Enum Sign The sign of a number Namespace: Sdl.Core.Bcm.BcmModel.Tokenization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public enum Sign Fields Name Description Minus A minus sign at the start of the number. None No explicit sign at the start of the number. Plus An explicit plus sign at the start of the number."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.TagType.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.TagType.html",
    "title": "Enum TagType",
    "summary": "Enum TagType Types of tags appearing in tokenization data. Namespace: Sdl.Core.Bcm.BcmModel.Tokenization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public enum TagType Fields Name Description End Represents an ending tag. LockedContent Group of (locked) tag/text content that should be treated as a single placeable. Standalone Represents a standalone tag. Start Represents a starting tag. TextPlaceholder A standalone tag which represents text, not formatting. Undefined Represents an undefined tag type. This is also used for \"dummy tags\" which may be added to a segment in case a tag was deleted from the original segment. Such a situation occurs when the translation engine deletes tags, but the number of tokens must remain constant in the translation proposal as otherwise the token positions will become invalid. UnmatchedEnd For TMX processing only: unmatched end tag (it pos=end) UnmatchedStart For TMX processing only: unmatched start tag (it pos=start)"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AbbreviationToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AbbreviationToken.html",
    "title": "Class AbbreviationToken",
    "summary": "Class AbbreviationToken A Token used for abreviations. Inheritance object Token AbbreviationToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class AbbreviationToken : Token, ICloneable<Token> Constructors AbbreviationToken() Initializes a new instance of the AbbreviationToken class. Declaration public AbbreviationToken() AbbreviationToken(string) Initializes a new instance of the AbbreviationToken class. Declaration public AbbreviationToken(string text) Parameters Type Name Description string text The token text Properties Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T> See Also Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AcronymToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AcronymToken.html",
    "title": "Class AcronymToken",
    "summary": "Class AcronymToken A Token representing acronyms. Inheritance object Token AcronymToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class AcronymToken : Token, ICloneable<Token> Constructors AcronymToken() Initializes a new instance of the AcronymToken class. Declaration public AcronymToken() AcronymToken(string) Initializes a new instance of the AcronymToken class. Declaration public AcronymToken(string text) Parameters Type Name Description string text The text. Properties Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T> See Also Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AlphanumericToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AlphanumericToken.html",
    "title": "Class AlphanumericToken",
    "summary": "Class AlphanumericToken A Token representing alphanumeric tokens. Inheritance object Token AlphanumericToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class AlphanumericToken : Token, ICloneable<Token> Constructors AlphanumericToken() Initializes a new instance of the AlphanumericToken class. Declaration public AlphanumericToken() AlphanumericToken(string) Initializes a new instance of the AlphanumericToken class. Declaration public AlphanumericToken(string text) Parameters Type Name Description string text The token text Properties Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T> See Also Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.CharSequenceToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.CharSequenceToken.html",
    "title": "Class CharSequenceToken",
    "summary": "Class CharSequenceToken A Token representing sequence of characters. Inheritance object Token CharSequenceToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class CharSequenceToken : Token, ICloneable<Token> Remarks This is used in contexts (such as tokenization of some far-east languages) where word boundaries cannot easily be determined. Constructors CharSequenceToken() Initializes a new instance of the CharSequenceToken class. Declaration public CharSequenceToken() CharSequenceToken(string) Initializes a new instance of the CharSequenceToken class. Declaration public CharSequenceToken(string text) Parameters Type Name Description string text The token text Properties Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T> See Also Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.DateTimeToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.DateTimeToken.html",
    "title": "Class DateTimeToken",
    "summary": "Class DateTimeToken A Token represent date/time tokens. Inheritance object Token DateTimeToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class DateTimeToken : Token, ICloneable<Token> Constructors DateTimeToken() Initializes a new instance of the DateTimeToken class. Declaration public DateTimeToken() DateTimeToken(string, DateTime, DateTimePatternType) Initializes a new instance with the specified values. Declaration public DateTimeToken(string text, DateTime dateTime, DateTimePatternType type) Parameters Type Name Description string text The text to assign to the token DateTime dateTime The DateTime object to assign to the token's value DateTimePatternType type The type of the date or time token Properties DateTimeType position of segment within the segment Declaration [DataMember(Name = \"dateTimeType\")] public DateTimePatternType DateTimeType { get; set; } Property Value Type Description DateTimePatternType Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Value position of segment within the segment Declaration [DataMember(Name = \"value\")] public DateTime Value { get; set; } Property Value Type Description DateTime Implements ICloneable<T> See Also Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.GeneralPunctuationToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.GeneralPunctuationToken.html",
    "title": "Class GeneralPunctuationToken",
    "summary": "Class GeneralPunctuationToken A Token representing general punctuation tokens. Inheritance object Token GeneralPunctuationToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class GeneralPunctuationToken : Token, ICloneable<Token> Constructors GeneralPunctuationToken() Initializes a new instance of the GeneralPunctuationToken class. Declaration public GeneralPunctuationToken() GeneralPunctuationToken(string) Initializes a new instance of the GeneralPunctuationToken class. Declaration public GeneralPunctuationToken(string text) Parameters Type Name Description string text The token text Properties Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T> See Also Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.GenericPlaceableToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.GenericPlaceableToken.html",
    "title": "Class GenericPlaceableToken",
    "summary": "Class GenericPlaceableToken Abstract class for different token implementations. Inheritance object Token GenericPlaceableToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class GenericPlaceableToken : Token, ICloneable<Token> Constructors GenericPlaceableToken() Declaration public GenericPlaceableToken() Properties TokenClass Gets the value of the token class which has been used during construction. Declaration [DataMember(Name = \"tokenClass\")] public string TokenClass { get; set; } Property Value Type Description string Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.IPAdressToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.IPAdressToken.html",
    "title": "Class IPAdressToken",
    "summary": "Class IPAdressToken Used for IP address tokens. Inheritance object Token IPAdressToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class IPAdressToken : Token, ICloneable<Token> Constructors IPAdressToken() Initializes a new instance of the IPAdressToken class. Declaration public IPAdressToken() IPAdressToken(string) Initializes a new instance of the IPAdressToken class. Declaration public IPAdressToken(string text) Parameters Type Name Description string text The token text Properties Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.MeasureToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.MeasureToken.html",
    "title": "Class MeasureToken",
    "summary": "Class MeasureToken A Token representing a measurement. Inheritance object Token NumberToken MeasureToken Implements ICloneable<Token> Inherited Members NumberToken.Sign NumberToken.RawSign NumberToken.DecimalSeparator NumberToken.GroupSeparator NumberToken.AlternateGroupSeparator NumberToken.AlternateDecimalSeparator NumberToken.RawFractionalDigits NumberToken.RawDecimalDigits Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class MeasureToken : NumberToken, ICloneable<Token> Remarks A measurement is defined as a combination of a number followed by a unit. Constructors MeasureToken() Initializes a new instance of the MeasureToken class. Declaration public MeasureToken() MeasureToken(string, NumberToken, Unit, string, char) Initializes a new instance with the specified values. This constructor is for internal purposes only and should not be used directly. Declaration public MeasureToken(string text, NumberToken numericPart, Unit unit, string unitString, char unitSeparator) Parameters Type Name Description string text NumberToken numericPart Unit unit string unitString char unitSeparator Properties Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides NumberToken.Type Unit Gets or sets the unit. Declaration [DataMember(Name = \"unit\")] public Unit Unit { get; set; } Property Value Type Description Unit UnitSeparator Gets or sets the unit separator. Declaration [DataMember(Name = \"unitSeparator\")] public char UnitSeparator { get; set; } Property Value Type Description char UnitString Gets or sets the unit string, in case the unit is unknown. Declaration [DataMember(Name = \"unitString\")] public string UnitString { get; set; } Property Value Type Description string Implements ICloneable<T> See Also NumberToken"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.NumberToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.NumberToken.html",
    "title": "Class NumberToken",
    "summary": "Class NumberToken A Token representing a numerical value. Inheritance object Token NumberToken MeasureToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class NumberToken : Token, ICloneable<Token> Constructors NumberToken() Initializes a new instance of the NumberToken class. Declaration public NumberToken() NumberToken(string, NumericSeparator, NumericSeparator, char, char, Sign, string, string, string) Initializes a new instance with the specified values. Declaration public NumberToken(string text, NumericSeparator groupSeparator, NumericSeparator decimalSeparator, char alternateGroupSeparator, char alternateDecimalSeparator, Sign sign, string rawSign, string rawDecimalDigits, string rawFractionalDigits) Parameters Type Name Description string text The text of the token, as it appeared in the input NumericSeparator groupSeparator The type of group separator used NumericSeparator decimalSeparator The type of decimal separator used char alternateGroupSeparator The character of an alternative group separator, if used char alternateDecimalSeparator The character of an alternative decimal separator, if used Sign sign The type of sign used string rawSign The \"raw text\" of the sign string rawDecimalDigits The \"raw decimal digits\", without separators, between 0-9 string rawFractionalDigits The \"raw fractional digits\", without separators, between 0-9 Properties AlternateDecimalSeparator Gets or sets an alternate decimal separator, which is a single char if an alternate separator is used, or the null character if no alternate separator is used. Declaration [DataMember(Name = \"alternateDecimalSeparator\")] public char AlternateDecimalSeparator { get; set; } Property Value Type Description char AlternateGroupSeparator Gets or sets an alternate group separator, which is a single char if an alternate separator is used, or the null character if no alternate separator is used. Declaration [DataMember(Name = \"alternateGroupSeparator\")] public char AlternateGroupSeparator { get; set; } Property Value Type Description char DecimalSeparator Gets or sets the decimal separator Declaration [DataMember(Name = \"decimalSeparator\")] public NumericSeparator DecimalSeparator { get; set; } Property Value Type Description NumericSeparator GroupSeparator Gets or sets the group separator Declaration [DataMember(Name = \"groupSeparator\")] public NumericSeparator GroupSeparator { get; set; } Property Value Type Description NumericSeparator RawDecimalDigits Gets or sets the raw decimal digits, which are a sequence of digits without separators or signs. Declaration [DataMember(Name = \"rawDecimalDigits\")] public string RawDecimalDigits { get; set; } Property Value Type Description string RawFractionalDigits Gets or sets the raw fractional digits, which are a sequence of digits without separators or signs. Declaration [DataMember(Name = \"rawFractionalDigits\")] public string RawFractionalDigits { get; set; } Property Value Type Description string RawSign Gets or sets the \"raw\" sign, i.e. the textual representation of the sign Declaration [DataMember(Name = \"rawSign\")] public string RawSign { get; set; } Property Value Type Description string Sign Gets or sets the sign. Declaration [DataMember(Name = \"sign\")] public Sign Sign { get; set; } Property Value Type Description Sign Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T> See Also Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.TagToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.TagToken.html",
    "title": "Class TagToken",
    "summary": "Class TagToken A Token representing a tag element. Inheritance object Token TagToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class TagToken : Token, ICloneable<Token> Constructors TagToken() Initializes a new instance with default values (used for XML serialization only). Declaration public TagToken() TagToken(TagType, string, int, int, string, bool) Initializes a new instance of the Tag class with the specified type and anchor. Declaration public TagToken(TagType type, string tagId, int anchor, int alignmentAnchor, string textEquivalent, bool canHide) Parameters Type Name Description TagType type The tag type. string tagId The tag ID (user-defined) int anchor The tag anchor. int alignmentAnchor An alignment anchor (cross-segment), if available string textEquivalent A text equivalent string (ignored if the tag type is not TextPlaceholder or LockedContent) bool canHide True if the tag represents inline formatting, false otherwise Properties AlignmentAnchor Gets or sets the alignment anchor, which is used to align cross-segment tags. It only needs to be set for the start tag. Declaration [DataMember(Name = \"alignmentAnchor\")] public int? AlignmentAnchor { get; } Property Value Type Description int? Anchor Gets or sets the tag anchor, which is used to bracket two tags (connect start and end tag). The anchor is only relevant for start and end tags and has no cross-segment semantics. Declaration [DataMember(Name = \"anchor\")] public int? Anchor { get; set; } Property Value Type Description int? CanHide Gets or sets the CanHide flag Declaration [DataMember(Name = \"canHide\")] public bool? CanHide { get; set; } Property Value Type Description bool? TagId Gets or sets the tag ID which is a cross-format ID assigned by the filters and which may be used to represent a cross-format formatting class (such as \"bold\"). Declaration [DataMember(Name = \"tagId\")] public string TagId { get; set; } Property Value Type Description string TagType Gets or sets the tag type. Declaration [DataMember(Name = \"tagType\")] public TagType TagType { get; set; } Property Value Type Description TagType TextEquivalent Gets or sets the text equivalent string. This will only be valid for text placeholder tags. Declaration [DataMember(Name = \"textEquivalent\")] public string TextEquivalent { get; set; } Property Value Type Description string Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Methods ToString() ToString() Declaration public override string ToString() Returns Type Description string A string representation of the object, for display purposes. Overrides Token.ToString() Implements ICloneable<T> See Also Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.Token.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.Token.html",
    "title": "Class Token",
    "summary": "Class Token Abstract class for different token implementations. Inheritance object Token AbbreviationToken AcronymToken AlphanumericToken CharSequenceToken DateTimeToken GeneralPunctuationToken GenericPlaceableToken IPAdressToken NumberToken TagToken URIToken VariableToken WhiteSpaceToken WordToken Implements ICloneable<Token> Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] [JsonConverter(typeof(TokenCreator))] public abstract class Token : ICloneable<Token> Constructors Token() Initializes a new instance with default values. Declaration protected Token() Token(string) Initializes a new instance with the specified token text. Declaration protected Token(string text) Parameters Type Name Description string text The token text Properties Span Gets or sets the span of text in the Segment representing the Token. Declaration [DataMember(Name = \"span\")] public SegmentRange Span { get; set; } Property Value Type Description SegmentRange The text span. Text Gets or sets the token text. Declaration [DataMember(Name = \"text\")] public string Text { get; set; } Property Value Type Description string The token text. Type Gets the type of Token. Should be overriden with names that uniquely identify the implementations. Declaration [DataMember(Name = \"type\")] protected abstract string Type { get; } Property Value Type Description string The type. Methods Clone() Clones this instance. Declaration public virtual Token Clone() Returns Type Description Token ToString() Converts to string. Declaration public override string ToString() Returns Type Description string A string that represents this instance. Overrides object.ToString() Implements ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.URIToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.URIToken.html",
    "title": "Class URIToken",
    "summary": "Class URIToken An URI token that is placeable but is not substitutable. Inheritance object Token URIToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class URIToken : Token, ICloneable<Token> Constructors URIToken() Initializes a new instance of the URIToken class. Declaration public URIToken() URIToken(string) Initializes a new instance of the URIToken class. Declaration public URIToken(string text) Parameters Type Name Description string text The token text Properties Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.VariableToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.VariableToken.html",
    "title": "Class VariableToken",
    "summary": "Class VariableToken A Token representing a substitutable variable. Inheritance object Token VariableToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class VariableToken : Token, ICloneable<Token> Constructors VariableToken() Initializes a new instance of the VariableToken class. Declaration public VariableToken() VariableToken(string) Initializes a new instance of the VariableToken class. Declaration public VariableToken(string text) Parameters Type Name Description string text The token text Properties Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T> See Also Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.WhiteSpaceToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.WhiteSpaceToken.html",
    "title": "Class WhiteSpaceToken",
    "summary": "Class WhiteSpaceToken A Token representing a a non-empty sequence of whitespace characters. Inheritance object Token WhiteSpaceToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class WhiteSpaceToken : Token, ICloneable<Token> Constructors WhiteSpaceToken() Initializes a new instance of the WhiteSpaceToken class. Declaration public WhiteSpaceToken() WhiteSpaceToken(string) Initializes a new instance of the WhiteSpaceToken class. Declaration public WhiteSpaceToken(string text) Parameters Type Name Description string text The token text Properties Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T> See Also Token"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.WordToken.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.WordToken.html",
    "title": "Class WordToken",
    "summary": "Class WordToken A Token which represents a non-specific word. Inheritance object Token WordToken Implements ICloneable<Token> Inherited Members Token.Clone() Token.ToString() Token.Text Token.Span object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class WordToken : Token, ICloneable<Token> Constructors WordToken() Initializes a new instance with default values Declaration public WordToken() WordToken(string) Initializes a new instance with the specified token text Declaration public WordToken(string text) Parameters Type Name Description string text Properties IsStopword Gets or sets whether this token is a stop word. Declaration [DataMember(Name = \"isStopWord\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public bool IsStopword { get; set; } Property Value Type Description bool Stem An optional stem to assign to this token. Stems are used for TM search and scoring. Declaration [DataMember(Name = \"stem\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public string Stem { get; set; } Property Value Type Description string Type Gets the type of Token. Declaration [DataMember(Name = \"type\")] protected override string Type { get; } Property Value Type Description string The type. Overrides Token.Type Implements ICloneable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Tokenization.Tokens",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Classes AbbreviationToken A Token used for abreviations. AcronymToken A Token representing acronyms. AlphanumericToken A Token representing alphanumeric tokens. CharSequenceToken A Token representing sequence of characters. DateTimeToken A Token represent date/time tokens. GeneralPunctuationToken A Token representing general punctuation tokens. GenericPlaceableToken Abstract class for different token implementations. IPAdressToken Used for IP address tokens. MeasureToken A Token representing a measurement. NumberToken A Token representing a numerical value. TagToken A Token representing a tag element. Token Abstract class for different token implementations. URIToken An URI token that is placeable but is not substitutable. VariableToken A Token representing a substitutable variable. WhiteSpaceToken A Token representing a a non-empty sequence of whitespace characters. WordToken A Token which represents a non-specific word."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Unit.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.Unit.html",
    "title": "Enum Unit",
    "summary": "Enum Unit Enumerates the units supported by Sdl.LanguagePlatform.Core.Tokenization.Unit Namespace: Sdl.Core.Bcm.BcmModel.Tokenization Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public enum Unit Fields Name Description BISacre BISacre BISbuUK BISbuUK BISbuUSDry BISbuUSDry BISflozUK BISflozUK BISflozUS BISflozUS BISft BISft BISft2 BISft2 BISfurlong BISfurlong BISgalUK BISgalUK BISgalUS BISgalUS BISin BISin BISin2 BISin2 BISlb BISlb BISlongHW BISlongHW BISlongTon BISlongTon BISmi BISmi BISmi2 BISmi2 BISoz BISoz BISptUK BISptUK BISptUS BISptUS BISptUSDry BISptUSDry BISqtUK BISqtUK BISshortHW BISshortHW BISshortTon BISshortTon BISstone BISstone BISyd BISyd BISyd2 BISyd2 Currency The unit represents a currency Ma Metric are Mcentigrade Mcentigrade Mcl Metric centiliters Mcm Metric centimeters Mcm2 Metric square centimeters Mcm3 Metric cubic centimeters Mdegree Mdegree Mdl Metric deciliters Mdm Metric decimeters Mfahrenheit Mfahrenheit Mg Metric grams Mha Metric hectare Mkelvin Mkelvin Mkg Metric kilograms Mkm Metric kilometers Mkm2 Metric square kilometers Ml Metric liters Mm Metric meters Mm2 Metric square meters Mm3 Metric cubic meters Mmg Metric milligrams Mml Metric milliliters Mmm Metric millimeters Mmm2 Metric square millimeters Mpercent Mpercent Mt Metric tons NoUnit A sentinel, should not be used Other The unit represents another, general unit for which no cross-system conversion will be available."
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.Tokenization.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Tokenization",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel.Tokenization Classes SegmentPosition Represents a position within a segment. SegmentRange A selection of content inside a Segment. Enums DateTimePatternType DateTime patterns used by Token elements. NumericSeparator The numeric separators type which can occur in a number token. Sign The sign of a number TagType Types of tags appearing in tokenization data. Unit Enumerates the units supported by Sdl.LanguagePlatform.Core.Tokenization.Unit"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.TranslationOrigin.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.TranslationOrigin.html",
    "title": "Class TranslationOrigin",
    "summary": "Class TranslationOrigin Contains information on the origin of translation. Inheritance object ExtensionDataContainer MetadataContainer TranslationOrigin Implements IEquatable<MetadataContainer> ICloneable<TranslationOrigin> IEquatable<TranslationOrigin> Inherited Members MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class TranslationOrigin : MetadataContainer, IEquatable<MetadataContainer>, ICloneable<TranslationOrigin>, IEquatable<TranslationOrigin> Constructors TranslationOrigin() Declaration public TranslationOrigin() TranslationOrigin(string, string, int, bool, bool, TextContextMatchLevel, string, TranslationOrigin) Initializes a new instance of the TranslationOrigin class. Declaration public TranslationOrigin(string originType, string originSystem, int matchPercent, bool isStructureContextMatch, bool isSidContextMatch, TextContextMatchLevel textContextMatchLevel, string originalTranslationHash, TranslationOrigin originBeforeAdaptation) Parameters Type Name Description string originType Type of the origin. string originSystem The origin system. int matchPercent The match percent. bool isStructureContextMatch if set to true the translation is a structure context match. bool isSidContextMatch if set to true the translation is a sID context match. TextContextMatchLevel textContextMatchLevel The text context match level. string originalTranslationHash The original translation hash. TranslationOrigin originBeforeAdaptation The TranslationOrigin before adaptation. Properties ChangeDisplayUsername Gets or sets the created_by_username metadata. Declaration public string ChangeDisplayUsername { get; set; } Property Value Type Description string The created_by_username metadata value. CreatedBy Gets or sets the identifier of the user who created the translation. Declaration [DataMember(Name = \"createdBy\", EmitDefaultValue = false)] public string CreatedBy { get; set; } Property Value Type Description string CreatedOn Gets or sets the date and time when the translation was created. Declaration [DataMember(Name = \"createdOn\", EmitDefaultValue = false)] [JsonConverter(typeof(DateTimeConverter))] public DateTime? CreatedOn { get; set; } Property Value Type Description DateTime? CreationDate Gets or sets the created_on metadata. Made obsolete by the CreatedOn property. Declaration [Obsolete(\"Use the CreatedOn property instead.\")] public string CreationDate { get; set; } Property Value Type Description string The created_on metadata value. CreationDisplayUsername Gets or sets the created_by_username metadata. Declaration public string CreationDisplayUsername { get; set; } Property Value Type Description string The created_by_username metadata value. IsSidContextMatch If true, indicates that the translation originates from a system that takes ID context information into account, and that the ID context matches. Declaration [DataMember(Name = \"isSidContextMatch\", EmitDefaultValue = false)] public bool IsSidContextMatch { get; set; } Property Value Type Description bool true if this instance is sID context match; otherwise, false. IsStructureContextMatch Gets or sets a value indicating whether this instance is structure context match. Declaration [DataMember(Name = \"isStructureContextMatch\", EmitDefaultValue = false)] public bool IsStructureContextMatch { get; set; } Property Value Type Description bool true if this instance is structure context match; otherwise, false. Remarks If true, indicates that the translation originates from a system that takes structural context information into account, and that the structure context matches. LastModifiedDate Gets or sets the modified_on metadata. Made obsolete by the ModifiedOn property. Declaration [Obsolete(\"Use the ModifiedOn property instead.\")] public string LastModifiedDate { get; set; } Property Value Type Description string The modified_on metadata value. LastModifiedUserId Gets or sets the last_modified_by metadata. Made obsolete by the ModifiedBy property. Declaration [Obsolete(\"Use the ModifiedBy property instead.\")] public string LastModifiedUserId { get; set; } Property Value Type Description string The last_modified_by metadata value. LastUsedDate Gets or sets the used_on metadata. Declaration public string LastUsedDate { get; set; } Property Value Type Description string The used_on metadata value. LastUsedUserId Gets or sets the used_by metadata. Declaration public string LastUsedUserId { get; set; } Property Value Type Description string The used_by metadata value. MatchPercent Gets or sets the match percent. Declaration [DataMember(Name = \"matchPercent\")] public int MatchPercent { get; set; } Property Value Type Description int The match value for a translation memory match, or the confidence level for a machine translation. Should be a percentage value from 0 - 100% Remarks When a match gets adapted by interactive translation, the original match value can be read from this property on the OriginBeforeAdaptation properties. ModifiedBy Gets or sets the identifier of the user who modified the translation. Declaration [DataMember(Name = \"modifiedBy\", EmitDefaultValue = false)] public string ModifiedBy { get; set; } Property Value Type Description string ModifiedOn Gets or sets the date and time when the translation was modified. Declaration [DataMember(Name = \"modifiedOn\", EmitDefaultValue = false)] [JsonConverter(typeof(DateTimeConverter))] public DateTime? ModifiedOn { get; set; } Property Value Type Description DateTime? OriginBeforeAdaptation Gets or sets the TranslationOrigin before adaptation. Declaration [DataMember(Name = \"originBeforeAdaptation\", EmitDefaultValue = false)] public TranslationOrigin OriginBeforeAdaptation { get; set; } Property Value Type Description TranslationOrigin The TranslationOrigin before adaptation. Remarks Null or the origin information for the originally adapted target content. OriginSystem Gets or sets the origin system. Declaration [DataMember(Name = \"originSystem\")] public string OriginSystem { get; set; } Property Value Type Description string The originating system name for a segment translation. OriginType Gets or sets the translation origin type. Declaration [DataMember(Name = \"originType\")] public string OriginType { get; set; } Property Value Type Description string The translation origin type. Remarks Seed DefaultTranslationOrigin for default values. OriginalTranslationHash A hash value that identifies the entry in the TM that provided the translation. This is used to update the correct TM entry if a translator provides an updated version of the translation. Declaration [DataMember(Name = \"originalTranslationHash\", EmitDefaultValue = false)] public string OriginalTranslationHash { get; set; } Property Value Type Description string The original translation hash. TextContextMatchLevel Indicates whether the match originates from a source where the textual surrounding content corresponds to the text surrounding this segment. Declaration [DataMember(Name = \"textContextMatchLevel\")] [JsonProperty(NullValueHandling = NullValueHandling.Ignore)] public TextContextMatchLevel TextContextMatchLevel { get; set; } Property Value Type Description TextContextMatchLevel The TextContextMatchLevel value. TranslationQualityEstimations Stores a list of TranslationEstimation (persisting TQE data) objects Declaration [DataMember(Name = \"translationQualityEstimations\", EmitDefaultValue = false, IsRequired = false)] public List<TranslationQualityEstimation> TranslationQualityEstimations { get; set; } Property Value Type Description List<TranslationQualityEstimation> UseCount Gets or sets the used_on metadata. Declaration public string UseCount { get; set; } Property Value Type Description string The used_on metadata value. UseDisplayUsername Gets or sets the use_by_username metadata. Declaration public string UseDisplayUsername { get; set; } Property Value Type Description string The use_by_username metadata value. Methods Clone() Clones this instance. Declaration public TranslationOrigin Clone() Returns Type Description TranslationOrigin A deep clone of this instance. Equals(TranslationOrigin) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TranslationOrigin other) Parameters Type Name Description TranslationOrigin other An object to compare with this object. Returns Type Description bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides MetadataContainer.Equals(object) GetHashCode() Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override int GetHashCode() Returns Type Description int Overrides MetadataContainer.GetHashCode() Implements IEquatable<T> ICloneable<T> IEquatable<T> See Also MetadataContainer"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.TranslationOriginMetaData.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.TranslationOriginMetaData.html",
    "title": "Class TranslationOriginMetaData",
    "summary": "Class TranslationOriginMetaData Metadata keys used for TranslationOrigin metadata. Inheritance object TranslationOriginMetaData Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public static class TranslationOriginMetaData Fields ChangeDisplayUsername The display name of the user who last modified the translation. Declaration public const string ChangeDisplayUsername = \"modified_by_username\" Field Value Type Description string CreatedBy The user who created the translation. Declaration public const string CreatedBy = \"created_by\" Field Value Type Description string CreationDate The translation creation date. Declaration public const string CreationDate = \"created_on\" Field Value Type Description string CreationDisplayUsername The display name of the user who created the translation. Declaration public const string CreationDisplayUsername = \"created_by_username\" Field Value Type Description string LastModifiedDate The translation modified date. Declaration public const string LastModifiedDate = \"modified_on\" Field Value Type Description string LastModifiedUserId The Id of the last user who updated the translation. Declaration public const string LastModifiedUserId = \"last_modified_by\" Field Value Type Description string LastUsedDate The date when the translation was last applied. Declaration public const string LastUsedDate = \"used_on\" Field Value Type Description string LastUsedUserId The Id of the last user who applied the translation. Declaration public const string LastUsedUserId = \"used_by\" Field Value Type Description string UseCount The translation usage count. Declaration public const string UseCount = \"use_count\" Field Value Type Description string UseDisplayUsername The display name of the user who last applied the translation. Declaration public const string UseDisplayUsername = \"use_by_username\" Field Value Type Description string"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.TranslationQualityEstimation.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.TranslationQualityEstimation.html",
    "title": "Class TranslationQualityEstimation",
    "summary": "Class TranslationQualityEstimation Model for persisting TQE(Translation Quality Estimation) information Inheritance object TranslationQualityEstimation Inherited Members object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax [DataContract] public class TranslationQualityEstimation Constructors TranslationQualityEstimation() Declaration public TranslationQualityEstimation() Properties Description Stores a description which is generated by the system generating the TQE data Declaration [DataMember(Name = \"description\", IsRequired = false)] public string Description { get; set; } Property Value Type Description string EvaluatedAt Stores the UTC date and time when the evaluation took place Declaration [DataMember(Name = \"evaluatedAt\", IsRequired = true)] [JsonConverter(typeof(DateTimeConverter))] public DateTime EvaluatedAt { get; set; } Property Value Type Description DateTime Model Stores the model used for the estimation, - e.g. daVinci, bedrock Declaration [DataMember(Name = \"model\", IsRequired = true)] public string Model { get; set; } Property Value Type Description string Score Stores the score of this estimation (0-100) Declaration [DataMember(Name = \"score\", IsRequired = true)] public int Score { get; set; } Property Value Type Description int System Stores the system which originated this data - e.g. lw-evolve Declaration [DataMember(Name = \"system\", IsRequired = true)] public string System { get; set; } Property Value Type Description string Methods Equals(object) Equals override Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetHashCode() GetHashCodd override Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode()"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.UnknownMarkupData.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.UnknownMarkupData.html",
    "title": "Class UnknownMarkupData",
    "summary": "Class UnknownMarkupData A MarkupData which was not recognized during deserialization. Used only to preserve its existing data and should not be used directly in BCM processing. Inheritance object ExtensionDataContainer MetadataContainer MarkupData UnknownMarkupData Implements IEquatable<MetadataContainer> ICloneable<MarkupData> IEquatable<MarkupData> Inherited Members MarkupData.Clone() MarkupData.Equals(MarkupData) MarkupData.Equals(object) MarkupData.GetHashCode() MarkupData.UniqueClone() MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(string) MetadataContainer.SetMetadata(string, string) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) object.GetType() object.MemberwiseClone() Namespace: Sdl.Core.Bcm.BcmModel Assembly: Sdl.Core.Bcm.BcmModel.dll Syntax public class UnknownMarkupData : MarkupData, IEquatable<MetadataContainer>, ICloneable<MarkupData>, IEquatable<MarkupData> Constructors UnknownMarkupData() Declaration public UnknownMarkupData() Properties Type Gets or sets the type. Should be implement in derived classes to uniquely identify the type of MarkupData on deserialization. Declaration protected override string Type { get; set; } Property Value Type Description string The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor. Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Implements IEquatable<T> ICloneable<T> IEquatable<T>"
  },
  "api/bcm/Sdl.Core.Bcm.BcmModel.html": {
    "href": "api/bcm/Sdl.Core.Bcm.BcmModel.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel",
    "summary": "Namespace Sdl.Core.Bcm.BcmModel Classes DependencyFile Files marked as dependencies for the BCM content. Used for conversion from and to native formats. Document The BCM root element. ExtensionDataContainer A Newtonsoft.Json.JsonExtensionDataAttribute object used as base for elements that need to preserve unrecognized data on deserialization. FeedbackContainer Holds feedback information created during the translation and review process. File BCM data extracted from a native file. FileMetaDataKeys Constants used for File metadata. Fragment Class representing an independent fragment (slice) of a BCM Document. LocalizableSubContent Subcontent of a particular BCM content element. LockedContentContainer Marks content that is locked for editing. MarkupData Abstract entity representing an item that can be included inside a MarkupDataContainer. Examples: TextMarkup, PlaceholderTag, TagPair. MarkupDataContainer A MarkupData element that can hold other MarkupData elements. MetadataContainer An object that contains metadata in the form of a DictionaryEx<TKey, TValue>. Paragraph A MarkupDataContainer containing the source or target content of a ParagraphUnit. ParagraphUnit The main element of translatable content. Contains a source and target Paragraph element. ParagraphUnitMetadataKeys Constants with ParagraphUnit related metadata keys. PlaceholderTag A tag with no translatable content. RevisionContainer Marks revisions to the translated content. Segment Basic unit of translatable content. SegmentMetaDataKeys Constants for Segment metadata. SegmentPair Class grouping together the source and equivalent target Segment. StructureTag A tag that is used for document structure only and has no translatable content. TagPair A tag composed of a start and and end tag. Can contain other MarkupData elements. TagPairMetaDataKeys Constants used a keys for TagPair metadata. TextMarkup A MarkupData containing plain text. TranslationOrigin Contains information on the origin of translation. TranslationOriginMetaData Metadata keys used for TranslationOrigin metadata. TranslationQualityEstimation Model for persisting TQE(Translation Quality Estimation) information UnknownMarkupData A MarkupData which was not recognized during deserialization. Used only to preserve its existing data and should not be used directly in BCM processing. Interfaces ISkeletonItemReference<T> Marks a class as having its definition in the FileSkeleton. Enums ConfirmationLevel Different stages of translation and translation approval for a Segment. DependencyFileUsage Defines the purpose of a DependencyFile. FeedbackType Types of feedback changes created during the translation/review process. RevisionType Types of RevisionContainer. SegmentationHint Information on how specific tags should be segmented. TextContextMatchLevel Used with textual context matches to indicate the level of matching."
  },
  "articles/BCM/BCM.NET_client_API.html": {
    "href": "articles/BCM/BCM.NET_client_API.html",
    "title": "Welcome to the BCM .NET client API documentation",
    "summary": "Welcome to the BCM .NET client API documentation BCM .NET Client API Samples Samples documenting some usages of the BCM .NET Client. Knowledge Base DateTime serialization The official format for DateTime serialization is yyyy-MM-dd'T'HH:mm:ss.fff'Z'. The BCM supports both this format and the default .NET DateTime serialization format MM/dd/yyyy HH:mm:ss Unrecognized Token deserialization Unrecognized Token objects in the serialized BCM are deserialized into a Token of type Word. E.g.: a new type of Token is introduced in the BCM, but an older client, who doesn't recognized this new type of Token, tries to deserialize it. Unrecognized MarkupData deserialization Unrecognized MarkupData objects in the serialized BCM are deserialized into a MarkupData of type UnknownMarkupData. This is to preserve the data of newly introduced MarkupData objects when deserializing BCM using older clients. Elements of type UnknownMarkupData should be ignored when manipulating BCM in memory."
  },
  "articles/BCM/Samples.html": {
    "href": "articles/BCM/Samples.html",
    "title": "BCM .NET Client API Samples",
    "summary": "BCM .NET Client API Samples Operations with comments Get all the comments in a BCM Document Document document; // a BCM Document deserialized from JSON IEnumerable<SegmentPair> allSegmentPairs = document.Files.Select(file => file.ParagraphUnits).SelectMany(p => p.AllSegmentPairs); List<CommentContainer> sourceComments = allSegmentPairs.Select(segmentPair => segmentPair.Source) .SelectMany(segment => segment.AllSubItems.OfType<CommentContainer>()) .ToList(); List<CommentContainer> targetComments = allSegmentPairs.Select(sp => sp.Target) .SelectMany(segment => segment.AllSubItems.OfType<CommentContainer>()) .ToList(); foreach (var comment in sourceComments) { Console.WriteLine($\"Source comment in segment {comment.ParentSegment.SegmentNumber} with text {comment.Definition.Text}\"); } foreach (var comment in targetComments) { Console.WriteLine($\"Target comment in segment {comment.ParentSegment.SegmentNumber} with text {comment.Definition.Text}\"); } Add a comment over a text element Document document; // a BCM Document deserialized from JSON var definition = new CommentDefinition { Text = \"new comment\", CommentSeverity = CommentSeverity.Medium, Author = \"author\", Date = DateTime.Now }; var comment = new CommentContainer { CommentDefinitionId = definition.Id }; // Find a text element on which to add a Comment var text = document.Files.First().ParagraphUnits.SelectMany(x => x.Target.AllSubItems.OfType<TextMarkup>()).First(); // Remove the Text from its current parent var parentElement = text.Parent; var indexInParent = text.IndexInParent; parentElement.Remove(text); // Add the Text to the newly created Comment element comment.Add(text); // Insert the new Comment element to replace the Text, in the same position parentElement.Insert(indexInParent, comment); Remove a comment Document document; // a BCM Document deserialized from JSON var comment = document.Files.First().ParagraphUnits.SelectMany(x => x.Target.AllSubItems.OfType<CommentContainer>()).First(); // Remove it from the FileSkeleton, where the Comment data is stored document.Files.First().Skeleton.CommentDefinitions.Remove(comment.Definition); // Remove the Comment from its parent element comment.Parent.Remove(comment); BCM Visitor This sample gathers the translatable content from a BCM documents and creates a HTML file with the content. HtmlOutputVisitor using Sdl.Core.Bcm.BcmModel; using Sdl.Core.Bcm.BcmModel.Annotations; using Sdl.Core.Bcm.BcmModel.Common; using System.Text; namespace Sdl.Core.Bcm.API.Samples.Visitor { class HtmlOutputVisitor : BcmVisitor { // Gathers HTML content from the BCM content. private readonly StringBuilder _result = new StringBuilder(); /// <summary> /// Creates a new instance of <see cref=\"HtmlOutputVisitor\"/> and gathers content as HTML from <paramref name=\"markupData\"/> and all its descendant elements. /// </summary> /// <param name=\"markupData\">The <see cref=\"MarkupData\"/> element from which to extract HTML content.</param> /// <returns></returns> public static string Collect(MarkupData markupData) { var collector = new HtmlOutputVisitor(); markupData.AcceptVisitor(collector); return collector.Result; } /// <summary> /// After <see cref=\"Collect(MarkupData)\"/> is called, this will contain the HTML output text. /// </summary> /// <value> /// The result. /// </value> public string Result => _result.ToString(); /// <summary> /// Visits all the descendant elements of <paramref name=\"container\"/>. /// </summary> /// <param name=\"container\">The container.</param> public void VisitChildren(MarkupDataContainer container) { foreach (var markupData in container.Children) { markupData.AcceptVisitor(this); } } /// <summary> /// Visits the descendants of a Comment element. /// </summary> /// <param name=\"commentContainer\"></param> public override void VisitCommentContainer(CommentContainer commentContainer) { VisitChildren(commentContainer); } /// <summary> /// Visits the descendants of a Feedback element. /// </summary> /// <param name=\"feedbackContainer\"></param> public override void VisitFeedbackContainer(FeedbackContainer feedbackContainer) { VisitChildren(feedbackContainer); } /// <summary> /// Visits the descendants of a Locked Content element. /// </summary> /// <param name=\"lockedContentContainer\"></param> public override void VisitLockedContentContainer(LockedContentContainer lockedContentContainer) { VisitChildren(lockedContentContainer); } /// <summary> /// Visits the target <see cref=\"Paragraph\"/> and wraps its content inside a DIV tag. /// </summary> /// <param name=\"paragraph\"></param> public override void VisitParagraph(Paragraph paragraph) { _result.Append($\"<div type=\\\"paragraph\\\">\"); VisitChildren(paragraph); _result.Append($\"</div>\"); } /// <summary> /// Visits a <see cref=\"PlaceholderTag\"/> non-translatable element and appends its content as a VAR tag. /// </summary> /// <param name=\"tag\"></param> public override void VisitPlaceholderTag(PlaceholderTag tag) { _result.Append($\"<var id=\\\"{tag.Id}\\\">{tag.Definition.DisplayText}</var>\"); } public override void VisitRevisionContainer(RevisionContainer revisionContainer) { VisitChildren(revisionContainer); } /// <summary> /// Visits a <see cref=\"Segment\"/> translatable element and appends its content as a DIV tag. /// </summary> /// <param name=\"segment\"></param> public override void VisitSegment(Segment segment) { _result.Append($\"<div type=\\\"segment\\\" id=\\\"{segment.Id}\\\">\"); VisitChildren(segment); _result.Append($\"</div>\"); } /// <summary> /// Structure elements are non-translatable elements which are ignored during the translation process. /// </summary> /// <param name=\"structureTag\">The structure tag.</param> public override void VisitStructure(StructureTag structureTag) { } /// <summary> /// Visits a <see cref=\"TagPair\"/> element and appends its content as a SPAN tag. /// Tag pairs are non-translatable elements which can contain translatable content. /// E.g.: Bold formatting (<b>text</b>). The start and end Bold tags form the tag pair and the text is a child element. /// </summary> /// <param name=\"tagPair\"></param> public override void VisitTagPair(TagPair tagPair) { _result.Append($\"<span id=\\\"{tagPair.Id}\\\">\"); VisitChildren(tagPair); _result.Append(\"</span>\"); } /// <summary> /// Visits the descendants of a Terminology Annotation element. /// </summary> /// <param name=\"terminologyAnnotation\"></param> public override void VisitTerminologyContainer(TerminologyAnnotationContainer terminologyAnnotation) { VisitChildren(terminologyAnnotation); } /// <summary> /// Visits a <see cref=\"TextMarkup\"/> element and appends its content as plain text. /// These are translatable text elements. /// </summary> /// <param name=\"text\"></param> public override void VisitText(TextMarkup text) { _result.Append(text.Text); } } } Usage Document document; // a BCM Document deserialized from JSON var visitor = new HtmlOutputVisitor(); // Surround content with an <html> tag. var result = new StringBuilder(\"<html>\"); // Extract content from each BCM File. // A File represents the content extracted from a native file. A BCM Document can have content extracted from multiple files. document.Files.ForEach(file => { // Get all the target content in a File var targetSegments = file.ParagraphUnits.Select(punit => punit.Target); foreach (var targetSegment in targetSegments) { // Visit each target Segment and append its content as HTML result.Append(HtmlOutputVisitor.Collect(targetSegment)); } }); result.Append(\"</html>\");"
  },
  "developer_license.html": {
    "href": "developer_license.html",
    "title": "Request a Developer License",
    "summary": "Request a Developer License Selecting the Right License Trados currently offers two primary license types for developers: Desktop License for Trados Studio Grants full functionality of Trados Studio on a single computer. Ideal for creating desktop-based integrations or customizations. Cloud License for Trados Team or Enterprise Provides access to Trados capabilities in a cloud-based environment. Best suited for solutions requiring team collaboration, centralized project management, and cloud workflows. Apply for a Developer License Send an email to app-signing@rws.com with the following information: Full name and address (for identification). Reason for requesting a developer license (e.g., custom integrations, automation scripts, Trados Studio plugin development, Trados Cloud add-on development, etc.). Affiliated company and contact person: If applicable, specify the company you are working for and who the contact person would be (especially if representing an existing customer). Intended solutions and pricing details: Indicate whether you plan to offer solutions developed with the dev license on the AppStore and if you intend to charge for them. Understanding the potential impact and reach of your solution helps RWS assess your request. Await Evaluation Our team reviews each request to ensure alignment with Trados licensing guidelines and to assess its potential value to the Trados community. Once approved, you will receive an email with additional instructions on how to proceed."
  },
  "index.html": {
    "href": "index.html",
    "title": "Access the Var:ProductName APIs",
    "summary": "Access the Var:ProductName APIs Var:ProductName is the platform on which RWS host a number of products. You're in the right place if you're looking for API documentation for any of the following: Trados Enterprise Trados Accelerate Trados Team Trados Ignite Trados Studio (cloud capabilities) Trados Go Integrating with Var:ProductName products To create an integration with any of the products listed above, you'll need to use the Public API. You can find the documentation for the API here. Note that the API is updated regularly so make sure that you check out the What's new section to find out information on recently added features. To enable RWS to extend and improve the API, and to support the latest features in the products, sometimes it's necessary to remove or change functionality. For that, you'll need to check the What's deprecated page where RWS will post advance notice of any API endpoints that will be removed or change in the future. Don't worry though because RWS will try and give six months notice of any breaking changes. Extending Var:ProductName products Var:ProductName products can be extended in a number of ways. For example, you may want to create an add-on to support a machine translation engine or you may want to create a custom workflow task. RWS provides an extensibility framework for the Var:ProductName suite of products. To get more information on what's required and how you can do this, visit the Var:ProductName extensibility documentation pages. Interacting with files Translatable content in Var:ProductName is held in a format called Bilingual Content Model, or BCM for short. You can find BCM reference documentation and samples on this site. Click here to find out more. Reporting API issues If you want to report an issue with the API, you can find information on how to do this here - How to report an issue Trados Cloud API and Customer Portal API Please be aware that Trados Cloud offers two different APIs. First is the modern Trados Cloud API described on this page. Then there is the second API that is the Mantra API. Trados Cloud API is the recommended option for new integrations as it is more modern and much effort is put into its continuous evolution along with Trados Enterprise. Please take care not to confuse the two of them as they are not interchangeable."
  }
}