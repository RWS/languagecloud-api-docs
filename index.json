{
  "api/BCM/Sdl.Core.Bcm.BcmModel.Alignment.AlignmentData.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Alignment.AlignmentData.html",
    "title": "Class AlignmentData",
    "keywords": "Class AlignmentData Alignment related information. Inheritance System.Object ExtensionDataContainer AlignmentData Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Alignment Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class AlignmentData : ExtensionDataContainer Constructors AlignmentData() Declaration public AlignmentData() Properties ContentInsertDate Gets or sets the alignment content insert date. Declaration public DateTime ContentInsertDate { get; set; } Property Value Type Description System.DateTime IncompatibleSpanPairSet Collection of SpanPairNode incompatible alignments. Declaration public List<SpanPairNode> IncompatibleSpanPairSet { get; set; } Property Value Type Description System.Collections.Generic.List < SpanPairNode > ModelDate Gets or sets the alignment model creation date. Declaration public Nullable<DateTime> ModelDate { get; set; } Property Value Type Description System.Nullable < System.DateTime > SpanPairSet Collection of SpanPairNode alignments subject to bilingual compositionality constraints. Declaration public List<SpanPairNode> SpanPairSet { get; set; } Property Value Type Description System.Collections.Generic.List < SpanPairNode > TuId The TranslationUnit identifier. Declaration public int TuId { get; set; } Property Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Alignment.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Alignment.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Alignment",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.Alignment Classes AlignmentData Alignment related information. LiftSpan A class to represent a continous span of items in an ordered sequence SpanPairNode Stores information about an alignment between a pair of LiftSpan objects."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Alignment.LiftSpan.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Alignment.LiftSpan.html",
    "title": "Class LiftSpan",
    "keywords": "Class LiftSpan A class to represent a continous span of items in an ordered sequence Inheritance System.Object ExtensionDataContainer LiftSpan Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Alignment Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class LiftSpan : ExtensionDataContainer Constructors LiftSpan() Declaration public LiftSpan() Properties Length The length of the span (number of items that it covers in the sequence). Declaration public int Length { get; set; } Property Value Type Description System.Int32 StartIndex The zero-based start index of the span. Declaration public int StartIndex { get; set; } Property Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Alignment.SpanPairNode.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Alignment.SpanPairNode.html",
    "title": "Class SpanPairNode",
    "keywords": "Class SpanPairNode Stores information about an alignment between a pair of LiftSpan objects. Inheritance System.Object ExtensionDataContainer SpanPairNode Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Alignment Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class SpanPairNode : ExtensionDataContainer Constructors SpanPairNode() Declaration public SpanPairNode() Properties Confidence A value indicating how reliable this alignment should be considered to be. A zero value indicates that no reliability-value can be applied. Otherwise, the value should be no greater than 1, which indicates maximum reliability. Declaration public float Confidence { get; set; } Property Value Type Description System.Single Provenance A value recording how the alignment was produced. Value Description 1 NodeAlignment 2 SeedConfirmation 3 PlaceableAlignment 4 PhraseExtractor 5 Structure 6 TrainedAligner 7 Other Declaration public int Provenance { get; set; } Property Value Type Description System.Int32 SourceSpan The source LiftSpan . Declaration public LiftSpan SourceSpan { get; set; } Property Value Type Description LiftSpan TargetSpan The target LiftSpan . Declaration public LiftSpan TargetSpan { get; set; } Property Value Type Description LiftSpan"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Annotations.AnnotationContainer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Annotations.AnnotationContainer.html",
    "title": "Class AnnotationContainer",
    "keywords": "Class AnnotationContainer Abstract MarkupDataContainer , marking a user annotation on the BCM. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer AnnotationContainer CommentContainer TerminologyAnnotationContainer Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, Boolean>) MarkupDataContainer.GetAllChildren<T>(Func<T, Boolean>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(Int32, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.Clone() MarkupDataContainer.MoveToContainer(MarkupDataContainer, Int32, Int32, Int32) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.UniqueClone() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.Item[Int32] MarkupData.AcceptVisitor(BcmVisitor) MarkupData.Id MarkupData.Type MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Annotations Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class AnnotationContainer : MarkupDataContainer, ICloneable<MarkupData> Constructors AnnotationContainer() Declaration protected AnnotationContainer() Properties AnnotationId The annotation ID. Declaration public int AnnotationId { get; set; } Property Value Type Description System.Int32 Methods Equals(MarkupData) MarkupData based equality. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other Returns Type Description System.Boolean Overrides MarkupDataContainer.Equals(MarkupData) Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MarkupDataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MarkupDataContainer.GetHashCode() Implements System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Annotations.CommentContainer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Annotations.CommentContainer.html",
    "title": "Class CommentContainer",
    "keywords": "Class CommentContainer An AnnotationContainer representing user comments. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer AnnotationContainer CommentContainer Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > ISkeletonItemReference < CommentDefinition > Inherited Members AnnotationContainer.AnnotationId MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, Boolean>) MarkupDataContainer.GetAllChildren<T>(Func<T, Boolean>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(Int32, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.MoveToContainer(MarkupDataContainer, Int32, Int32, Int32) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.Item[Int32] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Annotations Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class CommentContainer : AnnotationContainer, ICloneable<MarkupData>, ISkeletonItemReference<CommentDefinition> Constructors CommentContainer() Declaration public CommentContainer() Properties CommentDefinitionId Gets or sets the comment definition ID. Declaration public int CommentDefinitionId { get; set; } Property Value Type Description System.Int32 The comment definition ID. Definition Gets the CommentDefinition . Declaration public CommentDefinition Definition { get; } Property Value Type Description CommentDefinition Type Gets the MarkupData type. Declaration protected override string Type { get; set; } Property Value Type Description System.String Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public CommentContainer Clone() Returns Type Description CommentContainer The clone. Equals(MarkupData) MarkupData based equality. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other Returns Type Description System.Boolean Overrides AnnotationContainer.Equals(MarkupData) Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides AnnotationContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides AnnotationContainer.GetHashCode() UniqueClone() Clones this instance using a new uniqueu ID. Declaration public CommentContainer UniqueClone() Returns Type Description CommentContainer The clone. Implements System.IEquatable<> ICloneable<T> System.IEquatable<> ISkeletonItemReference<T>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Annotations.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Annotations.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Annotations",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.Annotations Classes AnnotationContainer Abstract MarkupDataContainer , marking a user annotation on the BCM. CommentContainer An AnnotationContainer representing user comments. TerminologyAnnotationContainer An AnnotationContainer representing terminology-related annotations."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Annotations.TerminologyAnnotationContainer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Annotations.TerminologyAnnotationContainer.html",
    "title": "Class TerminologyAnnotationContainer",
    "keywords": "Class TerminologyAnnotationContainer An AnnotationContainer representing terminology-related annotations. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer AnnotationContainer TerminologyAnnotationContainer Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > ISkeletonItemReference < TerminologyData > Inherited Members AnnotationContainer.AnnotationId MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, Boolean>) MarkupDataContainer.GetAllChildren<T>(Func<T, Boolean>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(Int32, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.Clone() MarkupDataContainer.MoveToContainer(MarkupDataContainer, Int32, Int32, Int32) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.UniqueClone() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.Item[Int32] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Annotations Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class TerminologyAnnotationContainer : AnnotationContainer, ICloneable<MarkupData>, ISkeletonItemReference<TerminologyData> Constructors TerminologyAnnotationContainer() Declaration public TerminologyAnnotationContainer() Properties Definition Gets the TerminologyData definition. Declaration public TerminologyData Definition { get; } Property Value Type Description TerminologyData TerminologyDataId Gets or sets the terminology data identifier. Declaration public int TerminologyDataId { get; set; } Property Value Type Description System.Int32 The terminology data identifier. Type Gets the MarkupData type. Declaration protected override string Type { get; set; } Property Value Type Description System.String Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Equals(MarkupData) MarkupData based equality. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other Returns Type Description System.Boolean Overrides AnnotationContainer.Equals(MarkupData) Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides AnnotationContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides AnnotationContainer.GetHashCode() Implements System.IEquatable<> ICloneable<T> System.IEquatable<> ISkeletonItemReference<T>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.DictionaryEx-2.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.DictionaryEx-2.html",
    "title": "Class DictionaryEx<TKey, TValue>",
    "keywords": "Class DictionaryEx<TKey, TValue> A dictionary with support for: deep Equals (instead of ref comparison) deep GetHashCode (2 refs with the same values will return the same hash code). The default dictionary returns hash code based on reference. Inheritance System.Object DictionaryEx<TKey, TValue> Implements System.IEquatable < DictionaryEx <TKey, TValue>> Namespace : Sdl.Core.Bcm.BcmModel.Collections Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class DictionaryEx<TKey, TValue> : Dictionary<TKey, TValue> Type Parameters Name Description TKey TValue Constructors DictionaryEx() Initializes a new instance of the DictionaryEx<TKey, TValue> class. Declaration public DictionaryEx() DictionaryEx(DictionaryEx<TKey, TValue>) Initializes a new instance of the DictionaryEx<TKey, TValue> class, based on another instance. Declaration public DictionaryEx(DictionaryEx<TKey, TValue> other) Parameters Type Name Description DictionaryEx <TKey, TValue> other The other instance from which to construct the current instance. DictionaryEx(IEnumerable<KeyValuePair<TKey, TValue>>) Initializes a new instance of the DictionaryEx<TKey, TValue> class. Declaration public DictionaryEx(IEnumerable<KeyValuePair<TKey, TValue>> items) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <TKey, TValue>> items The items. Methods Equals(DictionaryEx<TKey, TValue>) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(DictionaryEx<TKey, TValue> other) Parameters Type Name Description DictionaryEx <TKey, TValue> other Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Implements System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.FileCollection.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.FileCollection.html",
    "title": "Class FileCollection",
    "keywords": "Class FileCollection A dictionary-based collection of File s. Inheritance System.Object KeyBasedCollection < System.String , File > FileCollection Implements System.IEquatable < KeyBasedCollection < System.String , File >> Inherited Members KeyBasedCollection<String, File>.KeySelector KeyBasedCollection<String, File>.ForEach(Action<File>) KeyBasedCollection<String, File>.Equals(KeyBasedCollection<String, File>) KeyBasedCollection<String, File>.Equals(Object) KeyBasedCollection<String, File>.GetHashCode() KeyBasedCollection<String, File>.GetKeyForItem(File) Namespace : Sdl.Core.Bcm.BcmModel.Collections Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class FileCollection : KeyBasedCollection<string, File> Constructors FileCollection() Initializes a new instance of the FileCollection class. Declaration public FileCollection() Properties IdGenerator The identifier generator. Declaration public IdGenerator IdGenerator { get; set; } Property Value Type Description IdGenerator Methods InsertItem(Int32, File) Inserts an element into the System.Collections.ObjectModel.KeyedCollection`2 at the specified index. Declaration protected override void InsertItem(int index, File item) Parameters Type Name Description System.Int32 index The zero-based index at which item should be inserted. File item The object to insert. SetItem(Int32, File) Replaces the item at the specified index with the specified item. Declaration protected override void SetItem(int index, File item) Parameters Type Name Description System.Int32 index The zero-based index of the item to be replaced. File item The new item. Implements System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.HashDictionaryInt-2.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.HashDictionaryInt-2.html",
    "title": "Class HashDictionaryInt<TKey, TValue>",
    "keywords": "Class HashDictionaryInt<TKey, TValue> A dictionary which uses hashes generated from the key to store items in a backing dictionary. We may look at generating long hashes eventually if there are many collisions detected. Inheritance System.Object HashDictionaryInt<TKey, TValue> Namespace : Sdl.Core.Bcm.BcmModel.Collections Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class HashDictionaryInt<TKey, TValue> : Object Type Parameters Name Description TKey Item from which key will be derived. At the moment, GetHashCode is called on the key to use as actual key in backing Dictionary TValue value for given key being stored in dictionary Constructors HashDictionaryInt() Initializes a new instance of the HashDictionaryInt<TKey, TValue> class. Declaration public HashDictionaryInt() Fields _backingDictionary The backing dictionary. Declaration public Dictionary<int, List<KeyValuePair<TKey, TValue>>> _backingDictionary Field Value Type Description System.Collections.Generic.Dictionary < System.Int32 , System.Collections.Generic.List < System.Collections.Generic.KeyValuePair <TKey, TValue>>> Properties Item[TKey] Gets the TKey with the specified key. Declaration public TValue this[TKey key] { get; } Parameters Type Name Description TKey key The key. Property Value Type Description TValue The TValue . Exceptions Type Condition System.InvalidOperationException Multiple matches found in collection or Key not found in collection Methods Add(TKey, TValue) Adds the specified key. Declaration public void Add(TKey key, TValue value) Parameters Type Name Description TKey key The key. TValue value The value. Exceptions Type Condition System.InvalidOperationException Item with same key already exists in collection Clear() Removes all keys and values from this instance. Declaration public void Clear() ContainsKey(TKey) Determines whether the collection contains the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description System.Boolean true if the collection contains the specified key; otherwise, false . Exceptions Type Condition System.InvalidOperationException Multiple matches found in collection GetHashCodeInternal(TKey) Gets the internal hash code used in the backing dictionary. Declaration protected virtual int GetHashCodeInternal(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description System.Int32 Remove(TKey) Removes the specified key. Declaration public bool Remove(TKey key) Parameters Type Name Description TKey key The key. Returns Type Description System.Boolean Exceptions Type Condition System.InvalidOperationException Multiple matches found in collection TryGetValue(TKey, out TValue) Tries to get a value by key. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key. TValue value The value. Returns Type Description System.Boolean"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Collections",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.Collections Classes DictionaryEx<TKey, TValue> A dictionary with support for: deep Equals (instead of ref comparison) deep GetHashCode (2 refs with the same values will return the same hash code). The default dictionary returns hash code based on reference. FileCollection A dictionary-based collection of File s. HashDictionaryInt<TKey, TValue> A dictionary which uses hashes generated from the key to store items in a backing dictionary. We may look at generating long hashes eventually if there are many collisions detected. KeyBasedCollection<TKey, TValue> A KeyBasedCollection<TKey, TValue> implementation with support for deep equality. ParagraphUnitCollection A KeyBasedCollection<TKey, TValue> of ParagraphUnit s. Adds support for setting the parent elements and additonal helper properties. SegmentPairCollection A collection of SegmentPair s. Adds support for indexing by segment number."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.KeyBasedCollection-2.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.KeyBasedCollection-2.html",
    "title": "Class KeyBasedCollection<TKey, TValue>",
    "keywords": "Class KeyBasedCollection<TKey, TValue> A KeyBasedCollection<TKey, TValue> implementation with support for deep equality. Inheritance System.Object KeyBasedCollection<TKey, TValue> FileCollection ParagraphUnitCollection SubContentCollection Implements System.IEquatable < KeyBasedCollection <TKey, TValue>> Namespace : Sdl.Core.Bcm.BcmModel.Collections Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class KeyBasedCollection<TKey, TValue> : KeyedCollection<TKey, TValue> Type Parameters Name Description TKey The key. TValue The value. Constructors KeyBasedCollection() Initializes a new instance of the KeyBasedCollection<TKey, TValue> class. Declaration protected KeyBasedCollection() KeyBasedCollection(Func<TValue, TKey>) Initializes a new instance of the KeyBasedCollection<TKey, TValue> class. Declaration public KeyBasedCollection(Func<TValue, TKey> keySelector) Parameters Type Name Description System.Func <TValue, TKey> keySelector The key selector. Fields KeySelector The key selector. Declaration protected Func<TValue, TKey> KeySelector Field Value Type Description System.Func <TValue, TKey> Methods Equals(KeyBasedCollection<TKey, TValue>) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(KeyBasedCollection<TKey, TValue> other) Parameters Type Name Description KeyBasedCollection <TKey, TValue> other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean ForEach(Action<TValue>) Executes an action over each element of the collection. Declaration public void ForEach(Action<TValue> action) Parameters Type Name Description System.Action <TValue> action The action. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. GetKeyForItem(TValue) When implemented in a derived class, extracts the key from the specified element. Declaration protected override TKey GetKeyForItem(TValue item) Parameters Type Name Description TValue item The element from which to extract the key. Returns Type Description TKey The key for the specified element. Implements System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.ParagraphUnitCollection.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.ParagraphUnitCollection.html",
    "title": "Class ParagraphUnitCollection",
    "keywords": "Class ParagraphUnitCollection A KeyBasedCollection<TKey, TValue> of ParagraphUnit s. Adds support for setting the parent elements and additonal helper properties. Inheritance System.Object KeyBasedCollection < System.String , ParagraphUnit > ParagraphUnitCollection Implements System.IEquatable < KeyBasedCollection < System.String , ParagraphUnit >> Inherited Members KeyBasedCollection<String, ParagraphUnit>.KeySelector KeyBasedCollection<String, ParagraphUnit>.ForEach(Action<ParagraphUnit>) KeyBasedCollection<String, ParagraphUnit>.Equals(KeyBasedCollection<String, ParagraphUnit>) KeyBasedCollection<String, ParagraphUnit>.Equals(Object) KeyBasedCollection<String, ParagraphUnit>.GetHashCode() KeyBasedCollection<String, ParagraphUnit>.GetKeyForItem(ParagraphUnit) Namespace : Sdl.Core.Bcm.BcmModel.Collections Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class ParagraphUnitCollection : KeyBasedCollection<string, ParagraphUnit> Constructors ParagraphUnitCollection() Initializes a new instance of the ParagraphUnitCollection class. Declaration public ParagraphUnitCollection() Properties AllSegmentPairs Gets all segment pairs. Declaration public IEnumerable<SegmentPair> AllSegmentPairs { get; } Property Value Type Description System.Collections.Generic.IEnumerable < SegmentPair > All segment pairs. ParentFile Gets or sets the parent file. Declaration public File ParentFile { get; set; } Property Value Type Description File The parent file. SegmentCount Gets the segment count. Declaration public int SegmentCount { get; } Property Value Type Description System.Int32 The segment count. Methods InsertItem(Int32, ParagraphUnit) Inserts an element into the System.Collections.ObjectModel.KeyedCollection`2 at the specified index. Declaration protected override void InsertItem(int index, ParagraphUnit item) Parameters Type Name Description System.Int32 index The zero-based index at which item should be inserted. ParagraphUnit item The object to insert. Implements System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.SegmentPairCollection.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Collections.SegmentPairCollection.html",
    "title": "Class SegmentPairCollection",
    "keywords": "Class SegmentPairCollection A collection of SegmentPair s. Adds support for indexing by segment number. Inheritance System.Object SegmentPairCollection Implements System.Collections.Generic.IEnumerable < SegmentPair > System.Collections.IEnumerable Namespace : Sdl.Core.Bcm.BcmModel.Collections Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class SegmentPairCollection : Object Constructors SegmentPairCollection(IEnumerable<SegmentPair>) Initializes a new instance of the SegmentPairCollection class. Declaration public SegmentPairCollection(IEnumerable<SegmentPair> enumerable) Parameters Type Name Description System.Collections.Generic.IEnumerable < SegmentPair > enumerable The enumerable. Properties Item[String] Gets the SegmentPair with the specified segment number. Declaration public SegmentPair this[string segmentNumber] { get; } Parameters Type Name Description System.String segmentNumber The segment number. Property Value Type Description SegmentPair The SegmentPair . Methods GetEnumerator() Returns an enumerator that iterates through the collection. Declaration public IEnumerator<SegmentPair> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < SegmentPair > An enumerator that can be used to iterate through the collection. Implements System.Collections.Generic.IEnumerable<> System.Collections.IEnumerable"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Common.BcmConst.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Common.BcmConst.html",
    "title": "Class BcmConst",
    "keywords": "Class BcmConst Public constants. Inheritance System.Object BcmConst Namespace : Sdl.Core.Bcm.BcmModel.Common Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class BcmConst : Object Fields CurrentBcmModelVersion The current BCM model version. Declaration public static readonly string CurrentBcmModelVersion Field Value Type Description System.String FrameworkOriginalParagraphUnitId Metadata key for storing the original ParagraphUnit ID, populated by the SDL Filter Framework. Declaration public const string FrameworkOriginalParagraphUnitId = \"frameworkOriginalParagraphUnitId\" Field Value Type Description System.String FrameworkOriginalTagId Metadata key for storing the original tag ID, populated by the SDL Filter Framework. Declaration public const string FrameworkOriginalTagId = \"frameworkOriginalTagId\" Field Value Type Description System.String KeepContextFromPreviousParagraph Metadata used for conversion from BCM back to native format. If this metadata is True , the same contexts are used. If False , new contexts are created from the BCM contexts. Declaration public const string KeepContextFromPreviousParagraph = \"_keepContextFromPreviousParagraph\" Field Value Type Description System.String"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Common.BcmModelValidation.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Common.BcmModelValidation.html",
    "title": "Class BcmModelValidation",
    "keywords": "Class BcmModelValidation Inheritance System.Object BcmModelValidation Namespace : Sdl.Core.Bcm.BcmModel.Common Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class BcmModelValidation : Object Fields ExcludeBaseTypes Declaration public static readonly IEnumerable<Type> ExcludeBaseTypes Field Value Type Description System.Collections.Generic.IEnumerable < System.Type >"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Common.BcmVisitor.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Common.BcmVisitor.html",
    "title": "Class BcmVisitor",
    "keywords": "Class BcmVisitor An abstract class using the Visitor pattern. Can be implemented for concrete processing of BCM documents. Inheritance System.Object BcmVisitor Namespace : Sdl.Core.Bcm.BcmModel.Common Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class BcmVisitor : Object Constructors BcmVisitor() Declaration protected BcmVisitor() Methods VisitCommentContainer(CommentContainer) Visits a CommentContainer instance. Declaration public abstract void VisitCommentContainer(CommentContainer commentContainer) Parameters Type Name Description CommentContainer commentContainer VisitFeedbackContainer(FeedbackContainer) Visits a FeedbackContainer instance. Declaration public abstract void VisitFeedbackContainer(FeedbackContainer feedbackContainer) Parameters Type Name Description FeedbackContainer feedbackContainer VisitLockedContentContainer(LockedContentContainer) Visits a LockedContentContainer instance. Declaration public abstract void VisitLockedContentContainer(LockedContentContainer lockedContentContainer) Parameters Type Name Description LockedContentContainer lockedContentContainer VisitParagraph(Paragraph) Visits a Paragraph instance. Declaration public abstract void VisitParagraph(Paragraph paragraph) Parameters Type Name Description Paragraph paragraph VisitPlaceholderTag(PlaceholderTag) Visits a PlaceholderTag instance. Declaration public abstract void VisitPlaceholderTag(PlaceholderTag tag) Parameters Type Name Description PlaceholderTag tag VisitRevisionContainer(RevisionContainer) Visits a RevisionContainer instance. Declaration public abstract void VisitRevisionContainer(RevisionContainer revisionContainer) Parameters Type Name Description RevisionContainer revisionContainer VisitSegment(Segment) Visits a Segment instance. Declaration public abstract void VisitSegment(Segment segment) Parameters Type Name Description Segment segment VisitStructure(StructureTag) Visits a StructureTag instance. Declaration public abstract void VisitStructure(StructureTag structureTag) Parameters Type Name Description StructureTag structureTag The structure tag. VisitTagPair(TagPair) Visits a StructureTag instance. Declaration public abstract void VisitTagPair(TagPair tagPair) Parameters Type Name Description TagPair tagPair VisitTerminologyContainer(TerminologyAnnotationContainer) Visits a TerminologyAnnotationContainer instance. Declaration public abstract void VisitTerminologyContainer(TerminologyAnnotationContainer terminologyAnnotation) Parameters Type Name Description TerminologyAnnotationContainer terminologyAnnotation VisitText(TextMarkup) Visits a TextMarkup instance. Declaration public abstract void VisitText(TextMarkup text) Parameters Type Name Description TextMarkup text"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Common.DefaultTranslationOrigin.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Common.DefaultTranslationOrigin.html",
    "title": "Class DefaultTranslationOrigin",
    "keywords": "Class DefaultTranslationOrigin This class holds the constants that represent the suggested default values to use for the TSdl.Core.Bcm.BcmModel.TranslationOrigin.OriginType attribute. Inheritance System.Object DefaultTranslationOrigin Namespace : Sdl.Core.Bcm.BcmModel.Common Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class DefaultTranslationOrigin : Object Fields AdaptiveMachineTranslation Adaptive machine translated content Declaration public const string AdaptiveMachineTranslation = \"amt\" Field Value Type Description System.String AutomatedAlignment The translated segment was created by an automated linguistic alignment of previously translated source and target content. Declaration public const string AutomatedAlignment = \"auto-aligned\" Field Value Type Description System.String AutomaticTranslation Adaptive machine translated content Declaration public const string AutomaticTranslation = \"automatic-translation\" Field Value Type Description System.String AutoPropagated The segment has been translated using AutoPropagation from internal matches. Declaration public const string AutoPropagated = \"auto-propagated\" Field Value Type Description System.String DocumentMatch Batch translation by applying a Context TM type tool like PerfectMatch(tm) Declaration public const string DocumentMatch = \"document-match\" Field Value Type Description System.String Interactive The segment has been manually adapted or translated from scratch. Declaration public const string Interactive = \"interactive\" Field Value Type Description System.String MachineTranslation Machine translated content Declaration public const string MachineTranslation = \"mt\" Field Value Type Description System.String NeuralMachineTranslation Adaptive machine translated content Declaration public const string NeuralMachineTranslation = \"nmt\" Field Value Type Description System.String NotTranslated The segment has not yet been translated. This is usually an empty segment. Declaration public const string NotTranslated = \"not-translated\" Field Value Type Description System.String ReverseAlignment The segment was updated by ReverseAlignment process. Declaration public const string ReverseAlignment = \"Retrofit\" Field Value Type Description System.String Source The segment has been translated by copying the source to the target. Declaration public const string Source = \"source\" Field Value Type Description System.String TranslationMemory Batch pre-translation using a fuzzy or 100% match Declaration public const string TranslationMemory = \"tm\" Field Value Type Description System.String Unknown The segment was translated by an unknown tool - usually from a third party provider. Declaration public const string Unknown = \"unknown\" Field Value Type Description System.String"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Common.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Common.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Common",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.Common Classes BcmConst Public constants. BcmModelValidation BcmVisitor An abstract class using the Visitor pattern. Can be implemented for concrete processing of BCM documents. DefaultTranslationOrigin This class holds the constants that represent the suggested default values to use for the TSdl.Core.Bcm.BcmModel.TranslationOrigin.OriginType attribute. ModelExtensions Extension methods. Interfaces ICloneable<T> Typed ICloneable interface."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Common.ICloneable-1.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Common.ICloneable-1.html",
    "title": "Interface ICloneable<T>",
    "keywords": "Interface ICloneable<T> Typed ICloneable interface. Namespace : Sdl.Core.Bcm.BcmModel.Common Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public interface ICloneable<out T> Type Parameters Name Description T Methods Clone() Clones this instance. Declaration T Clone() Returns Type Description T"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Common.ModelExtensions.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Common.ModelExtensions.html",
    "title": "Class ModelExtensions",
    "keywords": "Class ModelExtensions Extension methods. Inheritance System.Object ModelExtensions Namespace : Sdl.Core.Bcm.BcmModel.Common Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class ModelExtensions : Object Methods IsSequenceEqual<TSource>(IList<TSource>, IList<TSource>) Performs a deep comparison between two System.Collections.Generic.IList<> Declaration public static bool IsSequenceEqual<TSource>(this IList<TSource> first, IList<TSource> second) Parameters Type Name Description System.Collections.Generic.IList <TSource> first The first collection. System.Collections.Generic.IList <TSource> second The second collection. Returns Type Description System.Boolean True if the collections are deeply equal. Otherwise false. Type Parameters Name Description TSource The collection element type."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.ConfirmationLevel.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.ConfirmationLevel.html",
    "title": "Class ConfirmationLevel",
    "keywords": "Class ConfirmationLevel Different stages of translation and translation approval for a Segment . Inheritance System.Object ConfirmationLevel Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class ConfirmationLevel : Enum Fields ApprovedSignOff Translated content Approved at Sign-off. Declaration public const ConfirmationLevel ApprovedSignOff Field Value Type Description ConfirmationLevel ApprovedTranslation Translated content marked as Approved. Declaration public const ConfirmationLevel ApprovedTranslation Field Value Type Description ConfirmationLevel Draft Draft (edited) content. Declaration public const ConfirmationLevel Draft Field Value Type Description ConfirmationLevel NotTranslated Untranslated content. Declaration public const ConfirmationLevel NotTranslated Field Value Type Description ConfirmationLevel RejectedSignOff Translated content Rejected at Sign-off. Declaration public const ConfirmationLevel RejectedSignOff Field Value Type Description ConfirmationLevel RejectedTranslation Translated content marked as Rejected. Declaration public const ConfirmationLevel RejectedTranslation Field Value Type Description ConfirmationLevel Translated Translated content. Declaration public const ConfirmationLevel Translated Field Value Type Description ConfirmationLevel value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.DependencyFile.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.DependencyFile.html",
    "title": "Class DependencyFile",
    "keywords": "Class DependencyFile Files marked as dependencies for the BCM content. Used for conversion from and to native formats. Inheritance System.Object ExtensionDataContainer MetadataContainer DependencyFile Implements System.IEquatable < MetadataContainer > ICloneable < DependencyFile > System.IEquatable < DependencyFile > Inherited Members MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class DependencyFile : MetadataContainer, ICloneable<DependencyFile> Constructors DependencyFile() Declaration public DependencyFile() Properties EmbeddedContent Gets or sets the embedded content. Declaration public string EmbeddedContent { get; set; } Property Value Type Description System.String The embedded content. Remarks In the cases where the dependency file is stored inline, this will contain the B64-encoded ZIP archive of the dependency file FileId The id of the given file in the BCM document. This is used for multi-file sections in the BCM document and for matching the dependency section to the given file section in the BCM document Declaration public string FileId { get; set; } Property Value Type Description System.String FileName Gets or sets the name of the file. Declaration public string FileName { get; set; } Property Value Type Description System.String The name of the file. Id The DependencyFile Id. Declaration public string Id { get; set; } Property Value Type Description System.String Location Gets or sets the file location. Declaration public string Location { get; set; } Property Value Type Description System.String The file location. Provider Gets or sets the system providing the file. Declaration public string Provider { get; set; } Property Value Type Description System.String The system providing the file. Usage Gets or sets the purpose of the dependency file. Declaration public DependencyFileUsage Usage { get; set; } Property Value Type Description DependencyFileUsage The purpose of the dependency file. Methods Clone() Clones this instance. Declaration public DependencyFile Clone() Returns Type Description DependencyFile Equals(DependencyFile) Performs a deep-equals comparison. Declaration public bool Equals(DependencyFile other) Parameters Type Name Description DependencyFile other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MetadataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MetadataContainer.GetHashCode() Implements System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.DependencyFileUsage.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.DependencyFileUsage.html",
    "title": "Class DependencyFileUsage",
    "keywords": "Class DependencyFileUsage Defines the purpose of a DependencyFile . Inheritance System.Object DependencyFileUsage Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class DependencyFileUsage : Enum Fields Extraction Used during the extraction phase. Declaration public const DependencyFileUsage Extraction Field Value Type Description DependencyFileUsage Final Used or required for correct operation of the final (localized) file. Declaration public const DependencyFileUsage Final Field Value Type Description DependencyFileUsage Generation Used during the generate phase. Declaration public const DependencyFileUsage Generation Field Value Type Description DependencyFileUsage None Unknown or not specified. Declaration public const DependencyFileUsage None Field Value Type Description DependencyFileUsage value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Document.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Document.html",
    "title": "Class Document",
    "keywords": "Class Document The BCM root element. Inheritance System.Object ExtensionDataContainer MetadataContainer Document Implements System.IEquatable < MetadataContainer > ICloneable < Document > System.IEquatable < Document > Inherited Members MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class Document : MetadataContainer, ICloneable<Document> Constructors Document() Public constructor. Declaration public Document() Properties Files A collection of all the File s in this document. Declaration public FileCollection Files { get; set; } Property Value Type Description FileCollection Id The document ID. Uniquely identifies a BCM document. Declaration public string Id { get; set; } Property Value Type Description System.String IdGenerator Used for managing sequential numeric IDs of different elements. Declaration public IdGenerator IdGenerator { get; } Property Value Type Description IdGenerator ModelVersion The semantic version of the BCM used for creating this document. Declaration public string ModelVersion { get; } Property Value Type Description System.String Name The BCM document name. Declaration public string Name { get; set; } Property Value Type Description System.String SourceLanguageCode The source language code. Declaration public string SourceLanguageCode { get; set; } Property Value Type Description System.String Examples \"en-GB\" SourceLanguageName Gets or sets the source language display name. Declaration public string SourceLanguageName { get; set; } Property Value Type Description System.String The name of the source language. TargetLanguageCode The source language code. Declaration public string TargetLanguageCode { get; set; } Property Value Type Description System.String Examples \"de-DE\" TargetLanguageName Gets or sets the target language display name. Declaration public string TargetLanguageName { get; set; } Property Value Type Description System.String The name of the target language. Methods Clone() Deep-clones a Document . Declaration public Document Clone() Returns Type Description Document DeserializeFromString(String) Declaration public static Document DeserializeFromString(string json) Parameters Type Name Description System.String json Returns Type Description Document Equals(Document) Performs a deep-equals comparison. Declaration public bool Equals(Document other) Parameters Type Name Description Document other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MetadataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MetadataContainer.GetHashCode() Implements System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Exceptions.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Exceptions.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Exceptions",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.Exceptions Classes InvalidBcmDocumentException"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Exceptions.InvalidBcmDocumentException.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Exceptions.InvalidBcmDocumentException.html",
    "title": "Class InvalidBcmDocumentException",
    "keywords": "Class InvalidBcmDocumentException Inheritance System.Object InvalidBcmDocumentException Namespace : Sdl.Core.Bcm.BcmModel.Exceptions Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class InvalidBcmDocumentException : Exception Constructors InvalidBcmDocumentException(SerializationInfo, StreamingContext) Declaration protected InvalidBcmDocumentException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context InvalidBcmDocumentException(String) Declaration public InvalidBcmDocumentException(string message) Parameters Type Name Description System.String message"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.ExtensionDataContainer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.ExtensionDataContainer.html",
    "title": "Class ExtensionDataContainer",
    "keywords": "Class ExtensionDataContainer A Newtonsoft.Json.JsonExtensionDataAttribute object used as base for elements that need to preserve unrecognized data on deserialization. Inheritance System.Object ExtensionDataContainer AlignmentData LiftSpan SpanPairNode LocalizableSubContent MetadataContainer SegmentPair Term TermOrigin TermTranslation SegmentPosition SegmentRange Token Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class ExtensionDataContainer : Object Constructors ExtensionDataContainer() Declaration protected ExtensionDataContainer() Properties ExtensionData Preserves any unrecognized data upon deserialization from JSON. This data is serialized in its original format. Declaration public IDictionary<string, JToken> ExtensionData { get; set; } Property Value Type Description System.Collections.Generic.IDictionary < System.String , Newtonsoft.Json.Linq.JToken >"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.FeedbackContainer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.FeedbackContainer.html",
    "title": "Class FeedbackContainer",
    "keywords": "Class FeedbackContainer Holds feedback information created during the translation and review process. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer FeedbackContainer Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, Boolean>) MarkupDataContainer.GetAllChildren<T>(Func<T, Boolean>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(Int32, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.MoveToContainer(MarkupDataContainer, Int32, Int32, Int32) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.Item[Int32] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class FeedbackContainer : MarkupDataContainer, ICloneable<MarkupData> Remarks Used by the Translation Quality Assessment process(TQA). Constructors FeedbackContainer() Initializes a new instance of the FeedbackContainer class. Declaration public FeedbackContainer() FeedbackContainer(FeedbackType) Initializes a new instance of the FeedbackContainer class. Declaration public FeedbackContainer(FeedbackType feedbackType) Parameters Type Name Description FeedbackType feedbackType Type of the feedback. Properties Author Gets or sets the author. Declaration public string Author { get; set; } Property Value Type Description System.String The author. Category Gets or sets the custom category of this feedback. Declaration public string Category { get; set; } Property Value Type Description System.String The category. Comment Gets or sets the comment on this review feedback. Declaration public string Comment { get; set; } Property Value Type Description System.String The comment. CommentDefinitionId OBSOLETE Gets or sets the comment definition identifier. Declaration public int CommentDefinitionId { get; set; } Property Value Type Description System.Int32 The comment definition identifier. DocumentCategory Gets or sets the document category. Declaration public string DocumentCategory { get; set; } Property Value Type Description System.String The document category. FeedbackType Gets or sets the type of the feedback. Declaration public FeedbackType FeedbackType { get; set; } Property Value Type Description FeedbackType The type of the feedback. Origin Gets or sets the feedback origin. Example values: \"auto-filled\", \"auto-categorized\", \"interactive\" Declaration public string Origin { get; set; } Property Value Type Description System.String ReplacementId Gets or sets the replacement identifier. Declaration public string ReplacementId { get; set; } Property Value Type Description System.String The replacement identifier. Remarks Id which is used for identifying TQA replacements (replacing an existing piece of markup with new markup). Both original and new markup (adjacent FeedbackDeleted and FeedbackAdded markers) will contain an identical ReplacementId GUID in their properties indicating it is a replacement. Severity Gets or sets the custom severity. Declaration public string Severity { get; set; } Property Value Type Description System.String The custom severity. Timestamp Gets or sets the creation date. Declaration public Nullable<DateTime> Timestamp { get; set; } Property Value Type Description System.Nullable < System.DateTime > The creation date. Type Gets or sets the custom feedback type. Declaration protected override string Type { get; set; } Property Value Type Description System.String The feedback type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public FeedbackContainer Clone() Returns Type Description FeedbackContainer A deep clone of this instance. Equals(MarkupData) Performs a deep equals comparison. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other The other MarkupData used for comparison.. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Overrides MarkupDataContainer.Equals(MarkupData) Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MarkupDataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MarkupDataContainer.GetHashCode() UniqueClone() Clones this instance with a new unique ID. Declaration public FeedbackContainer UniqueClone() Returns Type Description FeedbackContainer A deep clone with a new unique ID. Implements System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.FeedbackType.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.FeedbackType.html",
    "title": "Class FeedbackType",
    "keywords": "Class FeedbackType Types of feedback changes created during the translation/review process. Inheritance System.Object FeedbackType Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class FeedbackType : Enum Fields Added Added content. Declaration public const FeedbackType Added Field Value Type Description FeedbackType Comment A feedback comment was added. Declaration public const FeedbackType Comment Field Value Type Description FeedbackType Deleted Deleted content. Declaration public const FeedbackType Deleted Field Value Type Description FeedbackType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.File.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.File.html",
    "title": "Class File",
    "keywords": "Class File BCM data extracted from a native file. Inheritance System.Object ExtensionDataContainer MetadataContainer File Implements System.IEquatable < MetadataContainer > ICloneable < File > System.IEquatable < File > Inherited Members MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class File : MetadataContainer, ICloneable<File> Constructors File() Public constructor. Declaration public File() File(String) Declaration public File(string Id) Parameters Type Name Description System.String Id Properties CommentDefinitionIds IDs of CommentDefinition used as file-level comments. Declaration public List<int> CommentDefinitionIds { get; set; } Property Value Type Description System.Collections.Generic.List < System.Int32 > DependencyFiles Dependency files used for converting to and from native format. Declaration public List<DependencyFile> DependencyFiles { get; set; } Property Value Type Description System.Collections.Generic.List < DependencyFile > FileTypeDefinitionId The ID of the filter used for converting the file from native format. Declaration public string FileTypeDefinitionId { get; set; } Property Value Type Description System.String Id Gets or sets the identifier. Declaration public string Id { get; set; } Property Value Type Description System.String The identifier. IdGenerator Gets or sets the IdGenerator used for generating sequential IDs./> Declaration public IdGenerator IdGenerator { get; set; } Property Value Type Description IdGenerator The identifier generator. OriginalEncoding Gets or sets the original encoding. Declaration public string OriginalEncoding { get; set; } Property Value Type Description System.String The original encoding. OriginalFileName The name of the native file from which this File was constructed. Declaration public string OriginalFileName { get; set; } Property Value Type Description System.String ParagraphUnits A collection of all the ParagraphUnit elements in this File . Declaration public ParagraphUnitCollection ParagraphUnits { get; set; } Property Value Type Description ParagraphUnitCollection Parent The parent Document of this File . Declaration public Document Parent { get; set; } Property Value Type Description Document PreferredTargetEncoding Gets or sets the preferred target encoding. Declaration public string PreferredTargetEncoding { get; set; } Property Value Type Description System.String The preferred target encoding. Skeleton The FileSkeleton holding all the structure element data referenced in this File . Declaration public FileSkeleton Skeleton { get; set; } Property Value Type Description FileSkeleton Methods Clone() Clones this instance. Declaration public File Clone() Returns Type Description File A deep clone of this instance. Equals(File) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(File other) Parameters Type Name Description File other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MetadataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MetadataContainer.GetHashCode() ShouldSerializeCommentDefinitionIds() Used by JSON.NET serializer. Declaration public bool ShouldSerializeCommentDefinitionIds() Returns Type Description System.Boolean True if the CommentDefinitionIds property should be serialized. ShouldSerializeDependencyFiles() Used by JSON.NET serializer. Declaration public bool ShouldSerializeDependencyFiles() Returns Type Description System.Boolean True if the DependencyFiles property should be serialized. Implements System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.FileMetaDataKeys.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.FileMetaDataKeys.html",
    "title": "Class FileMetaDataKeys",
    "keywords": "Class FileMetaDataKeys Constants used for File metadata. Inheritance System.Object FileMetaDataKeys Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class FileMetaDataKeys : Object Fields ContextFileLocation File level metadata containing the context file location. Declaration public const string ContextFileLocation = \"SDL:ContextFileLocation\" Field Value Type Description System.String"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Fragment.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Fragment.html",
    "title": "Class Fragment",
    "keywords": "Class Fragment Class representing an independent fragment (slice) of a BCM Document . Inheritance System.Object ExtensionDataContainer MetadataContainer Fragment Implements System.IEquatable < MetadataContainer > System.IEquatable < Fragment > ICloneable < Fragment > Inherited Members MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class Fragment : MetadataContainer, ICloneable<Fragment> Constructors Fragment() Initializes a new instance of the Fragment class. Declaration public Fragment() Properties CommentDefinitionIds Gets or sets the list of CommentDefinition IDs associated with this fragment. Declaration public List<int> CommentDefinitionIds { get; set; } Property Value Type Description System.Collections.Generic.List < System.Int32 > The list of CommentDefinition IDs associated with this fragment. ContextList Gets or sets the list of Context IDs associated with this fragment. Declaration public IList<int> ContextList { get; set; } Property Value Type Description System.Collections.Generic.IList < System.Int32 > The list of Context IDs associated with this fragment.. DocumentId Gets or sets the document identifier. Declaration public string DocumentId { get; set; } Property Value Type Description System.String The document identifier which uniquely identifies this BCM Fragment . Index The index in the source Document from where this fragment was extracted. Declaration public Nullable<int> Index { get; set; } Property Value Type Description System.Nullable < System.Int32 > The index in the source Document from where this fragment was extracted. Skeleton Gets or sets the File skeleton. Declaration public FileSkeleton Skeleton { get; set; } Property Value Type Description FileSkeleton The file skeleton. SourceContent Gets or sets the source content of the BCM fragment. Declaration public MarkupData SourceContent { get; set; } Property Value Type Description MarkupData The source content of the Fragment. SourceLanguageCode Gets or sets the source language code. Declaration public string SourceLanguageCode { get; set; } Property Value Type Description System.String The source language code. StructureContextId Gets or sets the structure Context associated with this fragment. Declaration public int StructureContextId { get; set; } Property Value Type Description System.Int32 The structure Context associated with this fragment. TargetContent Gets or sets the target content of the BCM fragment. Declaration public MarkupData TargetContent { get; set; } Property Value Type Description MarkupData The target content of the BCM fragment. TargetLanguageCode Gets or sets the target language code. Declaration public string TargetLanguageCode { get; set; } Property Value Type Description System.String The target language code. Methods Clone() Clones this instance. Declaration public Fragment Clone() Returns Type Description Fragment A deep clone of this instance. Equals(Fragment) Performs a deep-equals comparison. Declaration public bool Equals(Fragment other) Parameters Type Name Description Fragment other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MetadataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MetadataContainer.GetHashCode() ShouldSerializeCommentDefinitionIds() Used by JSON.NET serialization. Declaration public bool ShouldSerializeCommentDefinitionIds() Returns Type Description System.Boolean True if the CommentDefinitionIds should be serialized; otherwise False ShouldSerializeContextList() Used by JSON.NET serialization. Declaration public bool ShouldSerializeContextList() Returns Type Description System.Boolean True if the ContextList should be serialized; otherwise False ShouldSerializeSkeleton() Used by JSON.NET serialization. Declaration public bool ShouldSerializeSkeleton() Returns Type Description System.Boolean True if the Skeleton should be serialized; otherwise False ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Implements System.IEquatable<> System.IEquatable<> ICloneable<T>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel Classes ConfirmationLevel Different stages of translation and translation approval for a Segment . DependencyFile Files marked as dependencies for the BCM content. Used for conversion from and to native formats. DependencyFileUsage Defines the purpose of a DependencyFile . Document The BCM root element. ExtensionDataContainer A Newtonsoft.Json.JsonExtensionDataAttribute object used as base for elements that need to preserve unrecognized data on deserialization. FeedbackContainer Holds feedback information created during the translation and review process. FeedbackType Types of feedback changes created during the translation/review process. File BCM data extracted from a native file. FileMetaDataKeys Constants used for File metadata. Fragment Class representing an independent fragment (slice) of a BCM Document . LocalizableSubContent Subcontent of a particular BCM content element. LockedContentContainer Marks content that is locked for editing. MarkupData Abstract entity representing an item that can be included inside a MarkupDataContainer . Examples: TextMarkup , PlaceholderTag , TagPair . MarkupDataContainer A MarkupData element that can hold other MarkupData elements. MetadataContainer An object that contains metadata in the form of a DictionaryEx<TKey, TValue> . Paragraph A MarkupDataContainer containing the source or target content of a ParagraphUnit . ParagraphUnit The main element of translatable content. Contains a source and target Paragraph element. ParagraphUnitMetadataKeys Constants with ParagraphUnit related metadata keys. PlaceholderTag A tag with no translatable content. RevisionContainer Marks revisions to the translated content. RevisionType Types of RevisionContainer . Segment Basic unit of translatable content. SegmentationHint Information on how specific tags should be segmented. SegmentMetaDataKeys Constants for Segment metadata. SegmentPair Class grouping together the source and equivalent target Segment . StructureTag A tag that is used for document structure only and has no translatable content. TagPair A tag composed of a start and and end tag. Can contain other MarkupData elements. TagPairMetaDataKeys Constants used a keys for TagPair metadata. TextContextMatchLevel Used with textual context matches to indicate the level of matching. TextMarkup A MarkupData containing plain text. TranslationOrigin Contains information on the origin of translation. TranslationOriginMetaData Metadata keys used for TranslationOrigin metadata. Interfaces ISkeletonItemReference<T> Marks a class as having its definition in the FileSkeleton ."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.ISkeletonItemReference-1.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.ISkeletonItemReference-1.html",
    "title": "Interface ISkeletonItemReference<T>",
    "keywords": "Interface ISkeletonItemReference<T> Marks a class as having its definition in the FileSkeleton . Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public interface ISkeletonItemReference<out T> where T : SkeletonItem Type Parameters Name Description T Type parameter. Should be an item from the FileSkeleton . Properties Definition Gets the definition of this item from the FileSkeleton . Declaration T Definition { get; } Property Value Type Description T The definition of this item from the FileSkeleton ."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.LocalizableSubContent.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.LocalizableSubContent.html",
    "title": "Class LocalizableSubContent",
    "keywords": "Class LocalizableSubContent Subcontent of a particular BCM content element. Inheritance System.Object ExtensionDataContainer LocalizableSubContent Implements ICloneable < LocalizableSubContent > Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class LocalizableSubContent : ExtensionDataContainer, ICloneable<LocalizableSubContent> Constructors LocalizableSubContent() Declaration public LocalizableSubContent() Properties Length Gets or sets the content length. Declaration public int Length { get; set; } Property Value Type Description System.Int32 The content length. ParagraphUnitId Gets or sets the ParagraphUnit Id holding the content marked by this LocalizableSubContent reference. Declaration public string ParagraphUnitId { get; set; } Property Value Type Description System.String The ParagraphUnit Id holding the content marked by this LocalizableSubContent reference. SourceTagContentOffset Gets or sets the offset in the source tag from which the content was extracted. Declaration public int SourceTagContentOffset { get; set; } Property Value Type Description System.Int32 The offset in the source tag from which the content was extracted. Methods Clone() Clones this instance. Declaration public LocalizableSubContent Clone() Returns Type Description LocalizableSubContent A deep clone of this instance. Equals(LocalizableSubContent) Performs a deep-equals comparison. Declaration protected bool Equals(LocalizableSubContent other) Parameters Type Name Description LocalizableSubContent other The other item used for comparison. Returns Type Description System.Boolean True if the items are deeply equal; False otherwise. Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Implements ICloneable<T>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.LockedContentContainer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.LockedContentContainer.html",
    "title": "Class LockedContentContainer",
    "keywords": "Class LockedContentContainer Marks content that is locked for editing. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer LockedContentContainer Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, Boolean>) MarkupDataContainer.GetAllChildren<T>(Func<T, Boolean>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(Int32, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.Equals(MarkupData) MarkupDataContainer.MoveToContainer(MarkupDataContainer, Int32, Int32, Int32) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.Equals(Object) MarkupDataContainer.GetHashCode() MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.Item[Int32] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class LockedContentContainer : MarkupDataContainer, ICloneable<MarkupData> Constructors LockedContentContainer() Declaration public LockedContentContainer() Properties Type Gets the type of MarkupData . Declaration protected override string Type { get; set; } Property Value Type Description System.String The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public LockedContentContainer Clone() Returns Type Description LockedContentContainer A deep clone of this instance. UniqueClone() Clones this instance, setting a new unique Id. Declaration public LockedContentContainer UniqueClone() Returns Type Description LockedContentContainer A deep clone of this instance, with a new unique Id. Implements System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.MarkupData.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.MarkupData.html",
    "title": "Class MarkupData",
    "keywords": "Class MarkupData Abstract entity representing an item that can be included inside a MarkupDataContainer . Examples: TextMarkup , PlaceholderTag , TagPair . Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer PlaceholderTag StructureTag TextMarkup Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > Inherited Members MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class MarkupData : MetadataContainer, ICloneable<MarkupData> Remarks Inheritors of MarkupData should not implement themselves System.IEquatable<> , but should override MarkupData equality. Constructors MarkupData() Initializes a new instance of the MarkupData class. Declaration protected MarkupData() MarkupData(String) Initializes a new instance of the MarkupData class. Declaration protected MarkupData(string id) Parameters Type Name Description System.String id The identifier. Properties Ancestors This item's MarkupDataContainer ancestors, in ascending order. Declaration public IEnumerable<MarkupDataContainer> Ancestors { get; } Property Value Type Description System.Collections.Generic.IEnumerable < MarkupDataContainer > Id Markup data unique id (GUID). Declaration public string Id { get; set; } Property Value Type Description System.String IndexInParent The index of this item in the parent MarkupDataContainer . -1 if it doesn't have a parent. Declaration public int IndexInParent { get; } Property Value Type Description System.Int32 IsContainer True if this MarkupData is a container. Otherwise false. Declaration public bool IsContainer { get; } Property Value Type Description System.Boolean Parent The MarkupDataContainer parent container. Declaration public MarkupDataContainer Parent { get; set; } Property Value Type Description MarkupDataContainer ParentFragment The Fragment containing this item. Declaration public Fragment ParentFragment { get; } Property Value Type Description Fragment ParentParagraph The Paragraph containing this item. Declaration public Paragraph ParentParagraph { get; } Property Value Type Description Paragraph ParentParagraphUnit The ParagraphUnit containing this item. Declaration public virtual ParagraphUnit ParentParagraphUnit { get; set; } Property Value Type Description ParagraphUnit ParentSegment The Segment containing this item. Null if the item isn't inside of a Segment. Declaration public Segment ParentSegment { get; } Property Value Type Description Segment Type Gets or sets the type. Should be implement in derived classes to uniquely identify the type of MarkupData on deserialization. Declaration protected abstract string Type { get; set; } Property Value Type Description System.String The type. Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public abstract void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Clone() Clones the item to a new MarkupData . Declaration public virtual MarkupData Clone() Returns Type Description MarkupData Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public virtual bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MetadataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MetadataContainer.GetHashCode() UniqueClone() Creates clone of the current object, with a new unique Id. Declaration public virtual MarkupData UniqueClone() Returns Type Description MarkupData A clone with a new unique Id. Implements System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.MarkupDataContainer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.MarkupDataContainer.html",
    "title": "Class MarkupDataContainer",
    "keywords": "Class MarkupDataContainer A MarkupData element that can hold other MarkupData elements. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer AnnotationContainer FeedbackContainer LockedContentContainer Paragraph RevisionContainer Segment TagPair Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > Inherited Members MarkupData.AcceptVisitor(BcmVisitor) MarkupData.Id MarkupData.Type MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class MarkupDataContainer : MarkupData, ICloneable<MarkupData> Constructors MarkupDataContainer() Initializes a new instance of the MarkupDataContainer class. Declaration protected MarkupDataContainer() MarkupDataContainer(String) Initializes a new instance of the MarkupDataContainer class. Declaration protected MarkupDataContainer(string id) Parameters Type Name Description System.String id The identifier. Fields AutoClonedTagPairKey Metadata key, marking thi instance as cloned (duplicated) during conversion from native formats. Declaration public const string AutoClonedTagPairKey = \"SDL:AutoCloned\" Field Value Type Description System.String Properties AllSubItems All the MarkupData items in the subtree, in depth-first order. Declaration public IEnumerable<MarkupData> AllSubItems { get; } Property Value Type Description System.Collections.Generic.IEnumerable < MarkupData > Children The container's direct children. Declaration public IReadOnlyCollection<MarkupData> Children { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < MarkupData > Count Gets the number of children of this container. Declaration public int Count { get; } Property Value Type Description System.Int32 The number of children of this container. Item[Int32] Gets or sets the MarkupData at the specified index. Declaration public MarkupData this[int index] { get; set; } Parameters Type Name Description System.Int32 index The index. Property Value Type Description MarkupData The MarkupData . Methods Add(MarkupData) Adds a new MarkupData to the container. Declaration public MarkupDataContainer Add(MarkupData markupData) Parameters Type Name Description MarkupData markupData The item to be added. Returns Type Description MarkupDataContainer The container after the change. Add(IEnumerable<MarkupData>) Adds a new MarkupData to the container. Declaration public MarkupDataContainer Add(IEnumerable<MarkupData> range) Parameters Type Name Description System.Collections.Generic.IEnumerable < MarkupData > range The range of MarkupData items to be added. Returns Type Description MarkupDataContainer The container after the change. Clear() Removes all the items from this container. Sets the previous children Parent property to null. Declaration public void Clear() Clone() Clones the item to a new MarkupData . Declaration public override MarkupData Clone() Returns Type Description MarkupData A deep clone of this instance. Overrides MarkupData.Clone() CloneWithoutChildren() Creates a clone of this instance, without any children elements. Declaration public virtual MarkupDataContainer CloneWithoutChildren() Returns Type Description MarkupDataContainer A clone of this instance, without any children elements. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Overrides MarkupData.Equals(MarkupData) Equals(MarkupDataContainer) Equalses the specified other. Declaration public virtual bool Equals(MarkupDataContainer other) Parameters Type Name Description MarkupDataContainer other The other. Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MarkupData.Equals(Object) GetAllChildren(Func<MarkupData, Boolean>) Finds all the MarkupData items in the subtree which satisfy a specific condition, in depth-first order. Declaration public IEnumerable<MarkupData> GetAllChildren(Func<MarkupData, bool> condition) Parameters Type Name Description System.Func < MarkupData , System.Boolean > condition Returns Type Description System.Collections.Generic.IEnumerable < MarkupData > GetAllChildren<T>(Func<T, Boolean>) Finds all the MarkupData items in the subtree which satisfy a specific condition, in depth-first order. Declaration public IEnumerable<T> GetAllChildren<T>(Func<T, bool> condition) where T : MarkupData Parameters Type Name Description System.Func <T, System.Boolean > condition Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T GetEnumerator() Gets an System.Collections.Generic.IEnumerator<> for the container's children. Declaration public IEnumerator<MarkupData> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < MarkupData > An System.Collections.Generic.IEnumerator<> instance enumerating the container's children. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MarkupData.GetHashCode() Insert(Int32, MarkupData) Inserts a new MarkupData into the container. Declaration public MarkupDataContainer Insert(int index, MarkupData markupData) Parameters Type Name Description System.Int32 index The position where the item should be inserted. MarkupData markupData The item to be inserted. Returns Type Description MarkupDataContainer The container after the change. MoveToContainer(MarkupDataContainer, Int32, Int32, Int32) Moves the children of this container to another MarkupDataContainer instance. Declaration public void MoveToContainer(MarkupDataContainer target, int sourceIndex, int targetIndex, int count) Parameters Type Name Description MarkupDataContainer target The target MarkupDataContainer . System.Int32 sourceIndex Index in the source container, from where to start moving elements. System.Int32 targetIndex Index in the target container, where the elements should be inserted. System.Int32 count Number of elements to be moved. OnDeserialized() Declaration protected virtual void OnDeserialized() Remove(MarkupData) Removes a MarkupData item from the container. Declaration public MarkupDataContainer Remove(MarkupData markupData) Parameters Type Name Description MarkupData markupData The item to be removed. Returns Type Description MarkupDataContainer The container after the changes. ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. UniqueClone() Creates clone of the current object, with a new unique Id. Declaration public override MarkupData UniqueClone() Returns Type Description MarkupData A clone with a new unique Id. Overrides MarkupData.UniqueClone() Implements System.IEquatable<> ICloneable<T> System.IEquatable<> See Also MarkupData"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.MetadataContainer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.MetadataContainer.html",
    "title": "Class MetadataContainer",
    "keywords": "Class MetadataContainer An object that contains metadata in the form of a DictionaryEx<TKey, TValue> . Inheritance System.Object ExtensionDataContainer MetadataContainer DependencyFile Document File Fragment MarkupData ParagraphUnit FileSkeleton SkeletonItem TranslationOrigin Implements System.IEquatable < MetadataContainer > Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class MetadataContainer : ExtensionDataContainer Constructors MetadataContainer() Declaration protected MetadataContainer() Properties Metadata Gets or sets the metadata. Declaration public DictionaryEx<string, string> Metadata { get; set; } Property Value Type Description DictionaryEx < System.String , System.String > The metadata. Methods Equals(MetadataContainer) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MetadataContainer other) Parameters Type Name Description MetadataContainer other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. GetMetadata(String) Gets the metadata. Declaration public string GetMetadata(string key) Parameters Type Name Description System.String key The metadata key. Returns Type Description System.String The metadata value; or null if the key was not found. SetMetadata(String, String) Sets a metadata value. Declaration public void SetMetadata(string key, string value) Parameters Type Name Description System.String key The key. System.String value The value. ShouldSerialize_metadata() Needed for JSON serialization. Declaration public bool ShouldSerialize_metadata() Returns Type Description System.Boolean True if this instance should be serialized; otherwise False . Implements System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Paragraph.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Paragraph.html",
    "title": "Class Paragraph",
    "keywords": "Class Paragraph A MarkupDataContainer containing the source or target content of a ParagraphUnit . Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer Paragraph Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, Boolean>) MarkupDataContainer.GetAllChildren<T>(Func<T, Boolean>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(Int32, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.Equals(MarkupData) MarkupDataContainer.MoveToContainer(MarkupDataContainer, Int32, Int32, Int32) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.Equals(Object) MarkupDataContainer.GetHashCode() MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.Item[Int32] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class Paragraph : MarkupDataContainer, ICloneable<MarkupData> Constructors Paragraph() Initializes a new instance of the Paragraph class. Declaration public Paragraph() Paragraph(Segment) Initializes a new instance of the Paragraph class with a particular child Segment . Declaration public Paragraph(Segment segment) Parameters Type Name Description Segment segment The Segment to be added as a child to this instance. Paragraph(String) Initializes a new instance of the Paragraph class. Declaration public Paragraph(string id) Parameters Type Name Description System.String id The identifier. Properties ParentParagraphUnit The ParagraphUnit containing this item. Declaration public override ParagraphUnit ParentParagraphUnit { get; set; } Property Value Type Description ParagraphUnit Overrides MarkupData.ParentParagraphUnit Type Gets the type of MarkupData . Declaration protected override string Type { get; set; } Property Value Type Description System.String The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public Paragraph Clone() Returns Type Description Paragraph A deep clone of this instance. UniqueClone() Clones this instance, assigning a new unique Id. Declaration public Paragraph UniqueClone() Returns Type Description Paragraph A deep clone of this instance, with a new unique Id. Implements System.IEquatable<> ICloneable<T> System.IEquatable<> See Also MarkupDataContainer"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.ParagraphUnit.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.ParagraphUnit.html",
    "title": "Class ParagraphUnit",
    "keywords": "Class ParagraphUnit The main element of translatable content. Contains a source and target Paragraph element. Inheritance System.Object ExtensionDataContainer MetadataContainer ParagraphUnit Implements System.IEquatable < MetadataContainer > ICloneable < ParagraphUnit > System.IEquatable < ParagraphUnit > Inherited Members MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class ParagraphUnit : MetadataContainer, ICloneable<ParagraphUnit> Constructors ParagraphUnit() Initializes a new instance of the ParagraphUnit class. Declaration public ParagraphUnit() Properties CommentDefinitionIds Gets or sets the list of CommentDefinition IDs. Declaration public List<int> CommentDefinitionIds { get; set; } Property Value Type Description System.Collections.Generic.List < System.Int32 > The list of CommentDefinition IDs. Remarks This holds any ParagraphUnit level comments. ContextList Gets or sets the list of Context IDs associated with this instance. Declaration public IList<int> ContextList { get; set; } Property Value Type Description System.Collections.Generic.IList < System.Int32 > The list of Context IDs associated with this instance. Id Gets or sets the identifier. Declaration public string Id { get; set; } Property Value Type Description System.String The identifier. Index Gets or sets the index of this instance in the ParentFile . Declaration public int Index { get; set; } Property Value Type Description System.Int32 The index of this instance in the ParentFile . IsLocked Gets or sets a value indicating whether this instance is locked. Declaration public bool IsLocked { get; set; } Property Value Type Description System.Boolean true if this instance is locked; otherwise, false . IsStructure Gets or sets a value indicating whether this instance is a structure ParagraphUnit . Declaration public bool IsStructure { get; set; } Property Value Type Description System.Boolean true if this instance is a structure ParagraphUnit ; otherwise, false . Remarks A structure ParagraphUnit is not usually used as translatable content. ParentFile Gets or sets the parent File . Declaration public File ParentFile { get; set; } Property Value Type Description File The parent File . ParentFileId Gets or sets the parent File identifier. Declaration public string ParentFileId { get; set; } Property Value Type Description System.String The parent File identifier. SegmentPairs Gets all the source and target Segment in this instance, paired as SegmentPair elements. Declaration public SegmentPairCollection SegmentPairs { get; } Property Value Type Description SegmentPairCollection The segment pairs. Source Gets or sets the source Paragraph . Declaration public Paragraph Source { get; set; } Property Value Type Description Paragraph The source Paragraph . StructureContextId Gets or sets the id of the structure Context . Declaration public int StructureContextId { get; set; } Property Value Type Description System.Int32 The id of the structure Context . Target Gets or sets the target Paragraph . Declaration public Paragraph Target { get; set; } Property Value Type Description Paragraph The target Paragraph . Methods Clone() Clones this instance. Declaration public ParagraphUnit Clone() Returns Type Description ParagraphUnit A deep clone of this instance. Equals(ParagraphUnit) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ParagraphUnit other) Parameters Type Name Description ParagraphUnit other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MetadataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MetadataContainer.GetHashCode() ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Implements System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.ParagraphUnitMetadataKeys.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.ParagraphUnitMetadataKeys.html",
    "title": "Class ParagraphUnitMetadataKeys",
    "keywords": "Class ParagraphUnitMetadataKeys Constants with ParagraphUnit related metadata keys. Inheritance System.Object ParagraphUnitMetadataKeys Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class ParagraphUnitMetadataKeys : Object Fields FrameworkOriginalParagraphUnitId The original paragraph unit identifier used by the SDL Filter Framework. Declaration public const string FrameworkOriginalParagraphUnitId = \"frameworkOriginalParagraphUnitId\" Field Value Type Description System.String"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.AbstractPartialBcmSerializer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.AbstractPartialBcmSerializer.html",
    "title": "Class AbstractPartialBcmSerializer",
    "keywords": "Class AbstractPartialBcmSerializer Inheritance System.Object AbstractPartialBcmSerializer InMemoryBcmSerializer TempFileBasedBcmSerializer Implements IPartialBcmSerializer System.IDisposable Namespace : Sdl.Core.Bcm.BcmModel.PartialSerialization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class AbstractPartialBcmSerializer : Object, IPartialBcmSerializer Constructors AbstractPartialBcmSerializer() Declaration protected AbstractPartialBcmSerializer() Methods AddFile(File) Declaration public abstract void AddFile(File file) Parameters Type Name Description File file DeleteFile(Int32) Declaration public abstract void DeleteFile(int index) Parameters Type Name Description System.Int32 index DeleteFile(String) Declaration public abstract void DeleteFile(string id) Parameters Type Name Description System.String id Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected abstract void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing GetDocumentWithoutFiles() Declaration public abstract Document GetDocumentWithoutFiles() Returns Type Description Document GetFileCount() Declaration public abstract int GetFileCount() Returns Type Description System.Int32 GetFileIds() Declaration public abstract IReadOnlyList<string> GetFileIds() Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > GetFileSerializer(String) Declaration public abstract IPartialFileSerializer GetFileSerializer(string fileId) Parameters Type Name Description System.String fileId Returns Type Description IPartialFileSerializer InsertFile(Int32, File) Declaration public abstract void InsertFile(int index, File file) Parameters Type Name Description System.Int32 index File file SaveAsJson(Stream) Declaration public void SaveAsJson(Stream stream) Parameters Type Name Description System.IO.Stream stream SaveAsJson(TextWriter) Declaration public abstract void SaveAsJson(TextWriter textWriter) Parameters Type Name Description System.IO.TextWriter textWriter SaveAsJson(String) Declaration public void SaveAsJson(string filePath) Parameters Type Name Description System.String filePath Implements IPartialBcmSerializer System.IDisposable"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization Classes AbstractPartialBcmSerializer PartialBcmSerializerFactory Interfaces IPartialBcmSerializer Bcm serialization interface that allows for not holding the whole bcm document in memory IPartialFileSerializer Bcm file serialization interface that allows for not holding the full file in memory"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory Classes InMemoryBcmSerializer"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory.InMemoryBcmSerializer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory.InMemoryBcmSerializer.html",
    "title": "Class InMemoryBcmSerializer",
    "keywords": "Class InMemoryBcmSerializer Inheritance System.Object AbstractPartialBcmSerializer InMemoryBcmSerializer Implements IPartialBcmSerializer System.IDisposable Inherited Members AbstractPartialBcmSerializer.SaveAsJson(String) AbstractPartialBcmSerializer.SaveAsJson(Stream) AbstractPartialBcmSerializer.Dispose() Namespace : Sdl.Core.Bcm.BcmModel.PartialSerialization.InMemory Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class InMemoryBcmSerializer : AbstractPartialBcmSerializer, IPartialBcmSerializer Constructors InMemoryBcmSerializer() New empty document Declaration public InMemoryBcmSerializer() InMemoryBcmSerializer(Document) Declaration public InMemoryBcmSerializer(Document fullDocument) Parameters Type Name Description Document fullDocument InMemoryBcmSerializer(String, Boolean) Declaration public InMemoryBcmSerializer(string filePath, bool deleteFile) Parameters Type Name Description System.String filePath System.Boolean deleteFile Methods AddFile(File) Declaration public override void AddFile(File file) Parameters Type Name Description File file Overrides AbstractPartialBcmSerializer.AddFile(File) DeleteFile(Int32) Declaration public override void DeleteFile(int index) Parameters Type Name Description System.Int32 index Overrides AbstractPartialBcmSerializer.DeleteFile(Int32) DeleteFile(String) Declaration public override void DeleteFile(string id) Parameters Type Name Description System.String id Overrides AbstractPartialBcmSerializer.DeleteFile(String) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides AbstractPartialBcmSerializer.Dispose(Boolean) ExtractDocument() Declaration public Document ExtractDocument() Returns Type Description Document GetDocumentWithoutFiles() Declaration public override Document GetDocumentWithoutFiles() Returns Type Description Document Overrides AbstractPartialBcmSerializer.GetDocumentWithoutFiles() GetFileCount() Declaration public override int GetFileCount() Returns Type Description System.Int32 Overrides AbstractPartialBcmSerializer.GetFileCount() GetFileIds() Declaration public override IReadOnlyList<string> GetFileIds() Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > Overrides AbstractPartialBcmSerializer.GetFileIds() GetFileSerializer(String) Declaration public override IPartialFileSerializer GetFileSerializer(string fileId) Parameters Type Name Description System.String fileId Returns Type Description IPartialFileSerializer Overrides AbstractPartialBcmSerializer.GetFileSerializer(String) InsertFile(Int32, File) Declaration public override void InsertFile(int index, File file) Parameters Type Name Description System.Int32 index File file Overrides AbstractPartialBcmSerializer.InsertFile(Int32, File) SaveAsJson(TextWriter) Declaration public override void SaveAsJson(TextWriter textWriter) Parameters Type Name Description System.IO.TextWriter textWriter Overrides AbstractPartialBcmSerializer.SaveAsJson(TextWriter) Implements IPartialBcmSerializer System.IDisposable"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.IPartialBcmSerializer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.IPartialBcmSerializer.html",
    "title": "Interface IPartialBcmSerializer",
    "keywords": "Interface IPartialBcmSerializer Bcm serialization interface that allows for not holding the whole bcm document in memory Namespace : Sdl.Core.Bcm.BcmModel.PartialSerialization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public interface IPartialBcmSerializer Methods AddFile(File) Adds a file, based on the attributes and skeleton in the parameter. Array of paragraph units must be empty. Declaration void AddFile(File file) Parameters Type Name Description File file DeleteFile(Int32) Deletes the file from the document. Declaration void DeleteFile(int index) Parameters Type Name Description System.Int32 index DeleteFile(String) Deletes the file from the document. Declaration void DeleteFile(string id) Parameters Type Name Description System.String id GetDocumentWithoutFiles() Gets document attributes and metadata without the files list. Updates made to the object returned will be reflected automatically in the result in case the updated bcm is requested. Declaration Document GetDocumentWithoutFiles() Returns Type Description Document GetFileCount() Number of files in this document Declaration int GetFileCount() Returns Type Description System.Int32 GetFileIds() All file ids in this document Declaration IReadOnlyList<string> GetFileIds() Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > GetFileSerializer(String) Gets serialization wrapper for specific file Declaration IPartialFileSerializer GetFileSerializer(string fileId) Parameters Type Name Description System.String fileId Returns Type Description IPartialFileSerializer InsertFile(Int32, File) Inserts a file to a specific position, based on the attributes and skeleton in the parameter. Array of paragraph units must be empty. Declaration void InsertFile(int index, File file) Parameters Type Name Description System.Int32 index File file SaveAsJson(Stream) Saves bcm document as single json object Declaration void SaveAsJson(Stream stream) Parameters Type Name Description System.IO.Stream stream SaveAsJson(TextWriter) Declaration void SaveAsJson(TextWriter textWriter) Parameters Type Name Description System.IO.TextWriter textWriter SaveAsJson(String) Saves bcm document as single json object Declaration void SaveAsJson(string filePath) Parameters Type Name Description System.String filePath"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.IPartialFileSerializer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.IPartialFileSerializer.html",
    "title": "Interface IPartialFileSerializer",
    "keywords": "Interface IPartialFileSerializer Bcm file serialization interface that allows for not holding the full file in memory Namespace : Sdl.Core.Bcm.BcmModel.PartialSerialization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public interface IPartialFileSerializer Methods AddParagraphUnit(ParagraphUnit) Adds a paragraph unit at the end of the paragraph units list in the file Declaration void AddParagraphUnit(ParagraphUnit paragraphUnit) Parameters Type Name Description ParagraphUnit paragraphUnit GetAllParagraphUnits() Returns a sequence of paragraph units from this file, deserialized one by one Declaration IEnumerable<ParagraphUnit> GetAllParagraphUnits() Returns Type Description System.Collections.Generic.IEnumerable < ParagraphUnit > GetFileWithoutParagraphUnits() Gets file attributes and skeleton without any paragraph units in it. Declaration File GetFileWithoutParagraphUnits() Returns Type Description File GetParagraphUnitCount() Returns the number of paragraph units in this file Declaration int GetParagraphUnitCount() Returns Type Description System.Int32 GetParagraphUnitIds() Returns the paragraph unit ids from this file Declaration IReadOnlyList<string> GetParagraphUnitIds() Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > GetSpecificParagraphUnit(Int32) Deserializes the paragraph unit with specific index in file Declaration ParagraphUnit GetSpecificParagraphUnit(int index) Parameters Type Name Description System.Int32 index Returns Type Description ParagraphUnit GetSpecificParagraphUnit(String) Deserializes the paragraph unit with specific id in file Declaration ParagraphUnit GetSpecificParagraphUnit(string id) Parameters Type Name Description System.String id Returns Type Description ParagraphUnit InsertParagraphUnit(Int32, ParagraphUnit) Inserts paragraph unit at specific index in file Declaration void InsertParagraphUnit(int index, ParagraphUnit paragraphUnit) Parameters Type Name Description System.Int32 index ParagraphUnit paragraphUnit RemoveParagraphUnit(Int32) Removes paragraph unit with specific index from file Declaration void RemoveParagraphUnit(int index) Parameters Type Name Description System.Int32 index RemoveParagraphUnit(String) Removes paragraph unit from file Declaration void RemoveParagraphUnit(string id) Parameters Type Name Description System.String id RemoveParagraphUnitRange(Int32, Int32) Removes multiple paragraph units based on index Declaration void RemoveParagraphUnitRange(int startIndex, int count) Parameters Type Name Description System.Int32 startIndex System.Int32 count UpdateFileDataWithoutParagraphUnits(File) Updates file attributes and skeleton. Array of paragraph units must be empty. Declaration void UpdateFileDataWithoutParagraphUnits(File file) Parameters Type Name Description File file UpdateParagraphUnit(ParagraphUnit) Updates paragraph unit in file Declaration void UpdateParagraphUnit(ParagraphUnit paragraphUnit) Parameters Type Name Description ParagraphUnit paragraphUnit"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.PartialBcmSerializerFactory.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.PartialBcmSerializerFactory.html",
    "title": "Class PartialBcmSerializerFactory",
    "keywords": "Class PartialBcmSerializerFactory Inheritance System.Object PartialBcmSerializerFactory Namespace : Sdl.Core.Bcm.BcmModel.PartialSerialization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class PartialBcmSerializerFactory : Object Constructors PartialBcmSerializerFactory() Declaration public PartialBcmSerializerFactory() Properties FileSizeLimitInMBForInMemory Declaration public int FileSizeLimitInMBForInMemory { get; set; } Property Value Type Description System.Int32 Methods CreateSerializer(Document) Declaration public IPartialBcmSerializer CreateSerializer(Document existingDocument) Parameters Type Name Description Document existingDocument Returns Type Description IPartialBcmSerializer CreateSerializer(Stream) Declaration public IPartialBcmSerializer CreateSerializer(Stream stream) Parameters Type Name Description System.IO.Stream stream Returns Type Description IPartialBcmSerializer CreateSerializer(String) Declaration public IPartialBcmSerializer CreateSerializer(string filePath) Parameters Type Name Description System.String filePath Returns Type Description IPartialBcmSerializer"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased Classes TempFileBasedBcmSerializer"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased.TempFileBasedBcmSerializer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased.TempFileBasedBcmSerializer.html",
    "title": "Class TempFileBasedBcmSerializer",
    "keywords": "Class TempFileBasedBcmSerializer Inheritance System.Object AbstractPartialBcmSerializer TempFileBasedBcmSerializer Implements IPartialBcmSerializer System.IDisposable Inherited Members AbstractPartialBcmSerializer.SaveAsJson(String) AbstractPartialBcmSerializer.SaveAsJson(Stream) AbstractPartialBcmSerializer.Dispose() Namespace : Sdl.Core.Bcm.BcmModel.PartialSerialization.TempFileBased Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class TempFileBasedBcmSerializer : AbstractPartialBcmSerializer, IPartialBcmSerializer Constructors TempFileBasedBcmSerializer() Creates new empty document. Declaration public TempFileBasedBcmSerializer() TempFileBasedBcmSerializer(String, Boolean) Declaration public TempFileBasedBcmSerializer(string filePath, bool deleteFileOnDispose) Parameters Type Name Description System.String filePath System.Boolean deleteFileOnDispose Methods AddFile(File) Declaration public override void AddFile(File file) Parameters Type Name Description File file Overrides AbstractPartialBcmSerializer.AddFile(File) DeleteFile(Int32) Declaration public override void DeleteFile(int index) Parameters Type Name Description System.Int32 index Overrides AbstractPartialBcmSerializer.DeleteFile(Int32) DeleteFile(String) Declaration public override void DeleteFile(string id) Parameters Type Name Description System.String id Overrides AbstractPartialBcmSerializer.DeleteFile(String) Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides AbstractPartialBcmSerializer.Dispose(Boolean) GetDocumentWithoutFiles() Declaration public override Document GetDocumentWithoutFiles() Returns Type Description Document Overrides AbstractPartialBcmSerializer.GetDocumentWithoutFiles() GetFileCount() Declaration public override int GetFileCount() Returns Type Description System.Int32 Overrides AbstractPartialBcmSerializer.GetFileCount() GetFileIds() Declaration public override IReadOnlyList<string> GetFileIds() Returns Type Description System.Collections.Generic.IReadOnlyList < System.String > Overrides AbstractPartialBcmSerializer.GetFileIds() GetFileSerializer(String) Declaration public override IPartialFileSerializer GetFileSerializer(string fileId) Parameters Type Name Description System.String fileId Returns Type Description IPartialFileSerializer Overrides AbstractPartialBcmSerializer.GetFileSerializer(String) InsertFile(Int32, File) Declaration public override void InsertFile(int index, File file) Parameters Type Name Description System.Int32 index File file Overrides AbstractPartialBcmSerializer.InsertFile(Int32, File) SaveAsJson(TextWriter) Declaration public override void SaveAsJson(TextWriter textWriter) Parameters Type Name Description System.IO.TextWriter textWriter Overrides AbstractPartialBcmSerializer.SaveAsJson(TextWriter) Implements IPartialBcmSerializer System.IDisposable"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.PlaceholderTag.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.PlaceholderTag.html",
    "title": "Class PlaceholderTag",
    "keywords": "Class PlaceholderTag A tag with no translatable content. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData PlaceholderTag Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > ISkeletonItemReference < PlaceholderTagDefinition > Inherited Members MarkupData.UniqueClone() MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class PlaceholderTag : MarkupData, ICloneable<MarkupData>, ISkeletonItemReference<PlaceholderTagDefinition> Constructors PlaceholderTag() Declaration public PlaceholderTag() Properties Definition Gets the definition of this item from the FileSkeleton . Declaration public PlaceholderTagDefinition Definition { get; } Property Value Type Description PlaceholderTagDefinition The definition of this item from the FileSkeleton . PlaceholderTagDefinitionId Gets or sets the PlaceholderTagDefinition id. Declaration public int PlaceholderTagDefinitionId { get; set; } Property Value Type Description System.Int32 The PlaceholderTagDefinition id. TagNumber Gets or sets the TagNumber for this instance. This is the same as the \"frameworkOriginalTagId\" metadata but now exposed on the tag as well (the metadata will become deprecated). If needed, it will be populated on deserialization from the metadata, the value remains null iff not present (which should not be the case). Declaration public string TagNumber { get; set; } Property Value Type Description System.String Type Gets the type of MarkupData . Declaration protected override string Type { get; set; } Property Value Type Description System.String The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance, setting a new id. Declaration public PlaceholderTag Clone() Returns Type Description PlaceholderTag A deep clone of this instance, with a new unique id. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Overrides MarkupData.Equals(MarkupData) Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MarkupData.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MarkupData.GetHashCode() Implements System.IEquatable<> ICloneable<T> System.IEquatable<> ISkeletonItemReference<T>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.RevisionContainer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.RevisionContainer.html",
    "title": "Class RevisionContainer",
    "keywords": "Class RevisionContainer Marks revisions to the translated content. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer RevisionContainer Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, Boolean>) MarkupDataContainer.GetAllChildren<T>(Func<T, Boolean>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(Int32, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.MoveToContainer(MarkupDataContainer, Int32, Int32, Int32) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.OnDeserialized() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.Item[Int32] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class RevisionContainer : MarkupDataContainer, ICloneable<MarkupData> Constructors RevisionContainer() Initializes a new instance of the RevisionContainer class. Declaration public RevisionContainer() RevisionContainer(RevisionType) Initializes a new instance of the RevisionContainer class. Declaration public RevisionContainer(RevisionType revisionType) Parameters Type Name Description RevisionType revisionType Type of the revision. Properties Author Gets or sets the revision author. Declaration public string Author { get; set; } Property Value Type Description System.String The revision author. RevisionType Gets or sets the type of the revision. Declaration public RevisionType RevisionType { get; set; } Property Value Type Description RevisionType The type of the revision. Timestamp Gets or sets the date when the revision was added. Declaration public Nullable<DateTime> Timestamp { get; set; } Property Value Type Description System.Nullable < System.DateTime > The date when the revision was added. Type Gets the type of MarkupData . Declaration protected override string Type { get; set; } Property Value Type Description System.String The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public RevisionContainer Clone() Returns Type Description RevisionContainer A deep clone of this instance. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Overrides MarkupDataContainer.Equals(MarkupData) Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MarkupDataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MarkupDataContainer.GetHashCode() UniqueClone() Clones this instance, setting a new unique id. Declaration public RevisionContainer UniqueClone() Returns Type Description RevisionContainer A deep clone of this instance, with a new unique id. Implements System.IEquatable<> ICloneable<T> System.IEquatable<> See Also MarkupDataContainer"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.RevisionType.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.RevisionType.html",
    "title": "Class RevisionType",
    "keywords": "Class RevisionType Types of RevisionContainer . Inheritance System.Object RevisionType Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class RevisionType : Enum Fields Deleted Content was deleted. Declaration public const RevisionType Deleted Field Value Type Description RevisionType Inserted Content was inserted. Declaration public const RevisionType Inserted Field Value Type Description RevisionType Unchanged The content was not changed. Declaration public const RevisionType Unchanged Field Value Type Description RevisionType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Segment.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Segment.html",
    "title": "Class Segment",
    "keywords": "Class Segment Basic unit of translatable content. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer Segment Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, Boolean>) MarkupDataContainer.GetAllChildren<T>(Func<T, Boolean>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(Int32, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.MoveToContainer(MarkupDataContainer, Int32, Int32, Int32) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.OnDeserialized() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.Item[Int32] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class Segment : MarkupDataContainer, ICloneable<MarkupData> Constructors Segment() Initializes a new instance of the Segment class. Declaration public Segment() Segment(String) Initializes a new instance of the Segment class. Declaration public Segment(string segmentNumber) Parameters Type Name Description System.String segmentNumber The segment number. Segment(String, ConfirmationLevel) Initializes a new instance of the Segment class. Declaration public Segment(string segmentNumber, ConfirmationLevel confirmationLevel) Parameters Type Name Description System.String segmentNumber The segment number. ConfirmationLevel confirmationLevel The confirmation level. Properties AlignmentData Gets or sets the alignment data. Declaration public AlignmentData AlignmentData { get; set; } Property Value Type Description AlignmentData The alignment data. Remarks Used by the alignment processing. CharacterCount Gets or sets the character count. Declaration public int CharacterCount { get; set; } Property Value Type Description System.Int32 The character count. ConfirmationLevel Gets or sets the confirmation level (translation status). Declaration public ConfirmationLevel ConfirmationLevel { get; set; } Property Value Type Description ConfirmationLevel The confirmation level (translation status). IsLocked Gets or sets a value indicating whether this instance is locked for editing. Declaration public bool IsLocked { get; set; } Property Value Type Description System.Boolean true if this instance is locked for editing; otherwise, false . SegmentNumber Gets or sets the segment number. Declaration public string SegmentNumber { get; set; } Property Value Type Description System.String The segment number. SiblingSegment Gets the sibling segment. Declaration public Segment SiblingSegment { get; } Property Value Type Description Segment The sibling segment. Remarks If this is the source segment, it retrieves the target (and the other way around) Tokens Gets or sets the tokens. Declaration public List<Token> Tokens { get; set; } Property Value Type Description System.Collections.Generic.List < Token > The tokens. Remarks Used by the tokenization process. TranslationOrigin Gets or sets the translation origin (translation source information). Declaration public TranslationOrigin TranslationOrigin { get; set; } Property Value Type Description TranslationOrigin The translation origin. Type Gets the type of MarkupData . Declaration protected override string Type { get; set; } Property Value Type Description System.String The type. Overrides MarkupData.Type WordCount Gets or sets the word count. Declaration public int WordCount { get; set; } Property Value Type Description System.Int32 The word count. Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public Segment Clone() Returns Type Description Segment A deep clone of this instance. CloneWithoutChildren() Creates a clone of this instance, without any children elements. Declaration public override MarkupDataContainer CloneWithoutChildren() Returns Type Description MarkupDataContainer A clone of this instance, without any children elements. Overrides MarkupDataContainer.CloneWithoutChildren() Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Overrides MarkupDataContainer.Equals(MarkupData) Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MarkupDataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MarkupDataContainer.GetHashCode() ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides MarkupDataContainer.ToString() UniqueClone() Clones this instance, setting a new unique id. Declaration public Segment UniqueClone() Returns Type Description Segment A deep clone of this instance, with a new unique id. Implements System.IEquatable<> ICloneable<T> System.IEquatable<> See Also MarkupDataContainer"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.SegmentationHint.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.SegmentationHint.html",
    "title": "Class SegmentationHint",
    "keywords": "Class SegmentationHint Information on how specific tags should be segmented. Inheritance System.Object SegmentationHint Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class SegmentationHint : Enum Fields Exclude The tag will be excluded from a segment, even if this means changing the segmentation. This is used for sub-content processing. Declaration public const SegmentationHint Exclude Field Value Type Description SegmentationHint Include If possible, the segmentation engine should always include this tag inside a segment. Declaration public const SegmentationHint Include Field Value Type Description SegmentationHint IncludeWithText The tag will be included in a segment if the segment also contains text content, otherwise it will not be included in a segment (in order to prevent segment-only tags). Declaration public const SegmentationHint IncludeWithText Field Value Type Description SegmentationHint MayExclude The tag may be left outside of the segment, e.g. if it appears at a segment boundary. Declaration public const SegmentationHint MayExclude Field Value Type Description SegmentationHint value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.SegmentMetaDataKeys.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.SegmentMetaDataKeys.html",
    "title": "Class SegmentMetaDataKeys",
    "keywords": "Class SegmentMetaDataKeys Constants for Segment metadata. Inheritance System.Object SegmentMetaDataKeys Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class SegmentMetaDataKeys : Object Fields AlignmentTimestamp Segment metadata key for accesing alignment date. Declaration public const string AlignmentTimestamp = \"tuInsertDate\" Field Value Type Description System.String Contexts Segment metadata key for accesing the associated contexts. Declaration public const string Contexts = \"Contexts\" Field Value Type Description System.String CustomFields Segment metadata key for accesing custom fields. Declaration public const string CustomFields = \"CustomFields\" Field Value Type Description System.String SystemFields Segment metadata key for accesing system fields. Declaration public const string SystemFields = \"SystemFields\" Field Value Type Description System.String TuGuId Segment metadata key for accesing the Translation Unit GUID id. Declaration public const string TuGuId = \"tuguid\" Field Value Type Description System.String TuId Segment metadata key for accesing the Translation Unit numerical id. Declaration public const string TuId = \"tuid\" Field Value Type Description System.String"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.SegmentPair.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.SegmentPair.html",
    "title": "Class SegmentPair",
    "keywords": "Class SegmentPair Class grouping together the source and equivalent target Segment . Inheritance System.Object ExtensionDataContainer SegmentPair Implements ICloneable < SegmentPair > Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class SegmentPair : ExtensionDataContainer, ICloneable<SegmentPair> Constructors SegmentPair(Segment, Segment) Initializes a new instance of the SegmentPair class. Declaration public SegmentPair(Segment source, Segment target) Parameters Type Name Description Segment source The source. Segment target The target. Properties Source Gets or sets the source. Declaration public Segment Source { get; set; } Property Value Type Description Segment The source. Target Gets or sets the target. Declaration public Segment Target { get; set; } Property Value Type Description Segment The target. Methods Clone() Clones this instance. Declaration public SegmentPair Clone() Returns Type Description SegmentPair A deep clone of this instance. Implements ICloneable<T>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Serialization.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Serialization.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Serialization",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.Serialization Classes MarkupDataMapping Factory providing mapping between MarkupData.Type string values and concrete implementations of MarkupData . TokenMapping Class for mapping to different types of Token ."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Serialization.MarkupDataMapping.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Serialization.MarkupDataMapping.html",
    "title": "Class MarkupDataMapping",
    "keywords": "Class MarkupDataMapping Factory providing mapping between MarkupData.Type string values and concrete implementations of MarkupData . Inheritance System.Object MarkupDataMapping Namespace : Sdl.Core.Bcm.BcmModel.Serialization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class MarkupDataMapping : Object Methods GetType(String) Gets the concrete implementation of MarkupData . Declaration public static MarkupData GetType(string type) Parameters Type Name Description System.String type The MarkupData.Type string. Returns Type Description MarkupData"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Serialization.TokenMapping.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Serialization.TokenMapping.html",
    "title": "Class TokenMapping",
    "keywords": "Class TokenMapping Class for mapping to different types of Token . Inheritance System.Object TokenMapping Namespace : Sdl.Core.Bcm.BcmModel.Serialization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class TokenMapping : Object Methods GetType(String) Gets the type of Token based on the string type. Declaration public static Token GetType(string type) Parameters Type Name Description System.String type The type. Returns Type Description Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.CommentDefinition.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.CommentDefinition.html",
    "title": "Class CommentDefinition",
    "keywords": "Class CommentDefinition Contains comment data. Can be referenced by multiple CommentContainer instances. Inheritance System.Object ExtensionDataContainer MetadataContainer SkeletonItem CommentDefinition Implements System.IEquatable < MetadataContainer > System.IEquatable < SkeletonItem > ICloneable < CommentDefinition > System.IEquatable < CommentDefinition > Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class CommentDefinition : SkeletonItem, ICloneable<CommentDefinition> Constructors CommentDefinition() Initializes a new instance of the CommentDefinition class. Declaration public CommentDefinition() Properties Author Gets or sets the author. Declaration public string Author { get; set; } Property Value Type Description System.String The author. CommentSeverity Gets or sets the comment severity. Declaration public CommentSeverity CommentSeverity { get; set; } Property Value Type Description CommentSeverity The comment severity. Date Gets or sets the comment creation date. Declaration public DateTime Date { get; set; } Property Value Type Description System.DateTime The comment creation date. Text Gets or sets the text. Declaration public string Text { get; set; } Property Value Type Description System.String The text. Methods Clone() Clones this instance. Declaration public CommentDefinition Clone() Returns Type Description CommentDefinition A dee Equals(CommentDefinition) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(CommentDefinition other) Parameters Type Name Description CommentDefinition other Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides SkeletonItem.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides SkeletonItem.GetHashCode() Implements System.IEquatable<> System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.CommentSeverity.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.CommentSeverity.html",
    "title": "Class CommentSeverity",
    "keywords": "Class CommentSeverity Supported values of comment severity. Inheritance System.Object CommentSeverity Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class CommentSeverity : Enum Fields High High comment severity. Declaration public const CommentSeverity High Field Value Type Description CommentSeverity Low Low comment severity. Declaration public const CommentSeverity Low Field Value Type Description CommentSeverity Medium Medium comment severity (default). Declaration public const CommentSeverity Medium Field Value Type Description CommentSeverity value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.Context.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.Context.html",
    "title": "Class Context",
    "keywords": "Class Context Context information, organized as a tree structure. Inheritance System.Object ExtensionDataContainer MetadataContainer SkeletonItem Context Implements System.IEquatable < MetadataContainer > System.IEquatable < SkeletonItem > ICloneable < Context > System.IEquatable < Context > Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class Context : SkeletonItem, ICloneable<Context> Constructors Context() Declaration public Context() Properties ContextDefinitionId Id of the ContextDefinition object holding the data for this specific Context element. Declaration public int ContextDefinitionId { get; set; } Property Value Type Description System.Int32 ParentContextId The id of the parent Context element. Declaration public int ParentContextId { get; set; } Property Value Type Description System.Int32 Methods Clone() Clones this instance. Declaration public Context Clone() Returns Type Description Context A clone of this instance. Equals(Context) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Context other) Parameters Type Name Description Context other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides SkeletonItem.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides SkeletonItem.GetHashCode() ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Implements System.IEquatable<> System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.ContextDefinition.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.ContextDefinition.html",
    "title": "Class ContextDefinition",
    "keywords": "Class ContextDefinition Holds context data. Can be referenced by multiple Context elements. Inheritance System.Object ExtensionDataContainer MetadataContainer SkeletonItem ContextDefinition Implements System.IEquatable < MetadataContainer > System.IEquatable < SkeletonItem > ICloneable < ContextDefinition > System.IEquatable < ContextDefinition > Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class ContextDefinition : SkeletonItem, ICloneable<ContextDefinition> Constructors ContextDefinition() Declaration public ContextDefinition() Properties Description Gets or sets the description. Declaration public string Description { get; set; } Property Value Type Description System.String The description. DisplayCode Gets or sets the context display code. Declaration public string DisplayCode { get; set; } Property Value Type Description System.String The context display code. DisplayColor Gets or sets the context display color. Declaration public string DisplayColor { get; set; } Property Value Type Description System.String The context display color. DisplayName Gets or sets the context display name. Declaration public string DisplayName { get; set; } Property Value Type Description System.String The context display name. FormattingGroupId Gets or sets the formatting group identifier. Declaration public int FormattingGroupId { get; set; } Property Value Type Description System.Int32 The formatting group identifier. IsSidContext Gets a value indicating whether this instance is sID context. Declaration public bool IsSidContext { get; } Property Value Type Description System.Boolean true if this instance is sID context; otherwise, false . IsStructureContext Gets or sets a value indicating whether this instance is a structure context. Declaration public bool IsStructureContext { get; set; } Property Value Type Description System.Boolean true if this instance is a structure context; otherwise, false . IsTmContext Gets or sets a value indicating whether this instance is a TM context. Declaration public bool IsTmContext { get; set; } Property Value Type Description System.Boolean true if this instance is TM context; otherwise, false . IsTmStructureContext Gets a value indicating whether this instance is a TM structure context. Declaration public bool IsTmStructureContext { get; } Property Value Type Description System.Boolean true if this instance is a TM structure context; otherwise, false . TypeId Gets or sets the context type identifier. Declaration public string TypeId { get; set; } Property Value Type Description System.String The context type identifier. Methods Clone() Clones this instance. Declaration public ContextDefinition Clone() Returns Type Description ContextDefinition Equals(ContextDefinition) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(ContextDefinition other) Parameters Type Name Description ContextDefinition other Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides SkeletonItem.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides SkeletonItem.GetHashCode() ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Implements System.IEquatable<> System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.FileSkeleton.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.FileSkeleton.html",
    "title": "Class FileSkeleton",
    "keywords": "Class FileSkeleton Holds data for a File that is referenced by different MarkupData elements. Inheritance System.Object ExtensionDataContainer MetadataContainer FileSkeleton Implements System.IEquatable < MetadataContainer > ICloneable < FileSkeleton > System.IEquatable < FileSkeleton > Inherited Members MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class FileSkeleton : MetadataContainer, ICloneable<FileSkeleton> Examples A PlaceholderTag element has a DefinitionId that points to an element in the PlaceholderTagDefinitions collection. Constructors FileSkeleton() Public constructor. Declaration public FileSkeleton() Properties CommentDefinitions Collection of all the CommentDefinition elements referenced in a File . Declaration public SkeletonCollection<CommentDefinition> CommentDefinitions { get; set; } Property Value Type Description SkeletonCollection < CommentDefinition > ContextDefinitions Collection of all the ContextDefinition elements referenced in a File . Declaration public SkeletonCollection<ContextDefinition> ContextDefinitions { get; set; } Property Value Type Description SkeletonCollection < ContextDefinition > Contexts Collection of all the Context elements referenced in a File . Declaration public SkeletonCollection<Context> Contexts { get; set; } Property Value Type Description SkeletonCollection < Context > FileId The File id. Declaration public string FileId { get; set; } Property Value Type Description System.String FormattingGroups Collection of all the FormattingGroup elements referenced in a File . Declaration public SkeletonCollection<FormattingGroup> FormattingGroups { get; set; } Property Value Type Description SkeletonCollection < FormattingGroup > IdGenerator An IdGenerator instance that creates unique numeric IDs for all the elements in different FileSkeleton collection. Declaration public IdGenerator IdGenerator { get; } Property Value Type Description IdGenerator ParentFile The File for which this FileSkeleton is defined. Declaration public File ParentFile { get; set; } Property Value Type Description File PlaceholderTagDefinitions Collection of all the PlaceholderTagDefinition elements referenced in a File . Declaration public SkeletonCollection<PlaceholderTagDefinition> PlaceholderTagDefinitions { get; set; } Property Value Type Description SkeletonCollection < PlaceholderTagDefinition > QuickInsertIds Collection of all the QuickInsert IDs referenced in a File . Declaration public List<string> QuickInsertIds { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > StructureTagDefinitions Collection of all the StructureTagDefinition elements referenced in a File . Declaration public SkeletonCollection<StructureTagDefinition> StructureTagDefinitions { get; set; } Property Value Type Description SkeletonCollection < StructureTagDefinition > SubContentPUs List of all the IDs of ParagraphUnit s that are sub-content elements. Declaration public List<string> SubContentPUs { get; set; } Property Value Type Description System.Collections.Generic.List < System.String > TagPairDefinitions Collection of all the TagPairDefinition elements referenced in a File . Declaration public SkeletonCollection<TagPairDefinition> TagPairDefinitions { get; set; } Property Value Type Description SkeletonCollection < TagPairDefinition > TerminologyData Collection of all the TerminologyData elements referenced in a File . Declaration public SkeletonCollection<TerminologyData> TerminologyData { get; set; } Property Value Type Description SkeletonCollection < TerminologyData > Methods Clone() Clones this instance. Declaration public FileSkeleton Clone() Returns Type Description FileSkeleton Equals(FileSkeleton) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(FileSkeleton other) Parameters Type Name Description FileSkeleton other Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MetadataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MetadataContainer.GetHashCode() ShouldSerializeCommentDefinitions() Used by JSON serialization. Declaration public bool ShouldSerializeCommentDefinitions() Returns Type Description System.Boolean True if CommentDefinitions should be serialized. ShouldSerializeContextDefinitions() Used by JSON serialization. Declaration public bool ShouldSerializeContextDefinitions() Returns Type Description System.Boolean True if ContextDefinitions should be serialized. ShouldSerializeContexts() Used by JSON serialization. Declaration public bool ShouldSerializeContexts() Returns Type Description System.Boolean True if Contexts should be serialized. ShouldSerializeFormattingGroups() Used by JSON serialization. Declaration public bool ShouldSerializeFormattingGroups() Returns Type Description System.Boolean True if FormattingGroups should be serialized. ShouldSerializePlaceholderTagDefinitions() Used by JSON serialization. Declaration public bool ShouldSerializePlaceholderTagDefinitions() Returns Type Description System.Boolean True if PlaceholderTagDefinitions should be serialized. ShouldSerializeQuickInsertIds() Used by JSON serialization. Declaration public bool ShouldSerializeQuickInsertIds() Returns Type Description System.Boolean True if QuickInsertIds should be serialized. ShouldSerializeStructureTagDefinitions() Used by JSON serialization. Declaration public bool ShouldSerializeStructureTagDefinitions() Returns Type Description System.Boolean True if FormattingGroups should be serialized. ShouldSerializeSubContentPUs() Used by JSON serialization. Declaration public bool ShouldSerializeSubContentPUs() Returns Type Description System.Boolean True if SubContentPUs should be serialized. ShouldSerializeTagPairDefinitions() Used by JSON serialization. Declaration public bool ShouldSerializeTagPairDefinitions() Returns Type Description System.Boolean True if TagPairDefinitions should be serialized. ShouldSerializeTerminologyData() Used by JSON serialization. Declaration public bool ShouldSerializeTerminologyData() Returns Type Description System.Boolean True if TerminologyData should be serialized. Implements System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.FormattingGroup.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.FormattingGroup.html",
    "title": "Class FormattingGroup",
    "keywords": "Class FormattingGroup Holds formatting elements that can be applied to different elements of BCM content. Inheritance System.Object ExtensionDataContainer MetadataContainer SkeletonItem FormattingGroup Implements System.IEquatable < MetadataContainer > System.IEquatable < SkeletonItem > ICloneable < FormattingGroup > System.IEquatable < FormattingGroup > Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class FormattingGroup : SkeletonItem, ICloneable<FormattingGroup> Constructors FormattingGroup() Initializes a new instance of the FormattingGroup class. Declaration public FormattingGroup() Properties Items Collection of formatting elements in this FormattingGroup . Declaration public DictionaryEx<string, string> Items { get; set; } Property Value Type Description DictionaryEx < System.String , System.String > Methods Clone() Clones this instance. Declaration public FormattingGroup Clone() Returns Type Description FormattingGroup Equals(FormattingGroup) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(FormattingGroup other) Parameters Type Name Description FormattingGroup other Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides SkeletonItem.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides SkeletonItem.GetHashCode() ShouldSerializeItems() Used by JSON serialization. Declaration public bool ShouldSerializeItems() Returns Type Description System.Boolean Implements System.IEquatable<> System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Skeleton",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.Skeleton Classes CommentDefinition Contains comment data. Can be referenced by multiple CommentContainer instances. CommentSeverity Supported values of comment severity. Context Context information, organized as a tree structure. ContextDefinition Holds context data. Can be referenced by multiple Context elements. FileSkeleton Holds data for a File that is referenced by different MarkupData elements. FormattingGroup Holds formatting elements that can be applied to different elements of BCM content. IdGenerator Creates unique numeric IDs for all the elements in different FileSkeleton collection. PlaceholderTagDefinition Definition of a Placeholder. Can be referenced by multiple PlaceholderTag elements. SkeletonCollection<T> Base class for collections used in a FileSkeleton . SkeletonCollectionKey Wrapper used for defining integer keys in the FileSkeleton collections. SkeletonItem Base class for different types of elements definied in a FileSkeleton . StructureTagDefinition Definition of a StructureTag. Can be referenced by multiple StructureTag elements. SubContentCollection Collection of subcontent LocalizableSubContent elements. Can appear in different MarkupData elements. TagPairDefinition Definition of a TagPair. Can be referenced by multiple TagPair elements. Term Terminology element. TerminologyData Data containing a list of Term s representing terminology information. TermOrigin Data on the creation origin of Term . TermTranslation Translation of a specific Term . Interfaces ITermAttributeContainer Interface for BCM elements containing terminology attributes."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.IdGenerator.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.IdGenerator.html",
    "title": "Class IdGenerator",
    "keywords": "Class IdGenerator Creates unique numeric IDs for all the elements in different FileSkeleton collection. Inheritance System.Object IdGenerator Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class IdGenerator : Object Constructors IdGenerator() Declaration public IdGenerator() Methods GetNext<T>() Gets the next ID. Declaration public int GetNext<T>() where T : SkeletonItem Returns Type Description System.Int32 The next ID in the sequence. Type Parameters Name Description T Update<T>(T) Updates the ID sequence with the ID of the specified item. Declaration public void Update<T>(T item) where T : SkeletonItem Parameters Type Name Description T item The item. Type Parameters Name Description T UpdateFrom(Document) Updates the ID sequence with the values from the specified Document . Declaration public void UpdateFrom(Document document) Parameters Type Name Description Document document The Document . UpdateFrom(FileSkeleton) Updates the ID sequence with the values from the specified FileSkeleton . Declaration public void UpdateFrom(FileSkeleton skeleton) Parameters Type Name Description FileSkeleton skeleton The FileSkeleton ."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.ITermAttributeContainer.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.ITermAttributeContainer.html",
    "title": "Interface ITermAttributeContainer",
    "keywords": "Interface ITermAttributeContainer Interface for BCM elements containing terminology attributes. Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public interface ITermAttributeContainer Properties TermAttributes Gets or sets the term attributes. Declaration DictionaryEx<string, object> TermAttributes { get; set; } Property Value Type Description DictionaryEx < System.String , System.Object > The term attributes."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.PlaceholderTagDefinition.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.PlaceholderTagDefinition.html",
    "title": "Class PlaceholderTagDefinition",
    "keywords": "Class PlaceholderTagDefinition Definition of a Placeholder. Can be referenced by multiple PlaceholderTag elements. Inheritance System.Object ExtensionDataContainer MetadataContainer SkeletonItem PlaceholderTagDefinition Implements System.IEquatable < MetadataContainer > System.IEquatable < SkeletonItem > ICloneable < PlaceholderTagDefinition > System.IEquatable < PlaceholderTagDefinition > Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class PlaceholderTagDefinition : SkeletonItem, ICloneable<PlaceholderTagDefinition> Constructors PlaceholderTagDefinition() Initializes a new instance of the PlaceholderTagDefinition class. Declaration public PlaceholderTagDefinition() Properties DisplayText Gets or sets the display text. Declaration public string DisplayText { get; set; } Property Value Type Description System.String The display text. QuickInsertId Gets or sets the QuickInsert ID of the tag. Declaration public string QuickInsertId { get; set; } Property Value Type Description System.String The QuickInsert ID of the tag. SegmentationHint Gets or sets the segmentation hint. Declaration public SegmentationHint SegmentationHint { get; set; } Property Value Type Description SegmentationHint The segmentation hint. SubContent Gets or sets the SubContentCollection of the placeholder tag. Declaration public SubContentCollection SubContent { get; set; } Property Value Type Description SubContentCollection The SubContentCollection of the tag. TagContent Gets or sets the raw Placeholder tag content. Declaration public string TagContent { get; set; } Property Value Type Description System.String The raw Placeholder tag content of the tag. TextEquivalent Gets or sets the tag text equivalent. Declaration public string TextEquivalent { get; set; } Property Value Type Description System.String The tag text equivalent. Methods Clone() Clones this instance. Declaration public PlaceholderTagDefinition Clone() Returns Type Description PlaceholderTagDefinition A new clone of this instance. Equals(PlaceholderTagDefinition) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(PlaceholderTagDefinition other) Parameters Type Name Description PlaceholderTagDefinition other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides SkeletonItem.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides SkeletonItem.GetHashCode() Implements System.IEquatable<> System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonCollection-1.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonCollection-1.html",
    "title": "Class SkeletonCollection<T>",
    "keywords": "Class SkeletonCollection<T> Base class for collections used in a FileSkeleton . Inheritance System.Object SkeletonCollection<T> Implements System.IEquatable < SkeletonCollection <T>> Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class SkeletonCollection<T> : KeyedCollection<SkeletonCollectionKey, T> where T : SkeletonItem Type Parameters Name Description T Constructors SkeletonCollection() Declaration public SkeletonCollection() Properties IdGenerator Gets the IdGenerator . Declaration public IdGenerator IdGenerator { get; } Property Value Type Description IdGenerator The IdGenerator . ParentSkeleton Gets or sets the parent FileSkeleton . Declaration public FileSkeleton ParentSkeleton { get; set; } Property Value Type Description FileSkeleton The parent FileSkeleton . Methods ClearItems() Removes all elements from the System.Collections.ObjectModel.KeyedCollection`2 . Declaration protected override void ClearItems() Equals(SkeletonCollection<T>) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(SkeletonCollection<T> other) Parameters Type Name Description SkeletonCollection <T> other Returns Type Description System.Boolean GetById(Int32) Gets an element by its numerical id. Declaration public T GetById(int id) Parameters Type Name Description System.Int32 id The id. Returns Type Description T If found, returns the element with the Id id ; otherwise returns default( T ) GetKeyForItem(T) Extracts the key from the specified element. Declaration protected override SkeletonCollectionKey GetKeyForItem(T item) Parameters Type Name Description T item The element from which to extract the key. Returns Type Description SkeletonCollectionKey The key for the specified element. GetOrAdd(T) Gets the element if it already exists in the collection. Otherwise, it is added to the collection and gives it the next ID in the IdGenerator sequence. Declaration public T GetOrAdd(T elem) Parameters Type Name Description T elem The element. Returns Type Description T The existing element; or the newly added one with an Id set. GetOrAddWithExistingId(T) Gets the element if it already exists in the collection. Otherwise, it is added to the collection (preserving its existing ID). Declaration public T GetOrAddWithExistingId(T elem) Parameters Type Name Description T elem The element. Returns Type Description T The existing element; or the newly added one with an Id set. InsertItem(Int32, T) Inserts an element into the System.Collections.ObjectModel.KeyedCollection`2 at the specified index. Declaration protected override void InsertItem(int index, T item) Parameters Type Name Description System.Int32 index The zero-based index at which item should be inserted. T item The object to insert. RemoveItem(Int32) Removes the element at the specified index of the System.Collections.ObjectModel.KeyedCollection`2 . Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index The index of the element to remove. SetItem(Int32, T) Replaces the item at the specified index with the specified item. Declaration protected override void SetItem(int index, T item) Parameters Type Name Description System.Int32 index The zero-based index of the item to be replaced. T item The new item. Implements System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonCollectionKey.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonCollectionKey.html",
    "title": "Class SkeletonCollectionKey",
    "keywords": "Class SkeletonCollectionKey Wrapper used for defining integer keys in the FileSkeleton collections. Inheritance System.Object SkeletonCollectionKey Implements System.IEquatable < SkeletonCollectionKey > Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class SkeletonCollectionKey : ValueType Constructors SkeletonCollectionKey(Int32) Initializes a new instance of the SkeletonCollectionKey struct. Declaration public SkeletonCollectionKey(int id) Parameters Type Name Description System.Int32 id The identifier. Properties Id Gets or sets the identifier. Declaration public int Id { get; set; } Property Value Type Description System.Int32 The identifier. Methods Equals(SkeletonCollectionKey) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(SkeletonCollectionKey other) Parameters Type Name Description SkeletonCollectionKey other Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean From(Int32) Creates a new SkeletonCollectionKey from an integer. Declaration public static SkeletonCollectionKey From(int from) Parameters Type Name Description System.Int32 from The value with which to initialize this instance. Returns Type Description SkeletonCollectionKey A new instance of the SkeletonCollectionKey GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Operators Equality(SkeletonCollectionKey, SkeletonCollectionKey) Implements the operator ==. Declaration public static bool operator ==(SkeletonCollectionKey left, SkeletonCollectionKey right) Parameters Type Name Description SkeletonCollectionKey left The left hand item. SkeletonCollectionKey right The right hand item. Returns Type Description System.Boolean The result of Equals(SkeletonCollectionKey) Inequality(SkeletonCollectionKey, SkeletonCollectionKey) Implements the operator !=. Declaration public static bool operator !=(SkeletonCollectionKey left, SkeletonCollectionKey right) Parameters Type Name Description SkeletonCollectionKey left The left hand item. SkeletonCollectionKey right The right hand item. Returns Type Description System.Boolean The negated result of Equals(SkeletonCollectionKey) Implements System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonItem.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.SkeletonItem.html",
    "title": "Class SkeletonItem",
    "keywords": "Class SkeletonItem Base class for different types of elements definied in a FileSkeleton . Inheritance System.Object ExtensionDataContainer MetadataContainer SkeletonItem CommentDefinition Context ContextDefinition FormattingGroup PlaceholderTagDefinition StructureTagDefinition TagPairDefinition TerminologyData Implements System.IEquatable < MetadataContainer > System.IEquatable < SkeletonItem > Inherited Members MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class SkeletonItem : MetadataContainer Constructors SkeletonItem() Declaration protected SkeletonItem() Properties Id Gets or sets the identifier. Declaration public int Id { get; set; } Property Value Type Description System.Int32 The identifier. Methods Equals(SkeletonItem) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(SkeletonItem other) Parameters Type Name Description SkeletonItem other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MetadataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MetadataContainer.GetHashCode() Implements System.IEquatable<> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.StructureTagDefinition.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.StructureTagDefinition.html",
    "title": "Class StructureTagDefinition",
    "keywords": "Class StructureTagDefinition Definition of a StructureTag. Can be referenced by multiple StructureTag elements. Inheritance System.Object ExtensionDataContainer MetadataContainer SkeletonItem StructureTagDefinition Implements System.IEquatable < MetadataContainer > System.IEquatable < SkeletonItem > ICloneable < StructureTagDefinition > System.IEquatable < StructureTagDefinition > Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class StructureTagDefinition : SkeletonItem, ICloneable<StructureTagDefinition> Constructors StructureTagDefinition() Declaration public StructureTagDefinition() Properties DisplayText Gets or sets the display text. Declaration public string DisplayText { get; set; } Property Value Type Description System.String The display text. SubContent Gets or sets the localizable sub-content. Declaration public SubContentCollection SubContent { get; set; } Property Value Type Description SubContentCollection The localizable sub-content. TagContent Gets or sets the content of the tag. Declaration public string TagContent { get; set; } Property Value Type Description System.String The content of the tag. Methods Clone() Clones this instance. Declaration public StructureTagDefinition Clone() Returns Type Description StructureTagDefinition A clone of this instance. Equals(StructureTagDefinition) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(StructureTagDefinition other) Parameters Type Name Description StructureTagDefinition other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides SkeletonItem.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides SkeletonItem.GetHashCode() Implements System.IEquatable<> System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.SubContentCollection.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.SubContentCollection.html",
    "title": "Class SubContentCollection",
    "keywords": "Class SubContentCollection Collection of subcontent LocalizableSubContent elements. Can appear in different MarkupData elements. Inheritance System.Object KeyBasedCollection < System.String , LocalizableSubContent > SubContentCollection Implements System.IEquatable < KeyBasedCollection < System.String , LocalizableSubContent >> Inherited Members KeyBasedCollection<String, LocalizableSubContent>.KeySelector KeyBasedCollection<String, LocalizableSubContent>.ForEach(Action<LocalizableSubContent>) KeyBasedCollection<String, LocalizableSubContent>.Equals(KeyBasedCollection<String, LocalizableSubContent>) KeyBasedCollection<String, LocalizableSubContent>.Equals(Object) KeyBasedCollection<String, LocalizableSubContent>.GetHashCode() KeyBasedCollection<String, LocalizableSubContent>.GetKeyForItem(LocalizableSubContent) Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class SubContentCollection : KeyBasedCollection<string, LocalizableSubContent> Constructors SubContentCollection() Initializes a new instance of the SubContentCollection class. Declaration public SubContentCollection() Implements System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.TagPairDefinition.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.TagPairDefinition.html",
    "title": "Class TagPairDefinition",
    "keywords": "Class TagPairDefinition Definition of a TagPair. Can be referenced by multiple TagPair elements. Inheritance System.Object ExtensionDataContainer MetadataContainer SkeletonItem TagPairDefinition Implements System.IEquatable < MetadataContainer > System.IEquatable < SkeletonItem > ICloneable < TagPairDefinition > System.IEquatable < TagPairDefinition > Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class TagPairDefinition : SkeletonItem, ICloneable<TagPairDefinition> Constructors TagPairDefinition() Initializes a new instance of the TagPairDefinition class. Declaration public TagPairDefinition() Properties CanHide Gets or sets a value indicating whether this tag can be hidden when displayed. Declaration public bool CanHide { get; set; } Property Value Type Description System.Boolean true if this tag can be hidden when displayed; otherwise, false . EndTagContent Gets or sets the raw end tag content. Declaration public string EndTagContent { get; set; } Property Value Type Description System.String The raw end tag content. EndTagDisplayText Gets or sets the end tag display text. Declaration public string EndTagDisplayText { get; set; } Property Value Type Description System.String The end tag display text. FormattingGroupId Gets or sets the formatting group identifier. Declaration public int FormattingGroupId { get; set; } Property Value Type Description System.Int32 The formatting group identifier. QuickInsertId Gets or sets the QuickInsert identifier of this tag. Declaration public string QuickInsertId { get; set; } Property Value Type Description System.String The QuickInsert identifier of this tag. SegmentationHint Gets or sets the segmentation hint. Declaration public SegmentationHint SegmentationHint { get; set; } Property Value Type Description SegmentationHint The segmentation hint. StartTagContent Gets or sets the raw start tag conten. Declaration public string StartTagContent { get; set; } Property Value Type Description System.String The raw start tag content. StartTagDisplayText Gets or sets the start tag display text. Declaration public string StartTagDisplayText { get; set; } Property Value Type Description System.String The start tag display text. SubContent Gets or sets the localizable subcontent. Declaration public SubContentCollection SubContent { get; set; } Property Value Type Description SubContentCollection The localizable subcontent. Methods Clone() Clones this instance. Declaration public TagPairDefinition Clone() Returns Type Description TagPairDefinition Equals(TagPairDefinition) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TagPairDefinition other) Parameters Type Name Description TagPairDefinition other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides SkeletonItem.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides SkeletonItem.GetHashCode() Implements System.IEquatable<> System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.Term.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.Term.html",
    "title": "Class Term",
    "keywords": "Class Term Terminology element. Inheritance System.Object ExtensionDataContainer Term Implements ICloneable < Term > System.IEquatable < Term > ITermAttributeContainer Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class Term : ExtensionDataContainer, ICloneable<Term>, ITermAttributeContainer Constructors Term() Initializes a new instance of the Term class. Declaration public Term() Properties Id Gets or sets the identifier. Declaration public string Id { get; set; } Property Value Type Description System.String The identifier. Score Gets or sets the terminology score. Declaration public double Score { get; set; } Property Value Type Description System.Double The terminology score. TermAttributes Gets or sets term level attributes contained at any level within the termbase field structures. Declaration public DictionaryEx<string, object> TermAttributes { get; set; } Property Value Type Description DictionaryEx < System.String , System.Object > The term attributes. TermOrigin Gets or sets the term origin. Declaration public TermOrigin TermOrigin { get; set; } Property Value Type Description TermOrigin The term origin. TermTranslations Gets or sets the term translations. Declaration public List<TermTranslation> TermTranslations { get; set; } Property Value Type Description System.Collections.Generic.List < TermTranslation > The term translations. Text Gets or sets the terminology text. Declaration public string Text { get; set; } Property Value Type Description System.String The terminology text. Methods Clone() Clones this instance. Declaration public Term Clone() Returns Type Description Term A deep clone of this instance. Equals(Term) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(Term other) Parameters Type Name Description Term other Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. ShouldSerializeTermAttributes() Used by JSON serialization. Declaration public bool ShouldSerializeTermAttributes() Returns Type Description System.Boolean ShouldSerializeTermTranslations() Used by JSON serialization. Declaration public bool ShouldSerializeTermTranslations() Returns Type Description System.Boolean Implements ICloneable<T> System.IEquatable<> ITermAttributeContainer"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.TerminologyData.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.TerminologyData.html",
    "title": "Class TerminologyData",
    "keywords": "Class TerminologyData Data containing a list of Term s representing terminology information. Inheritance System.Object ExtensionDataContainer MetadataContainer SkeletonItem TerminologyData Implements System.IEquatable < MetadataContainer > System.IEquatable < SkeletonItem > ICloneable < TerminologyData > System.IEquatable < TerminologyData > Inherited Members SkeletonItem.Equals(SkeletonItem) SkeletonItem.Id MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class TerminologyData : SkeletonItem, ICloneable<TerminologyData> Constructors TerminologyData() Declaration public TerminologyData() Properties Origin Gets or sets the origin of the terminology information. Declaration public string Origin { get; set; } Property Value Type Description System.String The origin. Terms Gets or sets the terms. Declaration public List<Term> Terms { get; set; } Property Value Type Description System.Collections.Generic.List < Term > The terms. Methods Clone() Clones this instance. Declaration public TerminologyData Clone() Returns Type Description TerminologyData A deep clone of this instance. Equals(TerminologyData) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(TerminologyData other) Parameters Type Name Description TerminologyData other Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides SkeletonItem.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides SkeletonItem.GetHashCode() Implements System.IEquatable<> System.IEquatable<> ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.TermOrigin.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.TermOrigin.html",
    "title": "Class TermOrigin",
    "keywords": "Class TermOrigin Data on the creation origin of Term . Inheritance System.Object ExtensionDataContainer TermOrigin Implements ICloneable < TermOrigin > System.IEquatable < TermOrigin > Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class TermOrigin : ExtensionDataContainer, ICloneable<TermOrigin> Constructors TermOrigin() Declaration public TermOrigin() Properties ResourceId Gets or sets the terminology resource identifier. Declaration public string ResourceId { get; set; } Property Value Type Description System.String The terminology resource identifier. ResourceName Gets or sets the name of the terminology resource. Declaration public string ResourceName { get; set; } Property Value Type Description System.String The name of the terminology resource. SystemId Gets or sets the identifier of the terminology system. Declaration public string SystemId { get; set; } Property Value Type Description System.String The terminology system identifier. SystemName Gets or sets the terminology system nane. Declaration public string SystemName { get; set; } Property Value Type Description System.String The terminology system name. Methods Clone() Clones this instance. Declaration public TermOrigin Clone() Returns Type Description TermOrigin Equals(TermOrigin) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(TermOrigin other) Parameters Type Name Description TermOrigin other Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Implements ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.TermTranslation.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Skeleton.TermTranslation.html",
    "title": "Class TermTranslation",
    "keywords": "Class TermTranslation Translation of a specific Term . Inheritance System.Object ExtensionDataContainer TermTranslation Implements ICloneable < TermTranslation > System.IEquatable < TermTranslation > ITermAttributeContainer Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Skeleton Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class TermTranslation : ExtensionDataContainer, ICloneable<TermTranslation>, ITermAttributeContainer Constructors TermTranslation() Initializes a new instance of the TermTranslation class. Declaration public TermTranslation() Properties Id Gets or sets the identifier. Declaration public string Id { get; set; } Property Value Type Description System.String The identifier. TermAttributes Gets or sets the term attributes. Declaration public DictionaryEx<string, object> TermAttributes { get; set; } Property Value Type Description DictionaryEx < System.String , System.Object > The term attributes. Text Gets or sets the text. Declaration public string Text { get; set; } Property Value Type Description System.String The text. Methods Clone() Clones this instance. Declaration public TermTranslation Clone() Returns Type Description TermTranslation Equals(TermTranslation) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public bool Equals(TermTranslation other) Parameters Type Name Description TermTranslation other Returns Type Description System.Boolean Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. ShouldSerializeTermAttributes() Used by JSON serialization. Declaration public bool ShouldSerializeTermAttributes() Returns Type Description System.Boolean Implements ICloneable<T> System.IEquatable<> ITermAttributeContainer"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.StructureTag.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.StructureTag.html",
    "title": "Class StructureTag",
    "keywords": "Class StructureTag A tag that is used for document structure only and has no translatable content. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData StructureTag Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > ISkeletonItemReference < StructureTagDefinition > Inherited Members MarkupData.UniqueClone() MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class StructureTag : MarkupData, ICloneable<MarkupData>, ISkeletonItemReference<StructureTagDefinition> Constructors StructureTag() Declaration public StructureTag() Properties Definition Gets the definition of this item from the FileSkeleton . Declaration public StructureTagDefinition Definition { get; } Property Value Type Description StructureTagDefinition The definition of this item from the FileSkeleton . StructureTagDefinitionId Gets or sets the StructureTagDefinition id of this instance. Declaration public int StructureTagDefinitionId { get; set; } Property Value Type Description System.Int32 The StructureTagDefinition id of this instance. TagNumber Gets or sets the TagNumber for this instance. This is the same as the \"frameworkOriginalTagId\" metadata but now exposed on the tag as well (the metadata will become deprecated). If needed, it will be populated on deserialization from the metadata, the value remains null iff not present (which should not be the case). Declaration public string TagNumber { get; set; } Property Value Type Description System.String Type Gets the type of MarkupData . Declaration protected override string Type { get; set; } Property Value Type Description System.String The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public StructureTag Clone() Returns Type Description StructureTag A deep clone of this instance. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Overrides MarkupData.Equals(MarkupData) Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MarkupData.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MarkupData.GetHashCode() Implements System.IEquatable<> ICloneable<T> System.IEquatable<> ISkeletonItemReference<T>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.TagPair.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.TagPair.html",
    "title": "Class TagPair",
    "keywords": "Class TagPair A tag composed of a start and and end tag. Can contain other MarkupData elements. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData MarkupDataContainer TagPair Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > ISkeletonItemReference < TagPairDefinition > Inherited Members MarkupDataContainer.AutoClonedTagPairKey MarkupDataContainer.GetAllChildren(Func<MarkupData, Boolean>) MarkupDataContainer.GetAllChildren<T>(Func<T, Boolean>) MarkupDataContainer.Add(MarkupData) MarkupDataContainer.Add(IEnumerable<MarkupData>) MarkupDataContainer.Insert(Int32, MarkupData) MarkupDataContainer.Remove(MarkupData) MarkupDataContainer.Clear() MarkupDataContainer.GetEnumerator() MarkupDataContainer.MoveToContainer(MarkupDataContainer, Int32, Int32, Int32) MarkupDataContainer.Equals(MarkupDataContainer) MarkupDataContainer.ToString() MarkupDataContainer.CloneWithoutChildren() MarkupDataContainer.Children MarkupDataContainer.AllSubItems MarkupDataContainer.Count MarkupDataContainer.Item[Int32] MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class TagPair : MarkupDataContainer, ICloneable<MarkupData>, ISkeletonItemReference<TagPairDefinition> Constructors TagPair() Declaration public TagPair() Properties Definition Gets the definition of this item from the FileSkeleton . Declaration public TagPairDefinition Definition { get; } Property Value Type Description TagPairDefinition The definition of this item from the FileSkeleton . TagNumber Gets or sets the TagNumber for this instance. This is the same as the \"frameworkOriginalTagId\" metadata but now exposed on the tag as well (the metadata will become deprecated). If needed, it will be populated on deserialization from the metadata, the value remains null iff not present (which should not be the case). Declaration public string TagNumber { get; set; } Property Value Type Description System.String TagPairDefinitionId Gets or sets the TagPairDefinition id for this instance. Declaration public int TagPairDefinitionId { get; set; } Property Value Type Description System.Int32 The TagPairDefinition id for this instance. Type Gets the type of MarkupData . Declaration protected override string Type { get; set; } Property Value Type Description System.String The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public TagPair Clone() Returns Type Description TagPair A deep clone of this instance. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Overrides MarkupDataContainer.Equals(MarkupData) Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MarkupDataContainer.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance. Overrides MarkupDataContainer.GetHashCode() OnDeserialized() Declaration protected override void OnDeserialized() Overrides MarkupDataContainer.OnDeserialized() UniqueClone() Clones this instance, setting a new id. Declaration public TagPair UniqueClone() Returns Type Description TagPair A deep clone of this instance, with a new unique id. Implements System.IEquatable<> ICloneable<T> System.IEquatable<> ISkeletonItemReference<T>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.TagPairMetaDataKeys.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.TagPairMetaDataKeys.html",
    "title": "Class TagPairMetaDataKeys",
    "keywords": "Class TagPairMetaDataKeys Constants used a keys for TagPair metadata. Inheritance System.Object TagPairMetaDataKeys Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class TagPairMetaDataKeys : Object Fields EndTagMetadataPrefix Metadata key used for prefixing end tag related metadata (used by internal conversion). Declaration public const string EndTagMetadataPrefix = \"__end_\" Field Value Type Description System.String FrameworkOriginalSegmentationHint Metadata key identifying the original TagPair segmentation hint set by the SDL Filter Framework. Declaration public const string FrameworkOriginalSegmentationHint = \"_originalSegmentationHint\" Field Value Type Description System.String FrameworkOriginalTagId Metadata key identifying the original TagPair id set by the SDL Filter Framework. Declaration public const string FrameworkOriginalTagId = \"frameworkOriginalTagId\" Field Value Type Description System.String"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.TextContextMatchLevel.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.TextContextMatchLevel.html",
    "title": "Class TextContextMatchLevel",
    "keywords": "Class TextContextMatchLevel Used with textual context matches to indicate the level of matching. Inheritance System.Object TextContextMatchLevel Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class TextContextMatchLevel : Enum Fields None The textual context does not match. Declaration public const TextContextMatchLevel None Field Value Type Description TextContextMatchLevel Source Source content matches with surrounding source content. Declaration public const TextContextMatchLevel Source Field Value Type Description TextContextMatchLevel SourceAndTarget Source and target matches surrounding source and target content. Declaration public const TextContextMatchLevel SourceAndTarget Field Value Type Description TextContextMatchLevel value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.TextMarkup.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.TextMarkup.html",
    "title": "Class TextMarkup",
    "keywords": "Class TextMarkup A MarkupData containing plain text. Inheritance System.Object ExtensionDataContainer MetadataContainer MarkupData TextMarkup Implements System.IEquatable < MetadataContainer > ICloneable < MarkupData > System.IEquatable < MarkupData > Inherited Members MarkupData.UniqueClone() MarkupData.Id MarkupData.Parent MarkupData.ParentFragment MarkupData.ParentParagraph MarkupData.ParentParagraphUnit MarkupData.Ancestors MarkupData.ParentSegment MarkupData.IsContainer MarkupData.IndexInParent MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class TextMarkup : MarkupData, ICloneable<MarkupData> Constructors TextMarkup() Initializes a new instance of the TextMarkup class. Declaration public TextMarkup() TextMarkup(String) Initializes a new instance of the TextMarkup class. Declaration public TextMarkup(string text) Parameters Type Name Description System.String text The text. Properties Text Gets or sets the text. Declaration public string Text { get; set; } Property Value Type Description System.String The text. Type Gets the type of MarkupData . Declaration protected override string Type { get; set; } Property Value Type Description System.String The type. Overrides MarkupData.Type Methods AcceptVisitor(BcmVisitor) Accepts a visitor of type BcmVisitor . Declaration public override void AcceptVisitor(BcmVisitor visitor) Parameters Type Name Description BcmVisitor visitor The BcmVisitor used to visit this item. Overrides MarkupData.AcceptVisitor(BcmVisitor) Clone() Clones this instance. Declaration public TextMarkup Clone() Returns Type Description TextMarkup A deep clone of this instance. Equals(MarkupData) Indicates whether the current object is equal to another object of the same type. Declaration public override bool Equals(MarkupData other) Parameters Type Name Description MarkupData other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Overrides MarkupData.Equals(MarkupData) Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MarkupData.Equals(Object) GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, Overrides MarkupData.GetHashCode() ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Implements System.IEquatable<> ICloneable<T> System.IEquatable<> See Also MarkupData"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.DateTimePatternType.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.DateTimePatternType.html",
    "title": "Class DateTimePatternType",
    "keywords": "Class DateTimePatternType DateTime patterns used by Token elements. Inheritance System.Object DateTimePatternType Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class DateTimePatternType : Enum Fields LongDate The pattern represents a long date pattern Declaration public const DateTimePatternType LongDate Field Value Type Description DateTimePatternType LongTime The pattern represents a long time pattern Declaration public const DateTimePatternType LongTime Field Value Type Description DateTimePatternType ShortDate The pattern represents a short date pattern Declaration public const DateTimePatternType ShortDate Field Value Type Description DateTimePatternType ShortTime The pattern represents a short time pattern Declaration public const DateTimePatternType ShortTime Field Value Type Description DateTimePatternType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Tokenization",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.Tokenization Classes DateTimePatternType DateTime patterns used by Token elements. NumericSeparator The numeric separators type which can occur in a number token. PhysicalUnit Contains static definitions of physical measurement units. SegmentPosition Represents a position within a segment. SegmentRange A selection of content inside a Segment . Sign The sign of a number Similarity A similarity level between segment elements. TagType Types of tags appearing in tokenization data. Unit Enumerates the units supported by Sdl.LanguagePlatform.Core.Tokenization.Unit UnitSystem Enumeration with different measurement unit systems. UnitType Enumeration of different measurement unit types."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.NumericSeparator.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.NumericSeparator.html",
    "title": "Class NumericSeparator",
    "keywords": "Class NumericSeparator The numeric separators type which can occur in a number token. Inheritance System.Object NumericSeparator Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class NumericSeparator : Enum Fields Alternate Indicates that an alternate separator (group or decimal separator) is used. Declaration public const NumericSeparator Alternate Field Value Type Description NumericSeparator None Indicates that no explicit separator is used. Declaration public const NumericSeparator None Field Value Type Description NumericSeparator Primary Indicates that the culture's primary separator (group or decimal separator) is used. Declaration public const NumericSeparator Primary Field Value Type Description NumericSeparator value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.PhysicalUnit.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.PhysicalUnit.html",
    "title": "Class PhysicalUnit",
    "keywords": "Class PhysicalUnit Contains static definitions of physical measurement units. Inheritance System.Object PhysicalUnit Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class PhysicalUnit : Object Methods AreUnitsSameCategory(String, String) Checks if two units are in the same category. Declaration public static bool AreUnitsSameCategory(string UnitA, string UnitB) Parameters Type Name Description System.String UnitA The first unit. System.String UnitB The second unit. Returns Type Description System.Boolean True if the units are in the same category; otherwise false . AreUnitTypesCompatible(Unit, Unit) Determines whether the unit types of the specified units are compatible. Two unit types are compatible if both their types are well-defined (not \"other\" or \"no type\") and are identical. Declaration public static bool AreUnitTypesCompatible(Unit a, Unit b) Parameters Type Name Description Unit a The first unit Unit b The second unit Returns Type Description System.Boolean A flag indicating whether the units' types are compatible or not. GetAbbreviations(Unit) Gets the known abbreviations for the specified unit. The return value may indicate vertical bars to indicate multiple alternative abbreviations. Declaration public static string GetAbbreviations(Unit unit) Parameters Type Name Description Unit unit The unit to look up Returns Type Description System.String The known abbreviations for the unit, or null if the unit wasn't found or has no known abbreviations. GetDefaultSystem(UnitType, CultureInfo) Determines the default UnitSystem for the specified unit type in the specified culture. Declaration public static UnitSystem GetDefaultSystem(UnitType type, CultureInfo culture) Parameters Type Name Description UnitType type The type of the unit System.Globalization.CultureInfo culture The culture to determine the default system for Returns Type Description UnitSystem The default unit system for the specified combination of unit type and culture, or Metric if no information about the default system is available. GetName(Unit) Gets the name for the specified unit. Declaration public static string GetName(Unit unit) Parameters Type Name Description Unit unit The unit Returns Type Description System.String The name of the unit, or null if the unit is unknown or has no name. GetPreferredAbbreviation(Unit, CultureInfo) Gets the preferred abbreviation for the specified unit. The preferred abbreviation is used for auto-localization. It is the first abbreviation in a list of alternative abbreviations for the unit. Declaration public static string GetPreferredAbbreviation(Unit unit, CultureInfo culture) Parameters Type Name Description Unit unit The unit to look up System.Globalization.CultureInfo culture An optional culture, in which case the method will return the preferred abbreviation for the target culture (currently ignored) Returns Type Description System.String The preferred abbreviation for the unit, or null if the unit wasn't found or has no known abbreviation. GetSystem(Unit) Obtains the UnitSystem of the specified unit. Declaration public static UnitSystem GetSystem(Unit unit) Parameters Type Name Description Unit unit The unit to look up Returns Type Description UnitSystem The unit system of the unit, or NoSystem if the unit is unknown. GetUnitType(Unit) Obtains the UnitType of the specified unit. Declaration public static UnitType GetUnitType(Unit unit) Parameters Type Name Description Unit unit The unit to look up Returns Type Description UnitType The unit type of the unit, or NoType if the unit is unknown. IsMetric(Unit) Determines whether the specified unit belongs to the metric system. Declaration public static bool IsMetric(Unit unit) Parameters Type Name Description Unit unit The unit Returns Type Description System.Boolean true if the unit belongs to the metric system, or false otherwise."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.SegmentPosition.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.SegmentPosition.html",
    "title": "Class SegmentPosition",
    "keywords": "Class SegmentPosition Represents a position within a segment. Inheritance System.Object ExtensionDataContainer SegmentPosition Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class SegmentPosition : ExtensionDataContainer Constructors SegmentPosition() Initializes a new instance of the SegmentPosition class. Declaration public SegmentPosition() SegmentPosition(Int32, Int32) Initializes a new instance with the specified arguments. Declaration public SegmentPosition(int runIndex, int positionInRun) Parameters Type Name Description System.Int32 runIndex The index of the segment element within the segment. System.Int32 positionInRun The position within the run. This is only relevant for System.Net.Mime.MediaTypeNames.Text elements, and has no effect for other segment element types. Properties PositionInRun Gets or sets the position within the subsegment. Declaration public int PositionInRun { get; set; } Property Value Type Description System.Int32 RunIndex Gets or sets the index of the run (segment element) within the segment. Declaration public int RunIndex { get; set; } Property Value Type Description System.Int32 Methods Clone() Creates a new instance that is a deep copy of this instance. Declaration public SegmentPosition Clone() Returns Type Description SegmentPosition A new instance that is a deep copy of this instance. Compare(SegmentPosition, SegmentPosition) Compares two segment positions and returns an indication of their sort order. Declaration public static int Compare(SegmentPosition a, SegmentPosition b) Parameters Type Name Description SegmentPosition a The first of the two items to compare. SegmentPosition b The second of the two items to compare. Returns Type Description System.Int32 An int value less than zero if a precedes b, zero if a denotes the same position as b, and greater than zero if a follows b. Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. ToString() System.Object.ToString Declaration public override string ToString() Returns Type Description System.String A string representation of the object, for display purposes."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.SegmentRange.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.SegmentRange.html",
    "title": "Class SegmentRange",
    "keywords": "Class SegmentRange A selection of content inside a Segment . Inheritance System.Object ExtensionDataContainer SegmentRange Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class SegmentRange : ExtensionDataContainer Constructors SegmentRange() Initializes a new instance of the SegmentRange class. Declaration public SegmentRange() SegmentRange(SegmentPosition, SegmentPosition) Initializes a new instance with the provided positions. Declaration public SegmentRange(SegmentPosition from, SegmentPosition into) Parameters Type Name Description SegmentPosition from The start position. SegmentPosition into The end position. Remarks No checks are performed to verify that the start position precedes the end position. SegmentRange(Int32, Int32, Int32) Initializes a new instance of with the given parameters. Declaration public SegmentRange(int runIndex, int fromIndex, int intoIndex) Parameters Type Name Description System.Int32 runIndex The segment element index (run) of the range. System.Int32 fromIndex The start position in the run. System.Int32 intoIndex The end position (inclusive) in the run. Properties From Gets or sets the start SegmentPosition in the segment. Declaration public SegmentPosition From { get; set; } Property Value Type Description SegmentPosition The start SegmentPosition in the segment. Into Gets or sets the end SegmentPosition in the segment. Declaration public SegmentPosition Into { get; set; } Property Value Type Description SegmentPosition The end SegmentPosition in the segment. Methods Clone() Creates a new instance that is a deep copy of this instance. Declaration public SegmentRange Clone() Returns Type Description SegmentRange A new instance that is a deep copy of this instance. Compare(SegmentRange, SegmentRange) Compares two segment ranges and returns a value indicating their order. Declaration public static int Compare(SegmentRange a, SegmentRange b) Parameters Type Name Description SegmentRange a The first of the two items to compare. SegmentRange b The second of the two items to compare. Returns Type Description System.Int32 An integer value less than zero if a precedes b, zero if a and b are in the same range, and a value greater than zero if a follows b. Only the start positions are compared. Equals(SegmentRange) Compares the current range to another segment range. Declaration public bool Equals(SegmentRange other) Parameters Type Name Description SegmentRange other The range to compare with. Returns Type Description System.Boolean true if both ranges are identical. Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 ToString() System.Object.ToString Declaration public override string ToString() Returns Type Description System.String A string representation of the object, for display purposes."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Sign.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Sign.html",
    "title": "Class Sign",
    "keywords": "Class Sign The sign of a number Inheritance System.Object Sign Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class Sign : Enum Fields Minus A minus sign at the start of the number. Declaration public const Sign Minus Field Value Type Description Sign None No explicit sign at the start of the number. Declaration public const Sign None Field Value Type Description Sign Plus An explicit plus sign at the start of the number. Declaration public const Sign Plus Field Value Type Description Sign value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Similarity.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Similarity.html",
    "title": "Class Similarity",
    "keywords": "Class Similarity A similarity level between segment elements. Inheritance System.Object Similarity Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class Similarity : Enum Fields IdenticalType The items are of the same type (e.g. numbers), but their value differs Declaration public const Similarity IdenticalType Field Value Type Description Similarity IdenticalValueAndType The items are of the same type (e.g. numbers), and their value is identical or near-identical Declaration public const Similarity IdenticalValueAndType Field Value Type Description Similarity None The items are not similar to each other Declaration public const Similarity None Field Value Type Description Similarity value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.TagType.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.TagType.html",
    "title": "Class TagType",
    "keywords": "Class TagType Types of tags appearing in tokenization data. Inheritance System.Object TagType Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class TagType : Enum Fields End Represents an ending tag. Declaration public const TagType End Field Value Type Description TagType LockedContent Group of (locked) tag/text content that should be treated as a single placeable. Declaration public const TagType LockedContent Field Value Type Description TagType Standalone Represents a standalone tag. Declaration public const TagType Standalone Field Value Type Description TagType Start Represents a starting tag. Declaration public const TagType Start Field Value Type Description TagType TextPlaceholder A standalone tag which represents text, not formatting. Declaration public const TagType TextPlaceholder Field Value Type Description TagType Undefined Represents an undefined tag type. This is also used for \"dummy tags\" which may be added to a segment in case a tag was deleted from the original segment. Such a situation occurs when the translation engine deletes tags, but the number of tokens must remain constant in the translation proposal as otherwise the token positions will become invalid. Declaration public const TagType Undefined Field Value Type Description TagType UnmatchedEnd For TMX processing only: unmatched end tag (it pos=end) Declaration public const TagType UnmatchedEnd Field Value Type Description TagType UnmatchedStart For TMX processing only: unmatched start tag (it pos=start) Declaration public const TagType UnmatchedStart Field Value Type Description TagType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AbbreviationToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AbbreviationToken.html",
    "title": "Class AbbreviationToken",
    "keywords": "Class AbbreviationToken A Token used for abreviations. Inheritance System.Object ExtensionDataContainer Token AbbreviationToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span Token.IsPlaceable Token.IsSubstitutable ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class AbbreviationToken : Token, ICloneable<Token> Constructors AbbreviationToken() Initializes a new instance of the AbbreviationToken class. Declaration public AbbreviationToken() AbbreviationToken(Token) Initializes a new instance with the values from another instance, creating a deep copy. Declaration public AbbreviationToken(Token other) Parameters Type Name Description Token other The instance to create a copy for AbbreviationToken(String) Initializes a new instance of the AbbreviationToken class. Declaration public AbbreviationToken(string text) Parameters Type Name Description System.String text The token text Properties Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<> See Also Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AcronymToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AcronymToken.html",
    "title": "Class AcronymToken",
    "keywords": "Class AcronymToken A Token representing acronyms. Inheritance System.Object ExtensionDataContainer Token AcronymToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class AcronymToken : Token, ICloneable<Token> Constructors AcronymToken() Initializes a new instance of the AcronymToken class. Declaration public AcronymToken() AcronymToken(Token) Initializes a new instance with the values from another instance, creating a deep copy. Declaration public AcronymToken(Token other) Parameters Type Name Description Token other The instance to create a copy for AcronymToken(String) Initializes a new instance of the AcronymToken class. Declaration public AcronymToken(string text) Parameters Type Name Description System.String text The text. Properties IsPlaceable IsPlaceable . Returns true if the token represents an acronym, a variable, a URI, or a generic text placeable. Declaration public override bool IsPlaceable { get; } Property Value Type Description System.Boolean Overrides Token.IsPlaceable IsSubstitutable IsSubstitutable . Returns true if this token represents a variable. Declaration public override bool IsSubstitutable { get; } Property Value Type Description System.Boolean Overrides Token.IsSubstitutable Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<> See Also Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AlphanumericToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.AlphanumericToken.html",
    "title": "Class AlphanumericToken",
    "keywords": "Class AlphanumericToken A Token representing alphanumeric tokens. Inheritance System.Object ExtensionDataContainer Token AlphanumericToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class AlphanumericToken : Token, ICloneable<Token> Constructors AlphanumericToken() Initializes a new instance of the AlphanumericToken class. Declaration public AlphanumericToken() AlphanumericToken(Token) Initializes a new instance with the values from another instance, creating a deep copy. Declaration public AlphanumericToken(Token other) Parameters Type Name Description Token other The instance to create a copy for AlphanumericToken(String) Initializes a new instance of the AlphanumericToken class. Declaration public AlphanumericToken(string text) Parameters Type Name Description System.String text The token text Properties IsPlaceable IsPlaceable . Returns true if the token represents an acronym, a variable, a URI, or a generic text placeable. Declaration public override bool IsPlaceable { get; } Property Value Type Description System.Boolean Overrides Token.IsPlaceable IsSubstitutable IsSubstitutable . Returns true if this token represents a variable. Declaration public override bool IsSubstitutable { get; } Property Value Type Description System.Boolean Overrides Token.IsSubstitutable Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<> See Also Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.CharSequenceToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.CharSequenceToken.html",
    "title": "Class CharSequenceToken",
    "keywords": "Class CharSequenceToken A Token representing sequence of characters. Inheritance System.Object ExtensionDataContainer Token CharSequenceToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span Token.IsPlaceable Token.IsSubstitutable ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class CharSequenceToken : Token, ICloneable<Token> Remarks This is used in contexts (such as tokenization of some far-east languages) where word boundaries cannot easily be determined. Constructors CharSequenceToken() Initializes a new instance of the CharSequenceToken class. Declaration public CharSequenceToken() CharSequenceToken(Token) Initializes a new instance of the CharSequenceToken class. Declaration public CharSequenceToken(Token other) Parameters Type Name Description Token other The instance to copy CharSequenceToken(String) Initializes a new instance of the CharSequenceToken class. Declaration public CharSequenceToken(string text) Parameters Type Name Description System.String text The token text Properties Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<> See Also Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.DateTimeToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.DateTimeToken.html",
    "title": "Class DateTimeToken",
    "keywords": "Class DateTimeToken A Token represent date/time tokens. Inheritance System.Object ExtensionDataContainer Token DateTimeToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class DateTimeToken : Token, ICloneable<Token> Constructors DateTimeToken() Initializes a new instance of the DateTimeToken class. Declaration public DateTimeToken() DateTimeToken(DateTimeToken) Initializes a new instance with the values of another token, creating a deep copy. Declaration public DateTimeToken(DateTimeToken other) Parameters Type Name Description DateTimeToken other The other token (must not be null) DateTimeToken(String, DateTime, DateTimePatternType) Initializes a new instance with the specified values. Declaration public DateTimeToken(string text, DateTime dateTime, DateTimePatternType type) Parameters Type Name Description System.String text The text to assign to the token System.DateTime dateTime The System.DateTime object to assign to the token's value DateTimePatternType type The type of the date or time token Properties DateTimeType position of segment within the segment Declaration public DateTimePatternType DateTimeType { get; set; } Property Value Type Description DateTimePatternType IsDateToken Gets a value to indicate whether this token represents a date or not. Declaration public bool IsDateToken { get; } Property Value Type Description System.Boolean IsPlaceable IsPlaceable . Always true for this class. Declaration public override bool IsPlaceable { get; } Property Value Type Description System.Boolean Overrides Token.IsPlaceable IsSubstitutable IsSubstitutable . Always true for this class. Declaration public override bool IsSubstitutable { get; } Property Value Type Description System.Boolean Overrides Token.IsSubstitutable IsTimeToken Gets a value to indicate whether this token represents a time or not. Declaration public bool IsTimeToken { get; } Property Value Type Description System.Boolean Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Value position of segment within the segment Declaration public DateTime Value { get; set; } Property Value Type Description System.DateTime Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<> See Also Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.GeneralPunctuationToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.GeneralPunctuationToken.html",
    "title": "Class GeneralPunctuationToken",
    "keywords": "Class GeneralPunctuationToken A Token representing general punctuation tokens. Inheritance System.Object ExtensionDataContainer Token GeneralPunctuationToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span Token.IsPlaceable Token.IsSubstitutable ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class GeneralPunctuationToken : Token, ICloneable<Token> Constructors GeneralPunctuationToken() Initializes a new instance of the GeneralPunctuationToken class. Declaration public GeneralPunctuationToken() GeneralPunctuationToken(Token) Initializes a new instance of the GeneralPunctuationToken class. Declaration public GeneralPunctuationToken(Token other) Parameters Type Name Description Token other The instance to copy GeneralPunctuationToken(String) Initializes a new instance of the GeneralPunctuationToken class. Declaration public GeneralPunctuationToken(string text) Parameters Type Name Description System.String text The token text Properties Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<> See Also Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.html",
    "title": "Namespace Sdl.Core.Bcm.BcmModel.Tokenization.Tokens",
    "keywords": "Namespace Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Classes AbbreviationToken A Token used for abreviations. AcronymToken A Token representing acronyms. AlphanumericToken A Token representing alphanumeric tokens. CharSequenceToken A Token representing sequence of characters. DateTimeToken A Token represent date/time tokens. GeneralPunctuationToken A Token representing general punctuation tokens. IPAdressToken Used for IP address tokens. MeasureToken A Token representing a measurement. NumberToken A Token representing a numerical value. TagToken A Token representing a tag element. Token Abstract class for different token implementations. URIToken An URI token that is placeable but is not substitutable. VariableToken A Token representing a substitutable variable. WhiteSpaceToken A Token representing a a non-empty sequence of whitespace characters. WordToken A Token which represents a non-specific word."
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.IPAdressToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.IPAdressToken.html",
    "title": "Class IPAdressToken",
    "keywords": "Class IPAdressToken Used for IP address tokens. Inheritance System.Object ExtensionDataContainer Token IPAdressToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class IPAdressToken : Token, ICloneable<Token> Constructors IPAdressToken() Initializes a new instance of the IPAdressToken class. Declaration public IPAdressToken() IPAdressToken(Token) Initializes a new instance with the values from another instance, creating a deep copy. Declaration public IPAdressToken(Token other) Parameters Type Name Description Token other The instance to create a copy for IPAdressToken(String) Initializes a new instance of the IPAdressToken class. Declaration public IPAdressToken(string text) Parameters Type Name Description System.String text The token text Properties IsPlaceable IsPlaceable . Returns true if the token represents an acronym, a variable, a URI, or a generic text placeable. Declaration public override bool IsPlaceable { get; } Property Value Type Description System.Boolean Overrides Token.IsPlaceable IsSubstitutable IsSubstitutable . Returns true if this token represents a variable. Declaration public override bool IsSubstitutable { get; } Property Value Type Description System.Boolean Overrides Token.IsSubstitutable Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.MeasureToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.MeasureToken.html",
    "title": "Class MeasureToken",
    "keywords": "Class MeasureToken A Token representing a measurement. Inheritance System.Object ExtensionDataContainer Token NumberToken MeasureToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members NumberToken.SetValue(String, String, String, NumberFormatInfo) NumberToken.FormatNumber(CultureInfo) NumberToken.FormatNumber(NumberFormatInfo) NumberToken.Value NumberToken.ValueValid NumberToken.Sign NumberToken.RawSign NumberToken.DecimalSeparator NumberToken.GroupSeparator NumberToken.AlternateGroupSeparator NumberToken.AlternateDecimalSeparator NumberToken.RawFractionalDigits NumberToken.RawDecimalDigits Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class MeasureToken : NumberToken, ICloneable<Token> Remarks A measurement is defined as a combination of a number followed by a unit. Constructors MeasureToken() Initializes a new instance of the MeasureToken class. Declaration public MeasureToken() MeasureToken(MeasureToken) Initializes a new instance with the values of another instance, creating a deep copy. Declaration public MeasureToken(MeasureToken other) Parameters Type Name Description MeasureToken other The instance to create a copy of MeasureToken(String, NumberToken, Unit, String, Char) Initializes a new instance with the specified values. This constructor is for internal purposes only and should not be used directly. Declaration public MeasureToken(string text, NumberToken numericPart, Unit unit, string unitString, char unitSeparator) Parameters Type Name Description System.String text NumberToken numericPart Unit unit System.String unitString System.Char unitSeparator MeasureToken(String, String, String, String, Unit, String, Char, NumberFormatInfo) Initializes a new instance with the specified values. Declaration public MeasureToken(string text, string sign, string decimalPart, string fractionalPart, Unit unit, string unitString, char unitSeparator, NumberFormatInfo format) Parameters Type Name Description System.String text The token text to assign to the token System.String sign The sign of the numeric value System.String decimalPart The decimal part of the numeric value System.String fractionalPart The fractional part of the numeric value Unit unit The unit of the measurement System.String unitString The textual unit of the measurement System.Char unitSeparator The unit separator used between the numeric part and the unit System.Globalization.NumberFormatInfo format The token's culture default number format info, to determine whether primary or alternate separators are used Properties IsPlaceable IsPlaceable . Always true for this class. Declaration public override bool IsPlaceable { get; } Property Value Type Description System.Boolean Overrides NumberToken.IsPlaceable IsSubstitutable IsSubstitutable . Always true for this class. Declaration public override bool IsSubstitutable { get; } Property Value Type Description System.Boolean Overrides NumberToken.IsSubstitutable IsValid Gets a boolean value which indicates whether this measurement is valid. A measurement is valid if either the unit is not the default unit ( Unit.NoUnit ) or the UnitString is set. In most cases, both are set by the tokenizer. Declaration public bool IsValid { get; } Property Value Type Description System.Boolean Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides NumberToken.Type Unit Gets or sets the unit. Declaration public Unit Unit { get; set; } Property Value Type Description Unit UnitSeparator Gets or sets the unit separator. Declaration public char UnitSeparator { get; set; } Property Value Type Description System.Char UnitString Gets or sets the unit string, in case the unit is unknown. Declaration public string UnitString { get; set; } Property Value Type Description System.String Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides NumberToken.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides NumberToken.Equals(Object) GetHashCode() System.Object.GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides NumberToken.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides NumberToken.GetSimilarity(Token) SetValue(Token, Boolean) Overwrites the current token's value with the value from blueprint , which also must be a MeasureToken . Note that only the value and the type are overwritten, not the textual representation. Declaration public bool SetValue(Token blueprint, bool keepNumericSeparators) Parameters Type Name Description Token blueprint The token to take the value from System.Boolean keepNumericSeparators Applicable to numeric (number and measurement) tokens only: if true, do not override the original group and decimal separators. Returns Type Description System.Boolean A flag indicating whether the token's value or type were changed. Implements ICloneable<T> System.IEquatable<> See Also NumberToken"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.NumberToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.NumberToken.html",
    "title": "Class NumberToken",
    "keywords": "Class NumberToken A Token representing a numerical value. Inheritance System.Object ExtensionDataContainer Token NumberToken MeasureToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class NumberToken : Token, ICloneable<Token> Constructors NumberToken() Initializes a new instance of the NumberToken class. Declaration public NumberToken() NumberToken(NumberToken) Initializes a new instance with the values of another instance, creating a deep copy. Declaration public NumberToken(NumberToken other) Parameters Type Name Description NumberToken other The instance to copy NumberToken(String, NumericSeparator, NumericSeparator, Char, Char, Sign, String, String, String) Initializes a new instance with the specified values. Declaration public NumberToken(string text, NumericSeparator groupSeparator, NumericSeparator decimalSeparator, char alternateGroupSeparator, char alternateDecimalSeparator, Sign sign, string rawSign, string rawDecimalDigits, string rawFractionalDigits) Parameters Type Name Description System.String text The text of the token, as it appeared in the input NumericSeparator groupSeparator The type of group separator used NumericSeparator decimalSeparator The type of decimal separator used System.Char alternateGroupSeparator The character of an alternative group separator, if used System.Char alternateDecimalSeparator The character of an alternative decimal separator, if used Sign sign The type of sign used System.String rawSign The \"raw text\" of the sign System.String rawDecimalDigits The \"raw decimal digits\", without separators, between 0-9 System.String rawFractionalDigits The \"raw fractional digits\", without separators, between 0-9 NumberToken(String, String, String, String, NumberFormatInfo) Initializes a new instance with the specified values. Declaration public NumberToken(string text, string sign, string decimalPart, string fractionalPart, NumberFormatInfo format) Parameters Type Name Description System.String text The token text System.String sign The sign of the numeric value System.String decimalPart The decimal part of the numeric value System.String fractionalPart The fractional part of the numeric value System.Globalization.NumberFormatInfo format The number format of the token's culture, used to determine whether default or alternate separators were used Properties AlternateDecimalSeparator Gets or sets an alternate decimal separator, which is a single char if an alternate separator is used, or the null character if no alternate separator is used. Declaration public char AlternateDecimalSeparator { get; set; } Property Value Type Description System.Char AlternateGroupSeparator Gets or sets an alternate group separator, which is a single char if an alternate separator is used, or the null character if no alternate separator is used. Declaration public char AlternateGroupSeparator { get; set; } Property Value Type Description System.Char DecimalSeparator Gets or sets the decimal separator Declaration public NumericSeparator DecimalSeparator { get; set; } Property Value Type Description NumericSeparator GroupSeparator Gets or sets the group separator Declaration public NumericSeparator GroupSeparator { get; set; } Property Value Type Description NumericSeparator IsPlaceable IsPlaceable . Always true for this class. Declaration public override bool IsPlaceable { get; } Property Value Type Description System.Boolean Overrides Token.IsPlaceable IsSubstitutable IsSubstitutable . Always true for this class. Declaration public override bool IsSubstitutable { get; } Property Value Type Description System.Boolean Overrides Token.IsSubstitutable RawDecimalDigits Gets or sets the raw decimal digits, which are a sequence of digits without separators or signs. Declaration public string RawDecimalDigits { get; set; } Property Value Type Description System.String RawFractionalDigits Gets or sets the raw fractional digits, which are a sequence of digits without separators or signs. Declaration public string RawFractionalDigits { get; set; } Property Value Type Description System.String RawSign Gets or sets the \"raw\" sign, i.e. the textual representation of the sign Declaration public string RawSign { get; set; } Property Value Type Description System.String Sign Gets or sets the sign. Declaration public Sign Sign { get; set; } Property Value Type Description Sign Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Value Gets or sets the numeric value. Do not use the setter, it is for internal purposes only. Declaration public double Value { get; set; } Property Value Type Description System.Double ValueValid Gets or sets the flag whether the numeric value is valid or not. Do not use the setter, it is for internal purposes only. Declaration public bool ValueValid { get; set; } Property Value Type Description System.Boolean Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. FormatNumber(CultureInfo) Format the number according to the provided culture, applying overrides for separators as appropriate. This method uses a proprietary implementation for the formatting and does not use the default .Net formatting methods. Declaration public string FormatNumber(CultureInfo culture) Parameters Type Name Description System.Globalization.CultureInfo culture Returns Type Description System.String FormatNumber(NumberFormatInfo) Format the number according to the provided number format information, applying overrides for separators as appropriate. This method uses a proprietary implementation for the formatting and does not use the default .Net formatting methods. Declaration public string FormatNumber(NumberFormatInfo nfi) Parameters Type Name Description System.Globalization.NumberFormatInfo nfi Returns Type Description System.String GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) SetValue(Token, Boolean) Overwrites the current token's value with the value from blueprint , which also must be a . Note that only the value and the type are overwritten, not the textual representation. Declaration public bool SetValue(Token blueprint, bool keepNumericSeparators) Parameters Type Name Description Token blueprint The token to take the value from System.Boolean keepNumericSeparators Applicable to numeric (number and measurement) tokens only: if true, do not override the original group and decimal separators. Returns Type Description System.Boolean A flag indicating whether the token's value or type were changed. SetValue(String, String, String, NumberFormatInfo) Overwrites the current token values with the specified values. Declaration public void SetValue(string sign, string decimalPart, string fractionalPart, NumberFormatInfo format) Parameters Type Name Description System.String sign The sign of the numeric value System.String decimalPart The decimal part of the numeric value System.String fractionalPart The fractional part of the numeric value System.Globalization.NumberFormatInfo format The number format of the token's culture, used to determine whether default or alternate separators were used Implements ICloneable<T> System.IEquatable<> See Also Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.TagToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.TagToken.html",
    "title": "Class TagToken",
    "keywords": "Class TagToken A Token representing a tag element. Inheritance System.Object ExtensionDataContainer Token TagToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.Text Token.Span ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class TagToken : Token, ICloneable<Token> Constructors TagToken() Initializes a new instance with default values (used for XML serialization only). Declaration public TagToken() TagToken(TagType, String, Int32) Initializes a new instance of the Tag class with the specified type and anchor. The alignment anchor will be set to zero. Declaration public TagToken(TagType type, string tagId, int anchor) Parameters Type Name Description TagType type The tag type. System.String tagId The tag ID (user-defined) System.Int32 anchor The tag anchor. TagToken(TagType, String, Int32, Int32, String) Initializes a new instance of the Tag class with the specified type and anchor. Declaration public TagToken(TagType type, string tagId, int anchor, int alignmentAnchor, string textEquivalent) Parameters Type Name Description TagType type The tag type. System.String tagId The tag ID (user-defined) System.Int32 anchor The tag anchor. System.Int32 alignmentAnchor An alignment anchor (cross-segment), if available System.String textEquivalent A text equivalent string (ignored if the tag type is not TextPlaceholder or LockedContent) TagToken(TagType, String, Int32, Int32, String, Boolean) Initializes a new instance of the Tag class with the specified type and anchor. Declaration public TagToken(TagType type, string tagId, int anchor, int alignmentAnchor, string textEquivalent, bool canHide) Parameters Type Name Description TagType type The tag type. System.String tagId The tag ID (user-defined) System.Int32 anchor The tag anchor. System.Int32 alignmentAnchor An alignment anchor (cross-segment), if available System.String textEquivalent A text equivalent string (ignored if the tag type is not TextPlaceholder or LockedContent) System.Boolean canHide True if the tag represents inline formatting, false otherwise TagToken(TagToken) Initializes a new instance of the Tag class from another instance. Declaration public TagToken(TagToken other) Parameters Type Name Description TagToken other The other instance. Properties AlignmentAnchor Gets or sets the alignment anchor, which is used to align cross-segment tags. It only needs to be set for the start tag. Declaration public Nullable<int> AlignmentAnchor { get; } Property Value Type Description System.Nullable < System.Int32 > Anchor Gets or sets the tag anchor, which is used to bracket two tags (connect start and end tag). The anchor is only relevant for start and end tags and has no cross-segment semantics. Declaration public Nullable<int> Anchor { get; set; } Property Value Type Description System.Nullable < System.Int32 > CanHide Gets or sets the CanHide flag Declaration public Nullable<bool> CanHide { get; set; } Property Value Type Description System.Nullable < System.Boolean > IsPlaceable IsPlaceable . Always true for this class. Declaration public override bool IsPlaceable { get; } Property Value Type Description System.Boolean Overrides Token.IsPlaceable IsSubstitutable IsSubstitutable . Always true for this class. Declaration public override bool IsSubstitutable { get; } Property Value Type Description System.Boolean Overrides Token.IsSubstitutable TagId Gets or sets the tag ID which is a cross-format ID assigned by the filters and which may be used to represent a cross-format formatting class (such as \"bold\"). Declaration public string TagId { get; set; } Property Value Type Description System.String TagType Gets or sets the tag type. Declaration public TagType TagType { get; set; } Property Value Type Description TagType TextEquivalent Gets or sets the text equivalent string. This will only be valid for text placeholder tags. Declaration public string TextEquivalent { get; set; } Property Value Type Description System.String Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() Clones this instance. Declaration public override Token Clone() Returns Type Description Token Overrides Token.Clone() Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean GetHashCode() System.Object.GetHashCode Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this object Overrides Token.GetHashCode() GetSimilarity(Token) Computes the degree of similarity to another instance. Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) GetWeakHashCode() See GetWeakHashCode() Declaration public override int GetWeakHashCode() Returns Type Description System.Int32 A hash code independent of tag anchors. Overrides Token.GetWeakHashCode() SeriliazedWihoutAnchor() Same as ToString, but doesn't includes AlignmentAnchor Declaration public string SeriliazedWihoutAnchor() Returns Type Description System.String ToString() System.Object.ToString Declaration public override string ToString() Returns Type Description System.String A string representation of the object, for display purposes. Overrides Token.ToString() Implements ICloneable<T> System.IEquatable<> See Also Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.Token.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.Token.html",
    "title": "Class Token",
    "keywords": "Class Token Abstract class for different token implementations. Inheritance System.Object ExtensionDataContainer Token AbbreviationToken AcronymToken AlphanumericToken CharSequenceToken DateTimeToken GeneralPunctuationToken IPAdressToken NumberToken TagToken URIToken VariableToken WhiteSpaceToken WordToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public abstract class Token : ExtensionDataContainer, ICloneable<Token> Constructors Token() Initializes a new instance with default values. Declaration protected Token() Token(Token) Initializes a new instance with the values from another instance, creating a deep copy. Declaration protected Token(Token other) Parameters Type Name Description Token other The instance to copy Token(String) Initializes a new instance with the specified token text. Declaration protected Token(string text) Parameters Type Name Description System.String text The token text Properties IsPlaceable Gets a boolean value indicating whether this token represents a placeable. Always returns false for this class. Derived classes should override appropriately. Declaration public virtual bool IsPlaceable { get; } Property Value Type Description System.Boolean IsSubstitutable Gets a boolean value indicating whether this token can be substituted (e.g. auto-localized) across segments. All substitutables are placeables, but not all placeables can be substituted (e.g. acronyms). Declaration public virtual bool IsSubstitutable { get; } Property Value Type Description System.Boolean Span Gets or sets the span of text in the Segment representing the Token . Declaration public SegmentRange Span { get; set; } Property Value Type Description SegmentRange The text span. Text Gets or sets the token text. Declaration public string Text { get; set; } Property Value Type Description System.String The token text. Type Gets the type of Token . Should be overriden with names that uniquely identify the implementations. Declaration protected abstract string Type { get; } Property Value Type Description System.String The type. Methods Clone() Clones this instance. Declaration public virtual Token Clone() Returns Type Description Token Equals(Token) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public virtual bool Equals(Token other) Parameters Type Name Description Token other Returns Type Description System.Boolean GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 GetSimilarity(Token) Computes the degree of similarity to another instance. Declaration public virtual Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. GetWeakHashCode() Gets the weak hash code. Declaration public virtual int GetWeakHashCode() Returns Type Description System.Int32 ToString() Converts to string. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Implements ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.URIToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.URIToken.html",
    "title": "Class URIToken",
    "keywords": "Class URIToken An URI token that is placeable but is not substitutable. Inheritance System.Object ExtensionDataContainer Token URIToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class URIToken : Token, ICloneable<Token> Constructors URIToken() Initializes a new instance of the URIToken class. Declaration public URIToken() URIToken(Token) Initializes a new instance of the URIToken class. Declaration public URIToken(Token other) Parameters Type Name Description Token other The instance to copy URIToken(String) Initializes a new instance of the URIToken class. Declaration public URIToken(string text) Parameters Type Name Description System.String text The token text Properties IsPlaceable IsPlaceable . Returns true if the token represents an acronym, a variable, a URI, or a generic text placeable. Declaration public override bool IsPlaceable { get; } Property Value Type Description System.Boolean Overrides Token.IsPlaceable IsSubstitutable IsSubstitutable . Returns true if this token represents a variable. Declaration public override bool IsSubstitutable { get; } Property Value Type Description System.Boolean Overrides Token.IsSubstitutable Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.VariableToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.VariableToken.html",
    "title": "Class VariableToken",
    "keywords": "Class VariableToken A Token representing a substitutable variable. Inheritance System.Object ExtensionDataContainer Token VariableToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class VariableToken : Token, ICloneable<Token> Constructors VariableToken() Initializes a new instance of the VariableToken class. Declaration public VariableToken() VariableToken(Token) Initializes a new instance with the values from another instance, creating a deep copy. Declaration public VariableToken(Token other) Parameters Type Name Description Token other The instance to create a copy for VariableToken(String) Initializes a new instance of the VariableToken class. Declaration public VariableToken(string text) Parameters Type Name Description System.String text The token text Properties IsPlaceable IsPlaceable . Returns true if the token represents an acronym, a variable, a URI, or a generic text placeable. Declaration public override bool IsPlaceable { get; } Property Value Type Description System.Boolean Overrides Token.IsPlaceable IsSubstitutable IsSubstitutable . Returns true if this token represents a variable. Declaration public override bool IsSubstitutable { get; } Property Value Type Description System.Boolean Overrides Token.IsSubstitutable Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<> See Also Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.WhiteSpaceToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.WhiteSpaceToken.html",
    "title": "Class WhiteSpaceToken",
    "keywords": "Class WhiteSpaceToken A Token representing a a non-empty sequence of whitespace characters. Inheritance System.Object ExtensionDataContainer Token WhiteSpaceToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span Token.IsPlaceable Token.IsSubstitutable ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class WhiteSpaceToken : Token, ICloneable<Token> Constructors WhiteSpaceToken() Initializes a new instance of the WhiteSpaceToken class. Declaration public WhiteSpaceToken() WhiteSpaceToken(Token) Initializes a new instance of the WhiteSpaceToken class. Declaration public WhiteSpaceToken(Token other) Parameters Type Name Description Token other The instance to copy WhiteSpaceToken(String) Initializes a new instance of the WhiteSpaceToken class. Declaration public WhiteSpaceToken(string text) Parameters Type Name Description System.String text The token text Properties Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<> See Also Token"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.WordToken.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Tokens.WordToken.html",
    "title": "Class WordToken",
    "keywords": "Class WordToken A Token which represents a non-specific word. Inheritance System.Object ExtensionDataContainer Token WordToken Implements ICloneable < Token > System.IEquatable < Token > Inherited Members Token.Equals(Token) Token.GetWeakHashCode() Token.ToString() Token.Text Token.Span Token.IsPlaceable Token.IsSubstitutable ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel.Tokenization.Tokens Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class WordToken : Token, ICloneable<Token> Constructors WordToken() Initializes a new instance with default values Declaration public WordToken() WordToken(WordToken) Initializes a new instance with the values from another instance, creating a deep copy. Declaration public WordToken(WordToken other) Parameters Type Name Description WordToken other The instance to create a copy for WordToken(String) Initializes a new instance with the specified token text Declaration public WordToken(string text) Parameters Type Name Description System.String text Properties IsStopword Gets or sets whether this token is a stop word. Declaration public bool IsStopword { get; set; } Property Value Type Description System.Boolean Stem An optional stem to assign to this token. Stems are used for TM search and scoring. Declaration public string Stem { get; set; } Property Value Type Description System.String Type Gets the type of Token . Declaration protected override string Type { get; } Property Value Type Description System.String The type. Overrides Token.Type Methods Clone() See Clone() Declaration public override Token Clone() Returns Type Description Token A new instance that is a deep copy of this instance. Overrides Token.Clone() Equals(Object) System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current object. Returns Type Description System.Boolean true if the specified object is equal to the current object; otherwise, false. GetHashCode() System.Object.GetHashCode(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides Token.GetHashCode() GetSimilarity(Token) GetSimilarity(Token) Declaration public override Similarity GetSimilarity(Token other) Parameters Type Name Description Token other The other instance. Returns Type Description Similarity A value indicating the degree of similarity to the provided segment element. Overrides Token.GetSimilarity(Token) Implements ICloneable<T> System.IEquatable<>"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Unit.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.Unit.html",
    "title": "Class Unit",
    "keywords": "Class Unit Enumerates the units supported by Sdl.LanguagePlatform.Core.Tokenization.Unit Inheritance System.Object Unit Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class Unit : Enum Fields BISacre BISacre Declaration public const Unit BISacre Field Value Type Description Unit BISbuUK BISbuUK Declaration public const Unit BISbuUK Field Value Type Description Unit BISbuUSDry BISbuUSDry Declaration public const Unit BISbuUSDry Field Value Type Description Unit BISflozUK BISflozUK Declaration public const Unit BISflozUK Field Value Type Description Unit BISflozUS BISflozUS Declaration public const Unit BISflozUS Field Value Type Description Unit BISft BISft Declaration public const Unit BISft Field Value Type Description Unit BISft2 BISft2 Declaration public const Unit BISft2 Field Value Type Description Unit BISfurlong BISfurlong Declaration public const Unit BISfurlong Field Value Type Description Unit BISgalUK BISgalUK Declaration public const Unit BISgalUK Field Value Type Description Unit BISgalUS BISgalUS Declaration public const Unit BISgalUS Field Value Type Description Unit BISin BISin Declaration public const Unit BISin Field Value Type Description Unit BISin2 BISin2 Declaration public const Unit BISin2 Field Value Type Description Unit BISlb BISlb Declaration public const Unit BISlb Field Value Type Description Unit BISlongHW BISlongHW Declaration public const Unit BISlongHW Field Value Type Description Unit BISlongTon BISlongTon Declaration public const Unit BISlongTon Field Value Type Description Unit BISmi BISmi Declaration public const Unit BISmi Field Value Type Description Unit BISmi2 BISmi2 Declaration public const Unit BISmi2 Field Value Type Description Unit BISoz BISoz Declaration public const Unit BISoz Field Value Type Description Unit BISptUK BISptUK Declaration public const Unit BISptUK Field Value Type Description Unit BISptUS BISptUS Declaration public const Unit BISptUS Field Value Type Description Unit BISptUSDry BISptUSDry Declaration public const Unit BISptUSDry Field Value Type Description Unit BISqtUK BISqtUK Declaration public const Unit BISqtUK Field Value Type Description Unit BISshortHW BISshortHW Declaration public const Unit BISshortHW Field Value Type Description Unit BISshortTon BISshortTon Declaration public const Unit BISshortTon Field Value Type Description Unit BISstone BISstone Declaration public const Unit BISstone Field Value Type Description Unit BISyd BISyd Declaration public const Unit BISyd Field Value Type Description Unit BISyd2 BISyd2 Declaration public const Unit BISyd2 Field Value Type Description Unit Currency The unit represents a currency Declaration public const Unit Currency Field Value Type Description Unit Ma Metric are Declaration public const Unit Ma Field Value Type Description Unit Mcentigrade Mcentigrade Declaration public const Unit Mcentigrade Field Value Type Description Unit Mcl Metric centiliters Declaration public const Unit Mcl Field Value Type Description Unit Mcm Metric centimeters Declaration public const Unit Mcm Field Value Type Description Unit Mcm2 Metric square centimeters Declaration public const Unit Mcm2 Field Value Type Description Unit Mcm3 Metric cubic centimeters Declaration public const Unit Mcm3 Field Value Type Description Unit Mdegree Mdegree Declaration public const Unit Mdegree Field Value Type Description Unit Mdl Metric deciliters Declaration public const Unit Mdl Field Value Type Description Unit Mdm Metric decimeters Declaration public const Unit Mdm Field Value Type Description Unit Mfahrenheit Mfahrenheit Declaration public const Unit Mfahrenheit Field Value Type Description Unit Mg Metric grams Declaration public const Unit Mg Field Value Type Description Unit Mha Metric hectare Declaration public const Unit Mha Field Value Type Description Unit Mkelvin Mkelvin Declaration public const Unit Mkelvin Field Value Type Description Unit Mkg Metric kilograms Declaration public const Unit Mkg Field Value Type Description Unit Mkm Metric kilometers Declaration public const Unit Mkm Field Value Type Description Unit Mkm2 Metric square kilometers Declaration public const Unit Mkm2 Field Value Type Description Unit Ml Metric liters Declaration public const Unit Ml Field Value Type Description Unit Mm Metric meters Declaration public const Unit Mm Field Value Type Description Unit Mm2 Metric square meters Declaration public const Unit Mm2 Field Value Type Description Unit Mm3 Metric cubic meters Declaration public const Unit Mm3 Field Value Type Description Unit Mmg Metric milligrams Declaration public const Unit Mmg Field Value Type Description Unit Mml Metric milliliters Declaration public const Unit Mml Field Value Type Description Unit Mmm Metric millimeters Declaration public const Unit Mmm Field Value Type Description Unit Mmm2 Metric square millimeters Declaration public const Unit Mmm2 Field Value Type Description Unit Mpercent Mpercent Declaration public const Unit Mpercent Field Value Type Description Unit Mt Metric tons Declaration public const Unit Mt Field Value Type Description Unit NoUnit A sentinel, should not be used Declaration public const Unit NoUnit Field Value Type Description Unit Other The unit represents another, general unit for which no cross-system conversion will be available. Declaration public const Unit Other Field Value Type Description Unit value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.UnitSystem.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.UnitSystem.html",
    "title": "Class UnitSystem",
    "keywords": "Class UnitSystem Enumeration with different measurement unit systems. Inheritance System.Object UnitSystem Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class UnitSystem : Enum Fields BIS BIS (British Imperial System) Declaration public const UnitSystem BIS Field Value Type Description UnitSystem BISUK BIS (United Kingdom) Declaration public const UnitSystem BISUK Field Value Type Description UnitSystem BISUSDry US Dry Measure Declaration public const UnitSystem BISUSDry Field Value Type Description UnitSystem BISUSFluid US Fluid Measure Declaration public const UnitSystem BISUSFluid Field Value Type Description UnitSystem Metric Metric Declaration public const UnitSystem Metric Field Value Type Description UnitSystem NoSystem No particular system, unknown, or not yet identified Declaration public const UnitSystem NoSystem Field Value Type Description UnitSystem value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.UnitType.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.Tokenization.UnitType.html",
    "title": "Class UnitType",
    "keywords": "Class UnitType Enumeration of different measurement unit types. Inheritance System.Object UnitType Namespace : Sdl.Core.Bcm.BcmModel.Tokenization Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public sealed class UnitType : Enum Fields Area Area Declaration public const UnitType Area Field Value Type Description UnitType Capacity Capacity Declaration public const UnitType Capacity Field Value Type Description UnitType Length Length Declaration public const UnitType Length Field Value Type Description UnitType Mass Mass Declaration public const UnitType Mass Field Value Type Description UnitType NoType Unknown or untyped (such as percent) Declaration public const UnitType NoType Field Value Type Description UnitType Other Other (not participating in auto-conversion) Declaration public const UnitType Other Field Value Type Description UnitType Temperature Temperature Declaration public const UnitType Temperature Field Value Type Description UnitType value__ Declaration public int value__ Field Value Type Description System.Int32"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.TranslationOrigin.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.TranslationOrigin.html",
    "title": "Class TranslationOrigin",
    "keywords": "Class TranslationOrigin Contains information on the origin of translation. Inheritance System.Object ExtensionDataContainer MetadataContainer TranslationOrigin Implements System.IEquatable < MetadataContainer > ICloneable < TranslationOrigin > System.IEquatable < TranslationOrigin > Inherited Members MetadataContainer.GetMetadata(String) MetadataContainer.SetMetadata(String, String) MetadataContainer.Equals(MetadataContainer) MetadataContainer.ShouldSerialize_metadata() MetadataContainer.Metadata ExtensionDataContainer.ExtensionData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public class TranslationOrigin : MetadataContainer, ICloneable<TranslationOrigin> Constructors TranslationOrigin() Initializes a new instance of the TranslationOrigin class. Declaration public TranslationOrigin() TranslationOrigin(String, String, Int32, Boolean, Boolean, TextContextMatchLevel, String, TranslationOrigin) Initializes a new instance of the TranslationOrigin class. Declaration public TranslationOrigin(string originType, string originSystem, int matchPercent, bool isStructureContextMatch, bool isSidContextMatch, TextContextMatchLevel textContextMatchLevel, string originalTranslationHash, TranslationOrigin originBeforeAdaptation) Parameters Type Name Description System.String originType Type of the origin. System.String originSystem The origin system. System.Int32 matchPercent The match percent. System.Boolean isStructureContextMatch if set to true the translation is a structure context match. System.Boolean isSidContextMatch if set to true the translation is a sID context match. TextContextMatchLevel textContextMatchLevel The text context match level. System.String originalTranslationHash The original translation hash. TranslationOrigin originBeforeAdaptation The TranslationOrigin before adaptation. Properties ChangeDisplayUsername Gets or sets the created_by_username metadata. Declaration public string ChangeDisplayUsername { get; set; } Property Value Type Description System.String The created_by_username metadata value. CreatedBy Gets or sets the created_by metadata. Declaration public string CreatedBy { get; set; } Property Value Type Description System.String The created_by metadata value. CreationDate Gets or sets the created_on metadata. Declaration public string CreationDate { get; set; } Property Value Type Description System.String The created_on metadata value. CreationDisplayUsername Gets or sets the created_by_username metadata. Declaration public string CreationDisplayUsername { get; set; } Property Value Type Description System.String The created_by_username metadata value. IsSidContextMatch If true , indicates that the translation originates from a system that takes ID context information into account, and that the ID context matches. Declaration public bool IsSidContextMatch { get; set; } Property Value Type Description System.Boolean true if this instance is sID context match; otherwise, false . IsStructureContextMatch Gets or sets a value indicating whether this instance is structure context match. Declaration public bool IsStructureContextMatch { get; set; } Property Value Type Description System.Boolean true if this instance is structure context match; otherwise, false . Remarks If true , indicates that the translation originates from a system that takes structural context information into account, and that the structure context matches. LastModifiedDate Gets or sets the modified_on metadata. Declaration public string LastModifiedDate { get; set; } Property Value Type Description System.String The modified_on metadata value. LastModifiedUserId Gets or sets the last_modified_by metadata. Declaration public string LastModifiedUserId { get; set; } Property Value Type Description System.String The last_modified_by metadata value. LastUsedDate Gets or sets the used_on metadata. Declaration public string LastUsedDate { get; set; } Property Value Type Description System.String The used_on metadata value. LastUsedUserId Gets or sets the used_by metadata. Declaration public string LastUsedUserId { get; set; } Property Value Type Description System.String The used_by metadata value. MatchPercent Gets or sets the match percent. Declaration public int MatchPercent { get; set; } Property Value Type Description System.Int32 The match value for a translation memory match, or the confidence level for a machine translation. Should be a percentage value from 0 - 100% Remarks When a match gets adapted by interactive translation, the original match value can be read from this property on the OriginBeforeAdaptation properties. OriginalTranslationHash A hash value that identifies the entry in the TM that provided the translation. This is used to update the correct TM entry if a translator provides an updated version of the translation. Declaration public string OriginalTranslationHash { get; set; } Property Value Type Description System.String The original translation hash. OriginBeforeAdaptation Gets or sets the TranslationOrigin before adaptation. Declaration public TranslationOrigin OriginBeforeAdaptation { get; set; } Property Value Type Description TranslationOrigin The TranslationOrigin before adaptation. Remarks Null or the origin information for the originally adapted target content. OriginSystem Gets or sets the origin system. Declaration public string OriginSystem { get; set; } Property Value Type Description System.String The originating system name for a segment translation. OriginType Gets or sets the translation origin type. Declaration public string OriginType { get; set; } Property Value Type Description System.String The translation origin type. Remarks Seed DefaultTranslationOrigin for default values. TextContextMatchLevel Indicates whether the match originates from a source where the textual surrounding content corresponds to the text surrounding this segment. Declaration public TextContextMatchLevel TextContextMatchLevel { get; set; } Property Value Type Description TextContextMatchLevel The TextContextMatchLevel value. UseCount Declaration public string UseCount { get; set; } Property Value Type Description System.String UseDisplayUsername Gets or sets the use_by_username metadata. Declaration public string UseDisplayUsername { get; set; } Property Value Type Description System.String The use_by_username metadata value. Methods Clone() Clones this instance. Declaration public TranslationOrigin Clone() Returns Type Description TranslationOrigin A deep clone of this instance. Equals(TranslationOrigin) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(TranslationOrigin other) Parameters Type Name Description TranslationOrigin other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false . Equals(Object) Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides MetadataContainer.Equals(Object) GetHashCode() Performs a deep-equals comparison. System.Object.Equals(object) Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides MetadataContainer.GetHashCode() Implements System.IEquatable<> ICloneable<T> System.IEquatable<> See Also MetadataContainer"
  },
  "api/BCM/Sdl.Core.Bcm.BcmModel.TranslationOriginMetaData.html": {
    "href": "api/BCM/Sdl.Core.Bcm.BcmModel.TranslationOriginMetaData.html",
    "title": "Class TranslationOriginMetaData",
    "keywords": "Class TranslationOriginMetaData Metadata keys used for TranslationOrigin metadata. Inheritance System.Object TranslationOriginMetaData Namespace : Sdl.Core.Bcm.BcmModel Assembly : Sdl.Core.Bcm.BcmModel.dll Syntax public static class TranslationOriginMetaData : Object Fields ChangeDisplayUsername The display name of the user who last modified the translation. Declaration public const string ChangeDisplayUsername = \"modified_by_username\" Field Value Type Description System.String CreatedBy The user who created the translation. Declaration public const string CreatedBy = \"created_by\" Field Value Type Description System.String CreationDate The translation creation date. Declaration public const string CreationDate = \"created_on\" Field Value Type Description System.String CreationDisplayUsername The display name of the user who created the translation. Declaration public const string CreationDisplayUsername = \"created_by_username\" Field Value Type Description System.String LastModifiedDate The translation modified date. Declaration public const string LastModifiedDate = \"modified_on\" Field Value Type Description System.String LastModifiedUserId The Id of the last user who updated the translation. Declaration public const string LastModifiedUserId = \"last_modified_by\" Field Value Type Description System.String LastUsedDate The date when the translation was last applied. Declaration public const string LastUsedDate = \"used_on\" Field Value Type Description System.String LastUsedUserId The Id of the last user who applied the translation. Declaration public const string LastUsedUserId = \"used_by\" Field Value Type Description System.String UseCount The translation usage count. Declaration public const string UseCount = \"use_count\" Field Value Type Description System.String UseDisplayUsername The display name of the user who last applied the translation. Declaration public const string UseDisplayUsername = \"use_by_username\" Field Value Type Description System.String"
  },
  "articles/BCM.NET_client_API.html": {
    "href": "articles/BCM.NET_client_API.html",
    "title": "Welcome to the BCM .NET client API documentation",
    "keywords": "Welcome to the BCM .NET client API documentation BCM .NET Client API Reference API reference generated from the code of the BCM .NET Client. BCM .NET Client API Samples Samples documenting some usages of the BCM .NET Client."
  },
  "articles/BCM/API.html": {
    "href": "articles/BCM/API.html",
    "title": "BCM .NET Client API",
    "keywords": "BCM .NET Client API Expand the API Refence in the sidebar to navigate through all the entities and APIs exposed by the BCM .NET Client."
  },
  "articles/BCM/Samples.html": {
    "href": "articles/BCM/Samples.html",
    "title": "BCM .NET Client API Samples",
    "keywords": "BCM .NET Client API Samples Operations with comments Get all the comments in a BCM Document Document document; // a BCM Document deserialized from JSON IEnumerable<SegmentPair> allSegmentPairs = document.Files.Select(file => file.ParagraphUnits).SelectMany(p => p.AllSegmentPairs); List<CommentContainer> sourceComments = allSegmentPairs.Select(segmentPair => segmentPair.Source) .SelectMany(segment => segment.AllSubItems.OfType<CommentContainer>()) .ToList(); List<CommentContainer> targetComments = allSegmentPairs.Select(sp => sp.Target) .SelectMany(segment => segment.AllSubItems.OfType<CommentContainer>()) .ToList(); foreach (var comment in sourceComments) { Console.WriteLine($\"Source comment in segment {comment.ParentSegment.SegmentNumber} with text {comment.Definition.Text}\"); } foreach (var comment in targetComments) { Console.WriteLine($\"Target comment in segment {comment.ParentSegment.SegmentNumber} with text {comment.Definition.Text}\"); } Add a comment over a text element Document document; // a BCM Document deserialized from JSON var definition = new CommentDefinition { Text = \"new comment\", CommentSeverity = CommentSeverity.Medium, Author = \"author\", Date = DateTime.Now }; var comment = new CommentContainer { CommentDefinitionId = definition.Id }; // Find a text element on which to add a Comment var text = document.Files.First().ParagraphUnits.SelectMany(x => x.Target.AllSubItems.OfType<TextMarkup>()).First(); // Remove the Text from its current parent var parentElement = text.Parent; var indexInParent = text.IndexInParent; parentElement.Remove(text); // Add the Text to the newly created Comment element comment.Add(text); // Insert the new Comment element to replace the Text, in the same position parentElement.Insert(indexInParent, comment); Remove a comment Document document; // a BCM Document deserialized from JSON var comment = document.Files.First().ParagraphUnits.SelectMany(x => x.Target.AllSubItems.OfType<CommentContainer>()).First(); // Remove it from the FileSkeleton, where the Comment data is stored document.Files.First().Skeleton.CommentDefinitions.Remove(comment.Definition); // Remove the Comment from its parent element comment.Parent.Remove(comment); BCM Visitor This sample gathers the translatable content from a BCM documents and creates a HTML file with the content. HtmlOutputVisitor using Sdl.Core.Bcm.BcmModel; using Sdl.Core.Bcm.BcmModel.Annotations; using Sdl.Core.Bcm.BcmModel.Common; using System.Text; namespace Sdl.Core.Bcm.API.Samples.Visitor { class HtmlOutputVisitor : BcmVisitor { // Gathers HTML content from the BCM content. private readonly StringBuilder _result = new StringBuilder(); /// <summary> /// Creates a new instance of <see cref=\"HtmlOutputVisitor\"/> and gathers content as HTML from <paramref name=\"markupData\"/> and all its descendant elements. /// </summary> /// <param name=\"markupData\">The <see cref=\"MarkupData\"/> element from which to extract HTML content.</param> /// <returns></returns> public static string Collect(MarkupData markupData) { var collector = new HtmlOutputVisitor(); markupData.AcceptVisitor(collector); return collector.Result; } /// <summary> /// After <see cref=\"Collect(MarkupData)\"/> is called, this will contain the HTML output text. /// </summary> /// <value> /// The result. /// </value> public string Result => _result.ToString(); /// <summary> /// Visits all the descendant elements of <paramref name=\"container\"/>. /// </summary> /// <param name=\"container\">The container.</param> public void VisitChildren(MarkupDataContainer container) { foreach (var markupData in container.Children) { markupData.AcceptVisitor(this); } } /// <summary> /// Visits the descendants of a Comment element. /// </summary> /// <param name=\"commentContainer\"></param> public override void VisitCommentContainer(CommentContainer commentContainer) { VisitChildren(commentContainer); } /// <summary> /// Visits the descendants of a Feedback element. /// </summary> /// <param name=\"feedbackContainer\"></param> public override void VisitFeedbackContainer(FeedbackContainer feedbackContainer) { VisitChildren(feedbackContainer); } /// <summary> /// Visits the descendants of a Locked Content element. /// </summary> /// <param name=\"lockedContentContainer\"></param> public override void VisitLockedContentContainer(LockedContentContainer lockedContentContainer) { VisitChildren(lockedContentContainer); } /// <summary> /// Visits the target <see cref=\"Paragraph\"/> and wraps its content inside a DIV tag. /// </summary> /// <param name=\"paragraph\"></param> public override void VisitParagraph(Paragraph paragraph) { _result.Append($\"<div type=\\\"paragraph\\\">\"); VisitChildren(paragraph); _result.Append($\"</div>\"); } /// <summary> /// Visits a <see cref=\"PlaceholderTag\"/> non-translatable element and appends its content as a VAR tag. /// </summary> /// <param name=\"tag\"></param> public override void VisitPlaceholderTag(PlaceholderTag tag) { _result.Append($\"<var id=\\\"{tag.Id}\\\">{tag.Definition.DisplayText}</var>\"); } public override void VisitRevisionContainer(RevisionContainer revisionContainer) { VisitChildren(revisionContainer); } /// <summary> /// Visits a <see cref=\"Segment\"/> translatable element and appends its content as a DIV tag. /// </summary> /// <param name=\"segment\"></param> public override void VisitSegment(Segment segment) { _result.Append($\"<div type=\\\"segment\\\" id=\\\"{segment.Id}\\\">\"); VisitChildren(segment); _result.Append($\"</div>\"); } /// <summary> /// Structure elements are non-translatable elements which are ignored during the translation process. /// </summary> /// <param name=\"structureTag\">The structure tag.</param> public override void VisitStructure(StructureTag structureTag) { } /// <summary> /// Visits a <see cref=\"TagPair\"/> element and appends its content as a SPAN tag. /// Tag pairs are non-translatable elements which can contain translatable content. /// E.g.: Bold formatting (<b>text</b>). The start and end Bold tags form the tag pair and the text is a child element. /// </summary> /// <param name=\"tagPair\"></param> public override void VisitTagPair(TagPair tagPair) { _result.Append($\"<span id=\\\"{tagPair.Id}\\\">\"); VisitChildren(tagPair); _result.Append(\"</span>\"); } /// <summary> /// Visits the descendants of a Terminology Annotation element. /// </summary> /// <param name=\"terminologyAnnotation\"></param> public override void VisitTerminologyContainer(TerminologyAnnotationContainer terminologyAnnotation) { VisitChildren(terminologyAnnotation); } /// <summary> /// Visits a <see cref=\"TextMarkup\"/> element and appends its content as plain text. /// These are translatable text elements. /// </summary> /// <param name=\"text\"></param> public override void VisitText(TextMarkup text) { _result.Append(text.Text); } } } Usage Document document; // a BCM Document deserialized from JSON var visitor = new HtmlOutputVisitor(); // Surround content with an <html> tag. var result = new StringBuilder(\"<html>\"); // Extract content from each BCM File. // A File represents the content extracted from a native file. A BCM Document can have content extracted from multiple files. document.Files.ForEach(file => { // Get all the target content in a File var targetSegments = file.ParagraphUnits.Select(punit => punit.Target); foreach (var targetSegment in targetSegments) { // Visit each target Segment and append its content as HTML result.Append(HtmlOutputVisitor.Collect(targetSegment)); } }); result.Append(\"</html>\");"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Welcome to the Language Cloud API documentation.",
    "keywords": "Welcome to the Language Cloud API documentation. Here you’ll find all the information you need to get started developing your own Language Cloud plugin. Discover quick guides explaining how to build, develop and deploy your app, plus hints and tips to help you make the most of our APIs. Should you have any ideas as to how we can improve this documentation, any new topics you think we should include or hints and tips you would like to share with the developer community, please let us know. To let us know what your suggested improvements are you can do this by using the \" Improve this Doc \" link on the top right of every page. You will need your own github account for this because this action will create a fork of the repository in your account where you can make the changes and then submit a pull request for us to review and accept. Good luck and happy developing!"
  },
  "index.html": {
    "href": "index.html",
    "title": "Access the Language Cloud APIs",
    "keywords": "Access the Language Cloud APIs Language Cloud is the platform on which RWS host a number of products. You're in the right place if you're looking for API documentation for any of the following: Trados Enterprise Trados Accelerate Trados Team Trados Studio (cloud capabilites) Integrating with Language Cloud products To create an integration with any of the products listed above, you'll need to use the Public API. You can find the documentation for the API here . Note that the API is updated regularly so make sure that you check out the What's new section to find out information on recently added features. To enable RWS to extend and improve the API, and to support the latest features in the products, sometimes it's necessary to remove or change functionality. For that, you'll need to check the What's deprecated page where RWS will post advance notice of any API endpoints that will be removed or change in the future. Don't worry though because RWS will try and give six months notice of any breaking changes. Extending Language Cloud products Language Cloud products can be extended in a number of ways. For example, you may want to create an add-on to support a machine translation engine or you may want to create a custom workflow task. RWS provides an extensibility framework for the Language Cloud suite of products. To get more information on what's required and how you can do this, visit the Language Cloud extensibility documentation pages. Interacting with files Translatable content in Language Cloud is held in a format called BiLingual Content Model , or BCM for short. You can find BCM reference documentation and samples on this site. Click here to find out more. Reporting API issues If you want to report an issue with the API, you can find information on how to do this here - How to report an issue"
  },
  "README.html": {
    "href": "README.html",
    "title": "LanguageCloud-api-docs",
    "keywords": "LanguageCloud-api-docs What is it? This the main repository for the Language Cloud Public API documentation. Can I contribute? Anyone is welcome to contribute to the public Language Cloud API documentation by making a pull request into the master repository. The documentation is split into the following sections: Articles This section hosts a series of usefull article on: how to get started with writing plug-ins for Language Cloud how to best use the public APIs how to troubleshoot common issues API Concepts This section hosts the main guidelines on using the Public API along with the API References Getting started with your contribution The documentation is built using a static documentation generator called DocFX . The documentation content is saved in Markdown files and then built into a website using DocFX . The table of content is saved into separate toc.yml files. In order for you to make a contribution directly please follow the next steps: Create a local branch from the main repository Add your changes by modifying existing Markdown files or by adding new Markdown files Adding new files will require updating the toc.yml files. Use the guideline provided by DocFX to learn more. You can use tools such as Notepad++ or Visual Studio Code to edit the content Create a Pull Request with your changes. This pull request will be reviewed for correctness by one of our technical writers Once your pull request has been approved and committed into the main branch, an automatic pipeline will be triggered which will push your changes to the live documentation site if you wish to test your changes locally you can follow the DOCFX Installation guideline and build the entire solution locally Our documentation automatically fills in the product name and other details so you don't have to make the changes manually if we decide to update the product name. Use the '<var:VariableName>' construct to tell our documentation engine to fill in the info for you. Here are the constructs available at this point: <var:ProductName> - The product name, for example Language Cloud"
  }
}